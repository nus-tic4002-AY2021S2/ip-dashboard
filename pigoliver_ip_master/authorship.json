[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"}"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"}"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"}"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pigoliver"},"content":"}"},{"lineNumber":30,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":31,"author":{"gitId":"pigoliver"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"pigoliver"},"content":"    mainClassName \u003d \"seedu.itlogger.ItLogger\""},{"lineNumber":33,"author":{"gitId":"pigoliver"},"content":"}"},{"lineNumber":34,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":35,"author":{"gitId":"pigoliver"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"pigoliver"},"content":"    archiveBaseName \u003d \"itlogger\""},{"lineNumber":37,"author":{"gitId":"pigoliver"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"pigoliver"},"content":"}"},{"lineNumber":39,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":40,"author":{"gitId":"pigoliver"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"pigoliver"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":42,"author":{"gitId":"pigoliver"},"content":"}"},{"lineNumber":43,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":44,"author":{"gitId":"pigoliver"},"content":"jar {"},{"lineNumber":45,"author":{"gitId":"pigoliver"},"content":"    manifest {"},{"lineNumber":46,"author":{"gitId":"pigoliver"},"content":"        attributes \u0027Main-Class\u0027: \u0027seedu.itlogger.ItLogger\u0027"},{"lineNumber":47,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"pigoliver"},"content":"}"},{"lineNumber":49,"author":{"gitId":"pigoliver"},"content":"run{"},{"lineNumber":50,"author":{"gitId":"pigoliver"},"content":"    standardInput \u003d System.in"},{"lineNumber":51,"author":{"gitId":"pigoliver"},"content":"    enableAssertions \u003d true"},{"lineNumber":52,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":52}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"E | 0 | project meeting | 2020-08-06"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":"T | 1 | join sports club"},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"E | 1 | birthday party | 2020-10-20"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"D | 0 | return book | 2020-09-20"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"D | 0 | go shopping | 2020-12-31"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"D | 0 | return book | 2020-09-30"}],"authorContributionMap":{"pigoliver":6}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":"Duke is a command line interface task manager."},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"It can help you keep track of the list of tasks."},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"Duke supports three different types of Task: Todo, Deadline, and Event."},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"It could add, delete, set done and list task."},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"It could auto save and load data into a saved file."},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"### Todo"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"The simplest Task. It has description, and a status as done or not."},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"### Deadline"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"The Task with a deadline. It can store a date as deadline of the given task."},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"### Event"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"The Task with a start date. It can store a date as start date of the given task."},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"### Add"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"Add a Task to the Task List."},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"### Delete"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"Delete a specific Task from the Task List."},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"### Set Done"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"Set a Task\u0027s status as done."},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":"### List"},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"List all the lists from Task List."},{"lineNumber":28,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":29,"author":{"gitId":"pigoliver"},"content":"### Find"},{"lineNumber":30,"author":{"gitId":"pigoliver"},"content":"Find the Tasks with keywords and list them out."},{"lineNumber":31,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":32,"author":{"gitId":"pigoliver"},"content":"### Auto Save and Load"},{"lineNumber":33,"author":{"gitId":"pigoliver"},"content":"Task List changes will be auto stored as a file, and loaded in next run."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"pigoliver"},"content":"### `todo` - Add todo to Task List"},{"lineNumber":39,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":40,"author":{"gitId":"pigoliver"},"content":"todo will create a todo Task with descriptions followed and add to Task List."},{"lineNumber":41,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":42,"author":{"gitId":"pigoliver"},"content":"Example of usage: "},{"lineNumber":43,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":44,"author":{"gitId":"pigoliver"},"content":"`todo read book`"},{"lineNumber":45,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":46,"author":{"gitId":"pigoliver"},"content":"Expected outcome:"},{"lineNumber":47,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":48,"author":{"gitId":"pigoliver"},"content":"`[T][âœ˜] read book`"},{"lineNumber":49,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":50,"author":{"gitId":"pigoliver"},"content":"### `deadline` - Add deadline to Task List"},{"lineNumber":51,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":52,"author":{"gitId":"pigoliver"},"content":"deadline will create a deadline Task with descriptions and deadline followed and add to Task List."},{"lineNumber":53,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":54,"author":{"gitId":"pigoliver"},"content":"Example of usage: "},{"lineNumber":55,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":56,"author":{"gitId":"pigoliver"},"content":"`deadline return book /by 2020-09-30`"},{"lineNumber":57,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":58,"author":{"gitId":"pigoliver"},"content":"Expected outcome:"},{"lineNumber":59,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":60,"author":{"gitId":"pigoliver"},"content":"`[D][âœ˜] return book (by: Sep 30 2020)`"},{"lineNumber":61,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":62,"author":{"gitId":"pigoliver"},"content":"### `event` - Add event to Task List"},{"lineNumber":63,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":64,"author":{"gitId":"pigoliver"},"content":"event will create an event Task with descriptions and start date followed and add to Task List."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"pigoliver"},"content":"Example of usage: "},{"lineNumber":67,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":68,"author":{"gitId":"pigoliver"},"content":"`event team meeting /at 2020-10-01`"},{"lineNumber":69,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":70,"author":{"gitId":"pigoliver"},"content":"Expected outcome:"},{"lineNumber":71,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":72,"author":{"gitId":"pigoliver"},"content":"`[E][âœ˜] team meeting (at: Oct 1 2020)`"},{"lineNumber":73,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":74,"author":{"gitId":"pigoliver"},"content":"### `list` - List all Tasks from Task List"},{"lineNumber":75,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":76,"author":{"gitId":"pigoliver"},"content":"list will print out all Tasks stored in Task List."},{"lineNumber":77,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":78,"author":{"gitId":"pigoliver"},"content":"Example of usage: "},{"lineNumber":79,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":80,"author":{"gitId":"pigoliver"},"content":"`list`"},{"lineNumber":81,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":82,"author":{"gitId":"pigoliver"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":84,"author":{"gitId":"pigoliver"},"content":"` 1. [T][âœ˜] read book`"},{"lineNumber":85,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":86,"author":{"gitId":"pigoliver"},"content":"` 2. [D][âœ˜] return book (by: Sep 30 2020)`"},{"lineNumber":87,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":88,"author":{"gitId":"pigoliver"},"content":"` 3. [E][âœ˜] team meeting (at: Oct 1 2020)`"},{"lineNumber":89,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":90,"author":{"gitId":"pigoliver"},"content":"### `delete` - Delete a Task from Task List"},{"lineNumber":91,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":92,"author":{"gitId":"pigoliver"},"content":"delete will remove the stated Task stored in Task List."},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"pigoliver"},"content":"`delete 1`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"pigoliver"},"content":"` Noted. I\u0027ve removed this task: `"},{"lineNumber":101,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":102,"author":{"gitId":"pigoliver"},"content":"  `   [T][âœ˜] read book`"},{"lineNumber":103,"author":{"gitId":"pigoliver"},"content":"  "},{"lineNumber":104,"author":{"gitId":"pigoliver"},"content":"### `done` - Set a Task\u0027s status to done"},{"lineNumber":105,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":106,"author":{"gitId":"pigoliver"},"content":"done will set the stated Task\u0027s status stored in Task List."},{"lineNumber":107,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":108,"author":{"gitId":"pigoliver"},"content":"Example of usage: "},{"lineNumber":109,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":110,"author":{"gitId":"pigoliver"},"content":"`done 1`"},{"lineNumber":111,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":112,"author":{"gitId":"pigoliver"},"content":"Expected outcome:"},{"lineNumber":113,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":114,"author":{"gitId":"pigoliver"},"content":"` Nice! I\u0027ve marked this task as done:`"},{"lineNumber":115,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":116,"author":{"gitId":"pigoliver"},"content":"  `   [E][âœ“] team meeting (at: Oct 1 2020)`"},{"lineNumber":117,"author":{"gitId":"pigoliver"},"content":"  "},{"lineNumber":118,"author":{"gitId":"pigoliver"},"content":"  ### `find` - Find Tasks contains search term stated"},{"lineNumber":119,"author":{"gitId":"pigoliver"},"content":"  "},{"lineNumber":120,"author":{"gitId":"pigoliver"},"content":"  find will search through the Task List and list all the tasks contains search term."},{"lineNumber":121,"author":{"gitId":"pigoliver"},"content":"  "},{"lineNumber":122,"author":{"gitId":"pigoliver"},"content":"  Example of usage: "},{"lineNumber":123,"author":{"gitId":"pigoliver"},"content":"  "},{"lineNumber":124,"author":{"gitId":"pigoliver"},"content":"  `find book`"},{"lineNumber":125,"author":{"gitId":"pigoliver"},"content":"  "},{"lineNumber":126,"author":{"gitId":"pigoliver"},"content":"  Expected outcome:"},{"lineNumber":127,"author":{"gitId":"pigoliver"},"content":"  "},{"lineNumber":128,"author":{"gitId":"pigoliver"},"content":"  ` Here are the matching tasks in your list:`"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  "},{"lineNumber":130,"author":{"gitId":"pigoliver"},"content":"    `1. [D][âœ˜] return book (by: Sep 20 2020)`"},{"lineNumber":131,"author":{"gitId":"pigoliver"},"content":"    "},{"lineNumber":132,"author":{"gitId":"pigoliver"},"content":"    `2. [T][âœ“] read book`"},{"lineNumber":133,"author":{"gitId":"pigoliver"},"content":"    "},{"lineNumber":134,"author":{"gitId":"pigoliver"},"content":" ### `bye` - Exit Duke"},{"lineNumber":135,"author":{"gitId":"pigoliver"},"content":"  "},{"lineNumber":136,"author":{"gitId":"pigoliver"},"content":"  bye will stop the program and exit."},{"lineNumber":137,"author":{"gitId":"-"},"content":"  "},{"lineNumber":138,"author":{"gitId":"-"},"content":"  Example of usage: "},{"lineNumber":139,"author":{"gitId":"-"},"content":"  "},{"lineNumber":140,"author":{"gitId":"pigoliver"},"content":"  `bye`"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  "},{"lineNumber":142,"author":{"gitId":"-"},"content":"  Expected outcome:"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  "},{"lineNumber":144,"author":{"gitId":"pigoliver"},"content":"  ` Bye. Hope to see you again soon!`"},{"lineNumber":145,"author":{"gitId":"pigoliver"},"content":"    "}],"authorContributionMap":{"-":20,"pigoliver":125}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"pigoliver"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"pigoliver"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"pigoliver"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":32,"author":{"gitId":"pigoliver"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"pigoliver"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":35,"author":{"gitId":"pigoliver"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"pigoliver"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":38,"author":{"gitId":"pigoliver"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"pigoliver"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":41,"author":{"gitId":"pigoliver"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"pigoliver"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"pigoliver"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":45,"author":{"gitId":"pigoliver"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"pigoliver"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"pigoliver"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"pigoliver"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"pigoliver"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":51,"author":{"gitId":"pigoliver"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":53,"author":{"gitId":"pigoliver"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"pigoliver"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"pigoliver"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":57,"author":{"gitId":"pigoliver"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":59,"author":{"gitId":"pigoliver"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"pigoliver"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"pigoliver"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"pigoliver"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"pigoliver"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":65,"author":{"gitId":"pigoliver"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":67,"author":{"gitId":"pigoliver"},"content":":init"},{"lineNumber":68,"author":{"gitId":"pigoliver"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":70,"author":{"gitId":"pigoliver"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":72,"author":{"gitId":"pigoliver"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"pigoliver"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"pigoliver"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"pigoliver"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":77,"author":{"gitId":"pigoliver"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"pigoliver"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":80,"author":{"gitId":"pigoliver"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":82,"author":{"gitId":"pigoliver"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"pigoliver"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":85,"author":{"gitId":"pigoliver"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":87,"author":{"gitId":"pigoliver"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"pigoliver"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":90,"author":{"gitId":"pigoliver"},"content":":end"},{"lineNumber":91,"author":{"gitId":"pigoliver"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"pigoliver"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":94,"author":{"gitId":"pigoliver"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"pigoliver"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"pigoliver"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"pigoliver"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"pigoliver"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":100,"author":{"gitId":"pigoliver"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"pigoliver"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":103,"author":{"gitId":"pigoliver"},"content":":omega"}],"authorContributionMap":{"pigoliver":103}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"    public static void run(){"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        Storage store \u003d new Storage(taskList);"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"        ui.greetUser();"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"        while(!store.getIsExit()){"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"            try {"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"                parser.getCommand(ui.readCommand(), store, ui, taskList);"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"            } catch (Exception e) {"},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":"                ui.indentPrint(\"â˜¹ OOPS!!! \" +e.getMessage());"},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"            ui.printLine();"},{"lineNumber":28,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":10,"pigoliver":20}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":7}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.commands.DeadlineCommand;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"import duke.commands.EventCommand;"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"import duke.commands.FindCommand;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"import duke.commands.ListCommand;"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"import duke.commands.TodoCommand;"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":" * Parser class handles command parser and identify different keywords with switch cases."},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":" */"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"    public void getCommand (String input, Storage store, Ui ui, TaskList taskList) throws Exception{"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        int index;"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        ui.printLine();"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"        String command, others;"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"        if(input.contains(\" \")){"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"            command \u003d input.split(\" \",2)[0];"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"            others \u003d input.split(\" \",2)[1];"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"        }else{"},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":"            command \u003d input;"},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":"            others \u003d \"\";"},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"pigoliver"},"content":"        switch (command) {"},{"lineNumber":29,"author":{"gitId":"pigoliver"},"content":"            case \"bye\":"},{"lineNumber":30,"author":{"gitId":"pigoliver"},"content":"                new ByeCommand().execute(ui,store,taskList);"},{"lineNumber":31,"author":{"gitId":"pigoliver"},"content":"                break;"},{"lineNumber":32,"author":{"gitId":"pigoliver"},"content":"            case \"list\":"},{"lineNumber":33,"author":{"gitId":"pigoliver"},"content":"                new ListCommand().execute(ui,store,taskList);"},{"lineNumber":34,"author":{"gitId":"pigoliver"},"content":"                break;"},{"lineNumber":35,"author":{"gitId":"pigoliver"},"content":"            case \"done\":"},{"lineNumber":36,"author":{"gitId":"pigoliver"},"content":"                new DoneCommand().execute(others,ui,store,taskList);"},{"lineNumber":37,"author":{"gitId":"pigoliver"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"pigoliver"},"content":"            case \"delete\":"},{"lineNumber":39,"author":{"gitId":"pigoliver"},"content":"                new DeleteCommand().execute(others,ui,store,taskList);"},{"lineNumber":40,"author":{"gitId":"pigoliver"},"content":"                break;"},{"lineNumber":41,"author":{"gitId":"pigoliver"},"content":"            case \"todo\":"},{"lineNumber":42,"author":{"gitId":"pigoliver"},"content":"                new TodoCommand().execute(others,ui,store,taskList);"},{"lineNumber":43,"author":{"gitId":"pigoliver"},"content":"                break;"},{"lineNumber":44,"author":{"gitId":"pigoliver"},"content":"            case \"deadline\":"},{"lineNumber":45,"author":{"gitId":"pigoliver"},"content":"                new DeadlineCommand().execute(others,ui,store,taskList);"},{"lineNumber":46,"author":{"gitId":"pigoliver"},"content":"                break;"},{"lineNumber":47,"author":{"gitId":"pigoliver"},"content":"            case \"event\":"},{"lineNumber":48,"author":{"gitId":"pigoliver"},"content":"                new EventCommand().execute(others,ui,store,taskList);"},{"lineNumber":49,"author":{"gitId":"pigoliver"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"pigoliver"},"content":"            case \"find\":"},{"lineNumber":51,"author":{"gitId":"pigoliver"},"content":"                new FindCommand().execute(others,ui,store,taskList);"},{"lineNumber":52,"author":{"gitId":"pigoliver"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"pigoliver"},"content":"            default:"},{"lineNumber":54,"author":{"gitId":"pigoliver"},"content":"                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":55,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":57}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.Todo;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.Deadline;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.Event;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"import java.io.FileReader;"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"import java.io.BufferedReader;"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"import java.io.FileWriter;"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"import java.io.BufferedWriter;"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":" * Storage class handles List of task as tempStorage,"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":" */"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"    private String storageFilePath\u003d System.getProperty(\"user.dir\") + File.separator + \"data\" + File.separator;"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"    private boolean isExit;"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"    public Storage(TaskList taskList){"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"        isExit \u003d false;"},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":"        try{"},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":"            loadFromFile(taskList);"},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"        }catch (IOException e){"},{"lineNumber":28,"author":{"gitId":"pigoliver"},"content":"            System.out.println(e);"},{"lineNumber":29,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pigoliver"},"content":"    public void loadFromFile(TaskList tempStorage) throws IOException{"},{"lineNumber":32,"author":{"gitId":"pigoliver"},"content":"        File directory \u003d new File(storageFilePath);"},{"lineNumber":33,"author":{"gitId":"pigoliver"},"content":"        if(!directory.exists()){"},{"lineNumber":34,"author":{"gitId":"pigoliver"},"content":"            directory.mkdir();"},{"lineNumber":35,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"pigoliver"},"content":"        File storage\u003dnew File(storageFilePath + \"duke.txt\");"},{"lineNumber":37,"author":{"gitId":"pigoliver"},"content":"        BufferedReader fileReader \u003d new BufferedReader(new FileReader(storage));"},{"lineNumber":38,"author":{"gitId":"pigoliver"},"content":"        String savedTask;"},{"lineNumber":39,"author":{"gitId":"pigoliver"},"content":"        while((savedTask \u003d fileReader.readLine())!\u003dnull) {"},{"lineNumber":40,"author":{"gitId":"pigoliver"},"content":"            String taskType \u003d savedTask.split(\" \\\\| \",4)[0];"},{"lineNumber":41,"author":{"gitId":"pigoliver"},"content":"            String isDone \u003d savedTask.split(\" \\\\| \",4)[1];"},{"lineNumber":42,"author":{"gitId":"pigoliver"},"content":"            String taskDescription \u003d savedTask.split(\" \\\\| \",4)[2];"},{"lineNumber":43,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":44,"author":{"gitId":"pigoliver"},"content":"            switch(taskType){"},{"lineNumber":45,"author":{"gitId":"pigoliver"},"content":"                case \"T\":"},{"lineNumber":46,"author":{"gitId":"pigoliver"},"content":"                    tempStorage.addTask(new Todo(taskDescription));"},{"lineNumber":47,"author":{"gitId":"pigoliver"},"content":"                    if(isDone.matches(\"1\")){"},{"lineNumber":48,"author":{"gitId":"pigoliver"},"content":"                        tempStorage.setDoneAt(tempStorage.getSize()-1);"},{"lineNumber":49,"author":{"gitId":"pigoliver"},"content":"                    }"},{"lineNumber":50,"author":{"gitId":"pigoliver"},"content":"                    break;"},{"lineNumber":51,"author":{"gitId":"pigoliver"},"content":"                case \"D\":"},{"lineNumber":52,"author":{"gitId":"pigoliver"},"content":"                    String taskDeadline \u003d savedTask.split(\" \\\\| \",4)[3];"},{"lineNumber":53,"author":{"gitId":"pigoliver"},"content":"                    tempStorage.addTask(new Deadline(taskDescription,taskDeadline));"},{"lineNumber":54,"author":{"gitId":"pigoliver"},"content":"                    if(isDone.matches(\"1\")){"},{"lineNumber":55,"author":{"gitId":"pigoliver"},"content":"                        tempStorage.setDoneAt(tempStorage.getSize()-1);"},{"lineNumber":56,"author":{"gitId":"pigoliver"},"content":"                    }"},{"lineNumber":57,"author":{"gitId":"pigoliver"},"content":"                    break;"},{"lineNumber":58,"author":{"gitId":"pigoliver"},"content":"                case \"E\":"},{"lineNumber":59,"author":{"gitId":"pigoliver"},"content":"                    String taskEventTime \u003d savedTask.split(\" \\\\| \",4)[3];"},{"lineNumber":60,"author":{"gitId":"pigoliver"},"content":"                    tempStorage.addTask(new Event(taskDescription,taskEventTime));"},{"lineNumber":61,"author":{"gitId":"pigoliver"},"content":"                    if(isDone.matches(\"1\")){"},{"lineNumber":62,"author":{"gitId":"pigoliver"},"content":"                        tempStorage.setDoneAt(tempStorage.getSize()-1);"},{"lineNumber":63,"author":{"gitId":"pigoliver"},"content":"                    }"},{"lineNumber":64,"author":{"gitId":"pigoliver"},"content":"                    break;"},{"lineNumber":65,"author":{"gitId":"pigoliver"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"pigoliver"},"content":"        fileReader.close();"},{"lineNumber":68,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"pigoliver"},"content":"    public void saveToFile(TaskList tempStorage) throws IOException {"},{"lineNumber":70,"author":{"gitId":"pigoliver"},"content":"        File storage \u003d new File(storageFilePath);"},{"lineNumber":71,"author":{"gitId":"pigoliver"},"content":"        BufferedWriter toSaveTask \u003d new BufferedWriter(new FileWriter(storage));"},{"lineNumber":72,"author":{"gitId":"pigoliver"},"content":"        for(int i \u003d 0;i\u003c tempStorage.getSize();i++){"},{"lineNumber":73,"author":{"gitId":"pigoliver"},"content":"            toSaveTask.write(outputTaskForSave(tempStorage.getTask(i)));"},{"lineNumber":74,"author":{"gitId":"pigoliver"},"content":"            if(i!\u003dtempStorage.getSize()-1){"},{"lineNumber":75,"author":{"gitId":"pigoliver"},"content":"                toSaveTask.newLine();"},{"lineNumber":76,"author":{"gitId":"pigoliver"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"pigoliver"},"content":"        toSaveTask.close();"},{"lineNumber":79,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"pigoliver"},"content":"    public String outputTaskForSave(Task toSave){"},{"lineNumber":81,"author":{"gitId":"pigoliver"},"content":"        int isDone\u003d0;"},{"lineNumber":82,"author":{"gitId":"pigoliver"},"content":"        if(toSave.getIsDone()){"},{"lineNumber":83,"author":{"gitId":"pigoliver"},"content":"            isDone\u003d1;"},{"lineNumber":84,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"pigoliver"},"content":"        if(toSave instanceof Deadline){"},{"lineNumber":86,"author":{"gitId":"pigoliver"},"content":"            return \"D | \"+isDone+\" | \"+ toSave.getDescription()+ \" | \"+((Deadline) toSave).getByForFile();"},{"lineNumber":87,"author":{"gitId":"pigoliver"},"content":"        }else if(toSave instanceof Event){"},{"lineNumber":88,"author":{"gitId":"pigoliver"},"content":"            return \"E | \"+isDone+\" | \"+ toSave.getDescription()+ \" | \"+((Event) toSave).getAtForFile();"},{"lineNumber":89,"author":{"gitId":"pigoliver"},"content":"        }else if(toSave instanceof Todo){"},{"lineNumber":90,"author":{"gitId":"pigoliver"},"content":"            return \"T | \"+isDone+\" | \"+ toSave.getDescription();"},{"lineNumber":91,"author":{"gitId":"pigoliver"},"content":"        } else {"},{"lineNumber":92,"author":{"gitId":"pigoliver"},"content":"            return \"\";"},{"lineNumber":93,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":96,"author":{"gitId":"pigoliver"},"content":"    public void toExit(){"},{"lineNumber":97,"author":{"gitId":"pigoliver"},"content":"        isExit\u003dtrue;"},{"lineNumber":98,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"pigoliver"},"content":"    public boolean getIsExit(){"},{"lineNumber":100,"author":{"gitId":"pigoliver"},"content":"        return isExit;"},{"lineNumber":101,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":102}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":" * Ui class handles all the print out to users, and read input from users."},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":" */"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"    protected Scanner in \u003d new Scanner(System.in);"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"    public void printLine(){"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"    public void indentPrint(String toPrint){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"        System.out.println(\" \"+toPrint);"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"    public void greetUser(){"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        printLine();"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        indentPrint(\"Hello! I\u0027m Duke\");"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        indentPrint(\"What can I do for you?\");"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        printLine();"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"    public void byeToUser(){"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"        indentPrint(\"Bye. Hope to see you again soon!\");"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"    public String readCommand(){"},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":"        return in.nextLine();"},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":27}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"public class ByeCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList){"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"        storage.toExit();"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"        ui.byeToUser();"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":12}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":" * An abstract Command Class to provide structure for"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":" * other commands"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":" */"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"    protected String commandBody;"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"    public Command(String fullCommand){"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        this.commandBody\u003dfullCommand;"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"    public Command(){ }"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    public abstract void execute(Ui ui, Storage storage, TaskList taskList) throws DukeException, IOException;"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":21}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"public class DeadlineCommand {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    public void execute(String others, Ui ui, Storage storage, TaskList taskList) throws DukeException, IOException {"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        if(others.isEmpty()){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"        taskList.addDeadlineToTemp(others);"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"  \"+taskList.getTask(taskList.getSize()-1).toString());"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint( \"Now you have \"+taskList.getSize()+\" tasks in the list.\");"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        storage.saveToFile(taskList);"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":21}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"public class DeleteCommand {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    public void execute(String others, Ui ui, Storage storage, TaskList taskList) throws DukeException, IOException {"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        if(others.isEmpty()){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"The index of a delete command cannot be empty.\");"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"        int index \u003d Integer.parseInt(others);"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"  \"+taskList.deleteTaskAt(index-1).toString());"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        storage.saveToFile(taskList);"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":20}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"public class DoneCommand {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    public void execute(String others, Ui ui, Storage storage, TaskList taskList) throws DukeException, IOException {"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        if(others.isEmpty()){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"The index of a done command cannot be empty.\");"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"        int index \u003d Integer.parseInt(others);"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        taskList.setDoneAt(index-1);"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"  \"+taskList.getTask(index-1).toString());"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        storage.saveToFile(taskList);"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":21}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"public class EventCommand {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    public void execute(String others, Ui ui, Storage storage, TaskList taskList) throws DukeException, IOException {"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        if(others.isEmpty()){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"The description of a event cannot be empty.\");"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"        taskList.addEventToTemp(others);"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"  \"+taskList.getTask(taskList.getSize()-1).toString());"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint( \"Now you have \"+taskList.getSize()+\" tasks in the list.\");"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        storage.saveToFile(taskList);"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":21}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"public class FindCommand {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    protected TaskList findResult;"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"    public FindCommand(){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"        findResult\u003dnew TaskList();"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"    public void execute(String others, Ui ui, Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        if(others.isEmpty()){"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"The find term cannot be empty.\");"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        for(int i\u003d0;i\u003ctaskList.getSize();i++){"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"            if(taskList.getTask(i).getDescription().contains(others)){"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"                findResult.addTask(taskList.getTask(i));"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"Here are the matching tasks in your list:\");"},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":"        for(int j\u003d0;j\u003cfindResult.getSize();j++){"},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":"            ui.indentPrint((j+1)+\". \"+findResult.getTask(j).toString());"},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":29}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"public class ListCommand {"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"Here are the tasks in your list:\");"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        for(int i\u003d0;i\u003ctaskList.getSize();i++){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"            ui.indentPrint((i+1)+\". \"+taskList.getTask(i).toString());"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":16}},{"path":"src/main/java/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"public class TodoCommand {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    public void execute(String others, Ui ui, Storage storage, TaskList taskList) throws DukeException, IOException {"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        if(others.isEmpty()){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"        taskList.addTodoToTemp(others);"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint(\"  \"+taskList.getTask(taskList.getSize()-1).toString());"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        ui.indentPrint( \"Now you have \"+taskList.getSize()+\" tasks in the list.\");"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        storage.saveToFile(taskList);"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":21}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":" * To test Deadline, please run DeadlineTest"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":" */"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"public class Deadline extends Todo {"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"    protected LocalDate by;"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    public Deadline(String description, String by){"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"        this.by\u003dLocalDate.parse(by);"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"    public String toString(){"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        return \"[D]\" + \"[\"+getStatusIcon()+\"]\"+\" \"+getDescription() + \" (by: \" + getBy() + \")\";"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"    public String getBy(){"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        return by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"    public String getByForFile() {"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"        return by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":24}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"public class Event extends Todo {"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"    protected LocalDate at;"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"    public Event(String description, String at){"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"        this.at \u003d LocalDate.parse(at);"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"    public String toString(){"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"        return \"[E]\" + \"[\"+getStatusIcon()+\"]\"+\" \"+getDescription() + \" (at: \" + getAt() + \")\";"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"    public String getAt(){"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        return at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"    public String getAtForFile() {"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        return at.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":21}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"    public Task(String description) {"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"        this.description \u003d description;"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"    public abstract String getStatusIcon();"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"    public abstract void setDone();"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"    public abstract void setNotDone();"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"    public abstract boolean getIsDone();"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"    public String getDescription(){"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"        return this.description;"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"    public String toString(){"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"        return \"[\"+getStatusIcon()+\"]\"+\" \"+getDescription();"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":24}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"    private ArrayList\u003cTask\u003e tempStorage;"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"    public TaskList(){"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"        tempStorage\u003dnew ArrayList\u003c\u003e(100);"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"    public void addTask(Task toAdd){"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        tempStorage.add(toAdd);"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"    public Task deleteTaskAt(int index){"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        return tempStorage.remove(index);"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"    public Task getTask(int index){"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"        return tempStorage.get(index);"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"    public int getSize(){"},{"lineNumber":23,"author":{"gitId":"pigoliver"},"content":"        return tempStorage.size();"},{"lineNumber":24,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pigoliver"},"content":"    public void setDoneAt(int index){"},{"lineNumber":26,"author":{"gitId":"pigoliver"},"content":"        tempStorage.get(index).setDone();"},{"lineNumber":27,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pigoliver"},"content":"    public void addTodoToTemp(String toAdd) {"},{"lineNumber":29,"author":{"gitId":"pigoliver"},"content":"        tempStorage.add(new Todo(toAdd));"},{"lineNumber":30,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pigoliver"},"content":"    public void addDeadlineToTemp(String toAdd) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"pigoliver"},"content":"        if(!toAdd.contains(\" /by \")){"},{"lineNumber":33,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"No /by found in command.\");"},{"lineNumber":34,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"pigoliver"},"content":"        String description \u003d toAdd.split(\" /by \")[0];"},{"lineNumber":36,"author":{"gitId":"pigoliver"},"content":"        if(toAdd.split(\" /by \").length\u003c2){"},{"lineNumber":37,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"No event time found after keyword /by .\");"},{"lineNumber":38,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"pigoliver"},"content":"        String by \u003d toAdd.split(\" /by \")[1];"},{"lineNumber":40,"author":{"gitId":"pigoliver"},"content":"        tempStorage.add(new Deadline(description,by));"},{"lineNumber":41,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"pigoliver"},"content":"    public void addEventToTemp(String toAdd) throws DukeException{"},{"lineNumber":43,"author":{"gitId":"pigoliver"},"content":"        if(!toAdd.contains(\" /at \")){"},{"lineNumber":44,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"No /at found in command.\");"},{"lineNumber":45,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pigoliver"},"content":"        String description \u003d toAdd.split(\" /at \")[0];"},{"lineNumber":47,"author":{"gitId":"pigoliver"},"content":"        if(toAdd.split(\" /at \").length\u003c2){"},{"lineNumber":48,"author":{"gitId":"pigoliver"},"content":"            throw new DukeException(\"No event time found after keyword /at .\");"},{"lineNumber":49,"author":{"gitId":"pigoliver"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"pigoliver"},"content":"        String at \u003d toAdd.split(\" /at \")[1];"},{"lineNumber":51,"author":{"gitId":"pigoliver"},"content":"        tempStorage.add(new Event(description,at));"},{"lineNumber":52,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":53}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"    protected boolean isDone;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"    public Todo(String description){"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"        this.isDone \u003d false;"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"    public String getStatusIcon() {"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"    public boolean getIsDone(){return isDone;}"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"    public void setDone(){"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        this.isDone \u003d true;"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"    public void setNotDone(){"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"    public String toString(){"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":21,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":22}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"    public void Deadline() {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"        Deadline deadline1 \u003d new Deadline(\"borrow book\", \"2020-09-10\");"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        Deadline deadline2 \u003d new Deadline(\"read book\", \"2020-09-20\");"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"        Deadline deadline3 \u003d new Deadline(\"return book\", \"2020-09-30\");"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":"        assertEquals(\"[D][âœ˜] borrow book (by: Sep 10 2020)\", deadline1.toString());"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        assertEquals(\"[D][âœ˜] read book (by: Sep 20 2020)\", deadline2.toString());"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        assertEquals(\"[D][âœ˜] return book (by: Sep 30 2020)\", deadline3.toString());"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"    public void dummyTest(){"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"        assertEquals(2,2);"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":13}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"import duke.tasks.Todo;"},{"lineNumber":4,"author":{"gitId":"pigoliver"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":6,"author":{"gitId":"pigoliver"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":8,"author":{"gitId":"pigoliver"},"content":"public class TodoTest {"},{"lineNumber":9,"author":{"gitId":"pigoliver"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"    public void ToDo() {"},{"lineNumber":11,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":12,"author":{"gitId":"pigoliver"},"content":"        Todo todo1 \u003d new Todo(\"borrow book\");"},{"lineNumber":13,"author":{"gitId":"pigoliver"},"content":"        Todo todo2 \u003d new Todo(\"read book\");"},{"lineNumber":14,"author":{"gitId":"pigoliver"},"content":"        Todo todo3 \u003d new Todo(\"return book\");"},{"lineNumber":15,"author":{"gitId":"pigoliver"},"content":""},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"        assertEquals(\"[T][âœ˜] borrow book\", todo1.toString());"},{"lineNumber":17,"author":{"gitId":"pigoliver"},"content":"        assertEquals(\"[T][âœ˜] read book\", todo2.toString());"},{"lineNumber":18,"author":{"gitId":"pigoliver"},"content":"        assertEquals(\"[T][âœ˜] return book\", todo3.toString());"},{"lineNumber":19,"author":{"gitId":"pigoliver"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pigoliver"},"content":"}"}],"authorContributionMap":{"pigoliver":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pigoliver"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"pigoliver"},"content":"deadline return book /by today"},{"lineNumber":3,"author":{"gitId":"pigoliver"},"content":"list"}],"authorContributionMap":{"pigoliver":3}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"pigoliver"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"pigoliver":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"pigoliver"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"pigoliver":1}}]
