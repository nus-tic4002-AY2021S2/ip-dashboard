[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"[![CI Status](https://github.com/tototto/ip/actions/workflows/gradle.yml/badge.svg)](https://github.com/tototto/ip/actions)"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"# duke.Duke project template"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":18,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":24,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":25,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"tototto":4,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.6.0\u0027"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":""},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":""},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"},{"lineNumber":62,"author":{"gitId":"tototto"},"content":""}],"authorContributionMap":{"tototto":19,"-":43}},{"path":"data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"[D] [✘] read book (by: 2/2/20 12pm)"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":"[T] [✘] return book "},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"[T] [✓] buy iphone 12 "},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"[D] [✘] sell ipad (by: 30/10/2020 12pm)"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"[E] [✘] join webinar (at: 12/06/2020 4am)"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"[D] [✘] sample ded task (by: 20/2/2222 3pm)"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"[D] [✓] thanks giving dinner (by: 12/12/12 4pm)"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"[D] [✘] fskdg (by: 12/12/21 7pm)"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"[E] [✓] tgsdfsdf (at: 12/12/12 5pm-6pm)"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"[T] [✘] just checking "},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"[D] [✘] birthday party today (by: 12/12/12 5pm)"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"[E] [✓] eating competition (at: 12/12/21 5pm-6pm)"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"[T] [✓] sample "},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"[D] [✘] task desc (by: 12/12/99 4pm)"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"[E] [✓] wwdc at night (at: 12/4/21 5pm-6pm)"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"[T] [✓] ttt "},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"[E] [✓] uuu iii (at: 5/5/21 9pm)"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"[D] [✓] iii ffsf sdfd (by: 4/3/12 9pm)"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"[T] [✓] gggggg "},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"[T] [✓] iiiiiiii "},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"[D] [✘] dfsfgg (by: 5/5/5 12pm)"}],"authorContributionMap":{"tototto":21}},{"path":"docs/DeveloperGuide.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"# Developer Guide"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"## Design"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":""},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"### Architecture"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":""},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"![Image of SoftwareArchitecture](https://github.com/tototto/ip/blob/master/docs/images/architecture.jpg?raw\u003dtrue)"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":""},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"The Architecture Diagram given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":10,"author":{"gitId":"tototto"},"content":""},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"The App consist of 9 components."},{"lineNumber":12,"author":{"gitId":"tototto"},"content":""},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"* UI: The UI of the App."},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"* Duke: The main logic handler of the App."},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"* Command: The control variable of the App."},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"* FileManager: Reads data from, and writes data to, the hard disk."},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"* Storage: Contains the in-memory data of the app."},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"* Search: Searches the data"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"* Task: Define the structure of each task."},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"* Input: Define how input is recieved."},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"* Output: Define how output is displayed."},{"lineNumber":22,"author":{"gitId":"tototto"},"content":""},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"### How the architecture components interact with each other"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":""},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"The Sequence Diagram below shows how the components interact with each other for the scenario where the user issues the command todo xxx."},{"lineNumber":26,"author":{"gitId":"tototto"},"content":""},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"![Image of SequenceDiagram](https://github.com/tototto/ip/blob/master/docs/images/Interaction.jpg?raw\u003dtrue)"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":""},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"The sections below give more details of some of each component."},{"lineNumber":30,"author":{"gitId":"tototto"},"content":""},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"### Duke component"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":""},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"![Image of DukeComponent](https://github.com/tototto/ip/blob/master/docs/images/Duke.jpg?raw\u003dtrue)"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":""},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"The Duke componenet is the main handler of the App logic. It is associated with and contains all other classes as they are needed and necessary for the sucessful implementation of the logic in Duke. Duke uses the other classes in the order that is required to work the logic."},{"lineNumber":36,"author":{"gitId":"tototto"},"content":""},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"The Duke componenet is called by the UI componenet which is implemented using JavaFX."},{"lineNumber":38,"author":{"gitId":"tototto"},"content":""},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"### Command component"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":""},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"![Image of CommandComponent](https://github.com/tototto/ip/blob/master/docs/images/CmdComponent.jpg?raw\u003dtrue)"},{"lineNumber":42,"author":{"gitId":"tototto"},"content":""},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"User provide input to the App and they are pared by the InputParser class to produce a Keyword String object."},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"Command and input entered by the user with the keyword are passed into the Command componenet by Duke."},{"lineNumber":45,"author":{"gitId":"tototto"},"content":"Command Components handles the different input of user entered into Duke based on the keyword extracted. "},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"Based on the keywords that was parsed, different actions are taken by the Command componenet."},{"lineNumber":47,"author":{"gitId":"tototto"},"content":""},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"Such as: "},{"lineNumber":49,"author":{"gitId":"tototto"},"content":"    * Adding a todo"},{"lineNumber":50,"author":{"gitId":"tototto"},"content":"    * Adding a deadline"},{"lineNumber":51,"author":{"gitId":"tototto"},"content":"    * Marking a task as done"},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"    * Deleting a task"},{"lineNumber":53,"author":{"gitId":"tototto"},"content":""},{"lineNumber":54,"author":{"gitId":"tototto"},"content":"Based on the different keywords, the user remaning input are further parsed using the API of other componenet such as the InputParser."},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"Task can then be created or updated or action can be taken, such as deleting or displaying help."},{"lineNumber":56,"author":{"gitId":"tototto"},"content":"The storage can be updated based on the result of the command executed."},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"The result of the command execution is encapsulated as a output string object and is passed back to the Ui."},{"lineNumber":58,"author":{"gitId":"tototto"},"content":"In addition, the Command Component can also instruct the Ui to perform certain actions, such as displaying help to the user."},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"The result is stored in the Storage componenet and then written to the file by the FileManager Component."},{"lineNumber":60,"author":{"gitId":"tototto"},"content":""},{"lineNumber":61,"author":{"gitId":"tototto"},"content":"## Implementation"},{"lineNumber":62,"author":{"gitId":"tototto"},"content":""},{"lineNumber":63,"author":{"gitId":"tototto"},"content":"Add todo task Implementation"},{"lineNumber":64,"author":{"gitId":"tototto"},"content":""},{"lineNumber":65,"author":{"gitId":"tototto"},"content":"The add todo feature add items in Duke. It is facillated by the Command Class which comprises of the following implementation for the add functionality:"},{"lineNumber":66,"author":{"gitId":"tototto"},"content":""},{"lineNumber":67,"author":{"gitId":"tototto"},"content":"* ```InputParser``` - Parses the remaining input after keyword and prepares them to be added to the App"},{"lineNumber":68,"author":{"gitId":"tototto"},"content":"* ```ListHandler``` - Add the input to the in-memory storage list"},{"lineNumber":69,"author":{"gitId":"tototto"},"content":"* ```Task``` - Define how the task is structured in the App"},{"lineNumber":70,"author":{"gitId":"tototto"},"content":"* ```DisplayHandler``` - Controls the result of the command execution"},{"lineNumber":71,"author":{"gitId":"tototto"},"content":""},{"lineNumber":72,"author":{"gitId":"tototto"},"content":"The following sequence diagram shows how the Add todo operation works."},{"lineNumber":73,"author":{"gitId":"tototto"},"content":""},{"lineNumber":74,"author":{"gitId":"tototto"},"content":"![Image of CommandComponent](https://github.com/tototto/ip/blob/master/docs/images/AddTodoImplementation.jpg?raw\u003dtrue)"},{"lineNumber":75,"author":{"gitId":"tototto"},"content":""},{"lineNumber":76,"author":{"gitId":"tototto"},"content":"##### Design consideration:"},{"lineNumber":77,"author":{"gitId":"tototto"},"content":"Aspect: Add Todo can otherwise be implemented"},{"lineNumber":78,"author":{"gitId":"tototto"},"content":""},{"lineNumber":79,"author":{"gitId":"tototto"},"content":"###### Alternative 1: Allow user to store all task including Events \u0026 Deadline using the Todo command instead of having seperate command such as Deadline \u0026 Event for each of them."},{"lineNumber":80,"author":{"gitId":"tototto"},"content":"Pros: Improve usability. User now only needs to remember one command. \u003cbr\u003e"},{"lineNumber":81,"author":{"gitId":"tototto"},"content":"Cons: difficult to implement."},{"lineNumber":82,"author":{"gitId":"tototto"},"content":""},{"lineNumber":83,"author":{"gitId":"tototto"},"content":""},{"lineNumber":84,"author":{"gitId":"tototto"},"content":"## Product scope"},{"lineNumber":85,"author":{"gitId":"tototto"},"content":"### Target user profile"},{"lineNumber":86,"author":{"gitId":"tototto"},"content":"* Is a manager, student or individual who needs to manage tasks."},{"lineNumber":87,"author":{"gitId":"tototto"},"content":"* prefer desktop apps over other types."},{"lineNumber":88,"author":{"gitId":"tototto"},"content":"* can type fast."},{"lineNumber":89,"author":{"gitId":"tototto"},"content":"* prefers typing to mouse interactions."},{"lineNumber":90,"author":{"gitId":"tototto"},"content":"* is reasonably comfortable using CLI apps."},{"lineNumber":91,"author":{"gitId":"tototto"},"content":""},{"lineNumber":92,"author":{"gitId":"tototto"},"content":"### Value proposition"},{"lineNumber":93,"author":{"gitId":"tototto"},"content":"manage defects faster than a typical mouse/GUI driven app. Allows the user to better manage the personal or work issues."},{"lineNumber":94,"author":{"gitId":"tototto"},"content":""},{"lineNumber":95,"author":{"gitId":"tototto"},"content":"## Non-Functional Requirements"},{"lineNumber":96,"author":{"gitId":"tototto"},"content":""},{"lineNumber":97,"author":{"gitId":"tototto"},"content":"* Should work on any mainstream OS as long as it has Java 11 or above installed."},{"lineNumber":98,"author":{"gitId":"tototto"},"content":"* Should be able to hold up to 1000 task without a noticeable sluggishness in performance for typical usage."},{"lineNumber":99,"author":{"gitId":"tototto"},"content":"* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse"},{"lineNumber":100,"author":{"gitId":"tototto"},"content":"* Should load from and save to from a text files"},{"lineNumber":101,"author":{"gitId":"tototto"},"content":""},{"lineNumber":102,"author":{"gitId":"tototto"},"content":""},{"lineNumber":103,"author":{"gitId":"tototto"},"content":"## Glossary"},{"lineNumber":104,"author":{"gitId":"tototto"},"content":""},{"lineNumber":105,"author":{"gitId":"tototto"},"content":"* *Mainstream OS:* Windows, Linux, Unix, OS-X."},{"lineNumber":106,"author":{"gitId":"tototto"},"content":""},{"lineNumber":107,"author":{"gitId":"tototto"},"content":"## Instructions for manual testing"},{"lineNumber":108,"author":{"gitId":"tototto"},"content":""},{"lineNumber":109,"author":{"gitId":"tototto"},"content":"### Launch and Shutdown"},{"lineNumber":110,"author":{"gitId":"tototto"},"content":""},{"lineNumber":111,"author":{"gitId":"tototto"},"content":"1. Initial launch"},{"lineNumber":112,"author":{"gitId":"tototto"},"content":"    1. Download the jar file and copy into an empty folder"},{"lineNumber":113,"author":{"gitId":"tototto"},"content":"    2. Use Command Prompt to run jar file with `java -jar` command."},{"lineNumber":114,"author":{"gitId":"tototto"},"content":"    3. type exit command to exit from the program."},{"lineNumber":115,"author":{"gitId":"tototto"},"content":""},{"lineNumber":116,"author":{"gitId":"tototto"},"content":"2. Re-launch the app by running `java -jar` command with Command Prompt."},{"lineNumber":117,"author":{"gitId":"tototto"},"content":""},{"lineNumber":118,"author":{"gitId":"tototto"},"content":"### Adding a todo task"},{"lineNumber":119,"author":{"gitId":"tototto"},"content":"1. Add the Todo task through following command:"},{"lineNumber":120,"author":{"gitId":"tototto"},"content":"    1. Todo {task description here}"},{"lineNumber":121,"author":{"gitId":"tototto"},"content":""},{"lineNumber":122,"author":{"gitId":"tototto"},"content":"### Listing all task in the system"},{"lineNumber":123,"author":{"gitId":"tototto"},"content":"1. Enter the command"},{"lineNumber":124,"author":{"gitId":"tototto"},"content":"    1. List"},{"lineNumber":125,"author":{"gitId":"tototto"},"content":"2. List of all task in the system will be listed in the order they were created."},{"lineNumber":126,"author":{"gitId":"tototto"},"content":""},{"lineNumber":127,"author":{"gitId":"tototto"},"content":"### Delete a particular task in the system"},{"lineNumber":128,"author":{"gitId":"tototto"},"content":"1. Enter the command"},{"lineNumber":129,"author":{"gitId":"tototto"},"content":"    1. Delete {index}. Eg: Delete 1"},{"lineNumber":130,"author":{"gitId":"tototto"},"content":"2. The first Defect will be deleted."},{"lineNumber":131,"author":{"gitId":"tototto"},"content":""},{"lineNumber":132,"author":{"gitId":"tototto"},"content":"### Load a list of Defects into the progam upon lauch"},{"lineNumber":133,"author":{"gitId":"tototto"},"content":"1. Program looks for and loads data.txt"},{"lineNumber":134,"author":{"gitId":"tototto"},"content":"2. If file is not found, no task will be preloaded. Program starts as per normal operation."},{"lineNumber":135,"author":{"gitId":"tototto"},"content":""},{"lineNumber":136,"author":{"gitId":"tototto"},"content":"### Save a list of task into itlogger.txt upon exit"},{"lineNumber":137,"author":{"gitId":"tototto"},"content":"1. Saves all task into the data.txt file when user issues any command."},{"lineNumber":138,"author":{"gitId":"tototto"},"content":"2. If file does not exist, data.txt will be created."}],"authorContributionMap":{"tototto":138}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"Duke is an education project."},{"lineNumber":2,"author":{"gitId":"tototto"},"content":"This application has a GUI that can allow user to manage task."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"NUS TIC4002 iP submission"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"Useful links:"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"* [Developer Guide](DeveloperGuide.md)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"tototto":6,"-":3}},{"path":"docs/UserGuide.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"## Quick Start"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":""},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":6,"author":{"gitId":"tototto"},"content":""},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"1. Download the latest Duke.jar from the release page."},{"lineNumber":8,"author":{"gitId":"tototto"},"content":""},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"1. Copy the file to the folder you want to use as the home folder for Duke."},{"lineNumber":10,"author":{"gitId":"tototto"},"content":""},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"1. Double-click the file to start the app."},{"lineNumber":12,"author":{"gitId":"tototto"},"content":""},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"## Features "},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"Allows user to add task to Duke and manage a list of pending items."},{"lineNumber":15,"author":{"gitId":"tototto"},"content":""},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"### Features"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"* Adding task to Duke"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"  * Adding a simple task "},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"  * Adding a task with a deadline (date \u0026 time)"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"  * Adding an event with a deadline (date \u0026 time range)"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"* Allowing user to mark a task as completed "},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"* Viewing a list of task"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":""},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"### `Keyword` - Describe action"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":""},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"Keyword | "},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"------------ | "},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"```todo```  | "},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"```deadline```  | "},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"```event```  | "},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"```list```  | "},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"```done```  | "},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"```delete```  | "},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"```bye```  | "},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"```help```|"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":""},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"## Usage"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":""},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"##### ```todo```"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"Adds a task to Duke with task description given in ```\u003ctask desc\u003e```."},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"##### Usage: ```todo \u003ctask desc\u003e``` "},{"lineNumber":42,"author":{"gitId":"tototto"},"content":""},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"* ```todo Buy an iPhone 12 at launch date```"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":""},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"##### ```deadline```"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"Adds a task with deadline to Duke with task description given in ```\u003ctask desc\u003e```."},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"State completion deadline of the date \u0026 the time in ```\u003cdate\u003e \u003ctime\u003e```."},{"lineNumber":49,"author":{"gitId":"tototto"},"content":"##### Usage: ```deadline \u003ctask desc\u003e /by \u003cdate\u003e \u003ctime\u003e``` "},{"lineNumber":50,"author":{"gitId":"tototto"},"content":""},{"lineNumber":51,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"* ```todo Buy an iPhone 12 at launch date /by 30/10/2020 12pm```"},{"lineNumber":53,"author":{"gitId":"tototto"},"content":""},{"lineNumber":54,"author":{"gitId":"tototto"},"content":"##### ```event```"},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"Adds an event to Duke with task description given in ```\u003ctask desc\u003e```."},{"lineNumber":56,"author":{"gitId":"tototto"},"content":"State event period listing the date \u0026 the time period in ```\u003cdate\u003e \u003ctime\u003e```."},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"Usage: ```event \u003cevent desc\u003e /at \u003cdate\u003e \u003ctime period\u003e``` "},{"lineNumber":58,"author":{"gitId":"tototto"},"content":""},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":60,"author":{"gitId":"tototto"},"content":"* ```event Attend Apple\u0027s WWDC /at 12/06/2020 4am```"},{"lineNumber":61,"author":{"gitId":"tototto"},"content":""},{"lineNumber":62,"author":{"gitId":"tototto"},"content":"##### ```list```"},{"lineNumber":63,"author":{"gitId":"tototto"},"content":"List down all task that are logged in Duke."},{"lineNumber":64,"author":{"gitId":"tototto"},"content":"##### Usage: ```list``` "},{"lineNumber":65,"author":{"gitId":"tototto"},"content":""},{"lineNumber":66,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":67,"author":{"gitId":"tototto"},"content":"* ```list```"},{"lineNumber":68,"author":{"gitId":"tototto"},"content":""},{"lineNumber":69,"author":{"gitId":"tototto"},"content":"##### ```done```"},{"lineNumber":70,"author":{"gitId":"tototto"},"content":"Mark tasks in Duke as completed."},{"lineNumber":71,"author":{"gitId":"tototto"},"content":"Usage: ```done \u003ctask id\u003e``` "},{"lineNumber":72,"author":{"gitId":"tototto"},"content":""},{"lineNumber":73,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":74,"author":{"gitId":"tototto"},"content":"* ```done 4```"},{"lineNumber":75,"author":{"gitId":"tototto"},"content":""},{"lineNumber":76,"author":{"gitId":"tototto"},"content":"##### ```delete```"},{"lineNumber":77,"author":{"gitId":"tototto"},"content":"Mark tasks in Duke as completed."},{"lineNumber":78,"author":{"gitId":"tototto"},"content":"Usage: ```delete \u003cid\u003e``` "},{"lineNumber":79,"author":{"gitId":"tototto"},"content":""},{"lineNumber":80,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":81,"author":{"gitId":"tototto"},"content":"* ```delete 4```"},{"lineNumber":82,"author":{"gitId":"tototto"},"content":""},{"lineNumber":83,"author":{"gitId":"tototto"},"content":"##### ```find```"},{"lineNumber":84,"author":{"gitId":"tototto"},"content":"Loop up all task with a given a word."},{"lineNumber":85,"author":{"gitId":"tototto"},"content":"Usage: ```find \u003cSearch String\u003e``` "},{"lineNumber":86,"author":{"gitId":"tototto"},"content":""},{"lineNumber":87,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":88,"author":{"gitId":"tototto"},"content":"* ```find book```"},{"lineNumber":89,"author":{"gitId":"tototto"},"content":""},{"lineNumber":90,"author":{"gitId":"tototto"},"content":"##### ```help```"},{"lineNumber":91,"author":{"gitId":"tototto"},"content":"Display the usage guide for Duke command."},{"lineNumber":92,"author":{"gitId":"tototto"},"content":""},{"lineNumber":93,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":94,"author":{"gitId":"tototto"},"content":"* ```help```"},{"lineNumber":95,"author":{"gitId":"tototto"},"content":""},{"lineNumber":96,"author":{"gitId":"tototto"},"content":"##### ```bye```"},{"lineNumber":97,"author":{"gitId":"tototto"},"content":"Exit Duke program."},{"lineNumber":98,"author":{"gitId":"tototto"},"content":"##### Usage: ```bye``` "},{"lineNumber":99,"author":{"gitId":"tototto"},"content":""},{"lineNumber":100,"author":{"gitId":"tototto"},"content":"##### Examples:"},{"lineNumber":101,"author":{"gitId":"tototto"},"content":"* ```bye```"},{"lineNumber":102,"author":{"gitId":"tototto"},"content":""},{"lineNumber":103,"author":{"gitId":"tototto"},"content":"## Saving the data"},{"lineNumber":104,"author":{"gitId":"tototto"},"content":"Data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":105,"author":{"gitId":"tototto"},"content":""},{"lineNumber":106,"author":{"gitId":"tototto"},"content":""}],"authorContributionMap":{"tototto":106}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import duke.command.CommandHandler;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import duke.fileManager.FileManager;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"import duke.input.InputHandler;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import duke.input.InputParser;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"import duke.output.DisplayHandler;"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import duke.storage.ListHandler;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":""},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"    //Instantiate Duke program components"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"    private DisplayHandler displayHandler \u003d new DisplayHandler();"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"    private InputHandler inputHandler \u003d new InputHandler();"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"    private InputParser parser \u003d new InputParser();"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"    private ListHandler list \u003d new ListHandler();"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    private CommandHandler command \u003d new CommandHandler();"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"    private FileManager fileManager \u003d new FileManager(\"data.txt\");"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":""},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"     * Display the opening statement of DUKE"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"    public String displayProgramOpening() {"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"        return displayHandler.programOpening();"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":""},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"    public String readDataFile() {"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"        return fileManager.readFile(list);"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":""},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"     * Contains the main logic to run Duke"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"    public String runLogic(String input) {"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":""},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"        String result \u003d \"\";"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":""},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"        // Parse User input"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"        String keyWord \u003d parser.extractKeyWord(input);"},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"        String body \u003d parser.extractKeyWordBody(input, keyWord);"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":""},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"        // If input is not recognised Keyword"},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"        if (parser.checkIfKeyWord(keyWord) \u003d\u003d false) {"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"            result \u003d displayHandler.displayInvalidInput();"},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":"        // Else if input is a recognised Keyword"},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"        else {"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"            result \u003d command.checkCommandType(keyWord, body, list);"},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"tototto"},"content":""},{"lineNumber":50,"author":{"gitId":"tototto"},"content":"        fileManager.saveFile(list.getList());"},{"lineNumber":51,"author":{"gitId":"tototto"},"content":""},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"        return result;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tototto"},"content":""},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"tototto"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"     * Replace this stub with your completed method."},{"lineNumber":58,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"    public String getResponse(String input) {"},{"lineNumber":60,"author":{"gitId":"tototto"},"content":"        return \"Duke: \" + input;"},{"lineNumber":61,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tototto":60,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":""},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":""},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"import duke.userInterface.MainWindow;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":""},{"lineNumber":12,"author":{"gitId":"tototto"},"content":""},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":""},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":""},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":33}},{"path":"src/main/java/duke/command/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import duke.exception.IncorrectInputException;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import duke.input.InputParser;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"import duke.output.DisplayHandler;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import duke.search.TaskFinder;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"import duke.storage.ListHandler;"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":""},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":" * Handles all commands that user will input"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":" * Commands are listed in the switch-case statement"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"public class CommandHandler {"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":""},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    private DisplayHandler displayHandler \u003d new DisplayHandler();"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"    private InputParser inputParser \u003d new InputParser();"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":""},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"     * Used to handles the different behaviors of the respective commands"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"     * @param KeyWord Command for duke"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"     * @param Body User task input"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"     * @param List contains the list of user Tasks"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"    public String checkCommandType(String KeyWord, String Body, ListHandler List) {"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":""},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"        keyword keyword \u003d duke.command.keyword.valueOf(KeyWord.toUpperCase());"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"        String output \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":""},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"            switch(keyword) {"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"            case TODO:"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"                String todoBody \u003d inputParser.extractTodoBody(Body);"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"                List.addToDo(todoBody);"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"                Task todoTaskAdded \u003d (Task) List.getList().lastElement();"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.showTaskAdded(List.getList().size(), todoTaskAdded);"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":""},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"            case DEADLINE:"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"                String deadlineBody \u003d inputParser.extractDeadlineBody(Body);"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"                String deadlineByDate \u003d inputParser.extractDeadlineByDay(Body);"},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"                String deadlineByTime \u003d inputParser.extractDeadlineByTime(Body);"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"                List.addDeadline(deadlineBody, deadlineByDate, deadlineByTime);"},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"                Task deadlineTaskAdded \u003d (Task) List.getList().lastElement();"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.showTaskAdded(List.getList().size(), deadlineTaskAdded);"},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":""},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"            case EVENT:"},{"lineNumber":49,"author":{"gitId":"tototto"},"content":"                String eventBody \u003d inputParser.extractEventBody(Body);"},{"lineNumber":50,"author":{"gitId":"tototto"},"content":"                String eventDay \u003d inputParser.extractEventAtDay(Body);;"},{"lineNumber":51,"author":{"gitId":"tototto"},"content":"                String eventTime \u003d inputParser.extractEventAtTime(Body);"},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"                List.addEvent(eventBody, eventDay, eventTime);"},{"lineNumber":53,"author":{"gitId":"tototto"},"content":"                Task EventTaskAdded \u003d (Task) List.getList().lastElement();"},{"lineNumber":54,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.showTaskAdded(List.getList().size(), EventTaskAdded);"},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"tototto"},"content":""},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"            case LIST:"},{"lineNumber":58,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.displayList(List.getList());"},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":60,"author":{"gitId":"tototto"},"content":""},{"lineNumber":61,"author":{"gitId":"tototto"},"content":"            case DONE:"},{"lineNumber":62,"author":{"gitId":"tototto"},"content":"                Task taskDone \u003d List.updateListItem(Body);"},{"lineNumber":63,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.displayChanges(taskDone);"},{"lineNumber":64,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"tototto"},"content":""},{"lineNumber":66,"author":{"gitId":"tototto"},"content":"            case DELETE:"},{"lineNumber":67,"author":{"gitId":"tototto"},"content":"                Task taskDeleted \u003d List.deleteListItem(Body);"},{"lineNumber":68,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.displayDeleteResult(List.getList().size(), taskDeleted);"},{"lineNumber":69,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":70,"author":{"gitId":"tototto"},"content":""},{"lineNumber":71,"author":{"gitId":"tototto"},"content":"            case FIND:"},{"lineNumber":72,"author":{"gitId":"tototto"},"content":"                output \u003d TaskFinder.findTask(Body, List.getList());"},{"lineNumber":73,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":74,"author":{"gitId":"tototto"},"content":""},{"lineNumber":75,"author":{"gitId":"tototto"},"content":"            case HELP:"},{"lineNumber":76,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.displayHelp();"},{"lineNumber":77,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"tototto"},"content":"            case BYE:"},{"lineNumber":79,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.programEnding();"},{"lineNumber":80,"author":{"gitId":"tototto"},"content":"                System.exit(0);"},{"lineNumber":81,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":82,"author":{"gitId":"tototto"},"content":""},{"lineNumber":83,"author":{"gitId":"tototto"},"content":"            default:"},{"lineNumber":84,"author":{"gitId":"tototto"},"content":"                break;"},{"lineNumber":85,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"tototto"},"content":""},{"lineNumber":87,"author":{"gitId":"tototto"},"content":"        } catch (Exception e) {"},{"lineNumber":88,"author":{"gitId":"tototto"},"content":"            if (e instanceof IncorrectInputException) {"},{"lineNumber":89,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.displayCustomException(e);"},{"lineNumber":90,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"tototto"},"content":"            else {"},{"lineNumber":92,"author":{"gitId":"tototto"},"content":"                output \u003d displayHandler.displayInvalidInput();"},{"lineNumber":93,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"tototto"},"content":""},{"lineNumber":96,"author":{"gitId":"tototto"},"content":"        return output;"},{"lineNumber":97,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":98}},{"path":"src/main/java/duke/command/keyword.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":" * Stores all KeyWords"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":" * Used by Duke to perform differing actions"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"public enum keyword {"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"        TODO,"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"        DEADLINE,"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"        EVENT,"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"        LIST,"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"        DONE,"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"        DELETE,"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"        FIND,"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"        BYE,"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"        HELP"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"}"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":""}],"authorContributionMap":{"tototto":18}},{"path":"src/main/java/duke/exception/IncorrectInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":" * Custom error message"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":" * Handles user input issues"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":" * Used when performing String manipulation"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"public class IncorrectInputException extends Exception {"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"    public IncorrectInputException(String message) {"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":12}},{"path":"src/main/java/duke/fileManager/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.fileManager;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import java.io.FileReader;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"import java.io.PrintWriter;"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"import java.util.Iterator;"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"import java.util.Vector;"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":""},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"import duke.output.DisplayHandler;"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"import duke.storage.ListHandler;"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":""},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"public class FileManager {"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":""},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    protected String fileName;"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    protected File dataFile;"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"    protected String filePath;"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":""},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"    public FileManager(String fileName) {"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":""},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"     * Read the file and load data into duke"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"     * @param list the list to be populated"},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"     * @return the result of the file loading"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"    public String readFile(ListHandler list) {"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"        // Check if file exists"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"        dataFile \u003d new File(fileName);"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":""},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"        // Read file format and load it in Duke"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(dataFile));"},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"            String eachLineOfFile;"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"            while ((eachLineOfFile \u003d br.readLine()) !\u003d null) {"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"                // Parse File Data \u0026 Insert to Duke"},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"                insertFileContent(list, eachLineOfFile);"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"tototto"},"content":""},{"lineNumber":45,"author":{"gitId":"tototto"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"            DisplayHandler.fileNotFound(e.getMessage());"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"        } catch (IOException e) {"},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"            DisplayHandler.cannotReadFile(e.getMessage());"},{"lineNumber":49,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"tototto"},"content":""},{"lineNumber":51,"author":{"gitId":"tototto"},"content":"        return \"Reading data from: \" + dataFile.getAbsolutePath(); // debug statement"},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tototto"},"content":""},{"lineNumber":54,"author":{"gitId":"tototto"},"content":"    private void insertFileContent(ListHandler list, String eachLineOfFile) {"},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"        String[] eachLineContent \u003d eachLineOfFile.split(\" \");"},{"lineNumber":56,"author":{"gitId":"tototto"},"content":""},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"        checkTaskType(list, eachLineContent);"},{"lineNumber":58,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"tototto"},"content":""},{"lineNumber":60,"author":{"gitId":"tototto"},"content":"    private void checkTaskType(ListHandler list, String[] eachLineContent) {"},{"lineNumber":61,"author":{"gitId":"tototto"},"content":"        String taskType \u003d eachLineContent[0];"},{"lineNumber":62,"author":{"gitId":"tototto"},"content":"        taskType \u003d taskType.trim();"},{"lineNumber":63,"author":{"gitId":"tototto"},"content":""},{"lineNumber":64,"author":{"gitId":"tototto"},"content":"        switch(taskType) {"},{"lineNumber":65,"author":{"gitId":"tototto"},"content":"        case \"[T]\":"},{"lineNumber":66,"author":{"gitId":"tototto"},"content":"            insertTodo(list, eachLineContent);"},{"lineNumber":67,"author":{"gitId":"tototto"},"content":"            break;"},{"lineNumber":68,"author":{"gitId":"tototto"},"content":""},{"lineNumber":69,"author":{"gitId":"tototto"},"content":"        case \"[D]\":"},{"lineNumber":70,"author":{"gitId":"tototto"},"content":"            insertDeadline(list, eachLineContent);"},{"lineNumber":71,"author":{"gitId":"tototto"},"content":"            break;"},{"lineNumber":72,"author":{"gitId":"tototto"},"content":""},{"lineNumber":73,"author":{"gitId":"tototto"},"content":"        case \"[E]\":"},{"lineNumber":74,"author":{"gitId":"tototto"},"content":"            insertEvent(list, eachLineContent);"},{"lineNumber":75,"author":{"gitId":"tototto"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"tototto"},"content":""},{"lineNumber":77,"author":{"gitId":"tototto"},"content":"        default:"},{"lineNumber":78,"author":{"gitId":"tototto"},"content":"            DisplayHandler.encounterWrongFormat();"},{"lineNumber":79,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"tototto"},"content":""},{"lineNumber":82,"author":{"gitId":"tototto"},"content":"    private void insertTodo(ListHandler list, String[] eachLineContent) {"},{"lineNumber":83,"author":{"gitId":"tototto"},"content":"        String doneStatus \u003d eachLineContent[1];"},{"lineNumber":84,"author":{"gitId":"tototto"},"content":"        int begin \u003d 2;"},{"lineNumber":85,"author":{"gitId":"tototto"},"content":"        int end \u003d eachLineContent.length - 1;"},{"lineNumber":86,"author":{"gitId":"tototto"},"content":"        String[] todoBody \u003d new String[ (end + 1) - begin];"},{"lineNumber":87,"author":{"gitId":"tototto"},"content":"        System.arraycopy(eachLineContent, begin, todoBody, 0, todoBody.length);"},{"lineNumber":88,"author":{"gitId":"tototto"},"content":"        list.addToDo(convertArrayToString(todoBody));"},{"lineNumber":89,"author":{"gitId":"tototto"},"content":""},{"lineNumber":90,"author":{"gitId":"tototto"},"content":"        if (doneStatus.equals(\"[✓]\")) {"},{"lineNumber":91,"author":{"gitId":"tototto"},"content":"            Vector List \u003d list.getList();"},{"lineNumber":92,"author":{"gitId":"tototto"},"content":"            Task justInserted \u003d (Task) List.lastElement();"},{"lineNumber":93,"author":{"gitId":"tototto"},"content":"            justInserted.markAsDone();"},{"lineNumber":94,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"tototto"},"content":""},{"lineNumber":97,"author":{"gitId":"tototto"},"content":"    private void insertDeadline(ListHandler list, String[] eachLineContent) {"},{"lineNumber":98,"author":{"gitId":"tototto"},"content":"        String doneStatus \u003d eachLineContent[1];"},{"lineNumber":99,"author":{"gitId":"tototto"},"content":"        int begin \u003d 2;"},{"lineNumber":100,"author":{"gitId":"tototto"},"content":"        int end \u003d eachLineContent.length - 4;"},{"lineNumber":101,"author":{"gitId":"tototto"},"content":"        String[] deadlineBody \u003d new String[ (end + 1) - begin];"},{"lineNumber":102,"author":{"gitId":"tototto"},"content":"        System.arraycopy(eachLineContent, begin, deadlineBody, 0, deadlineBody.length);"},{"lineNumber":103,"author":{"gitId":"tototto"},"content":"        String deadlineDate \u003d getDateContent(eachLineContent);"},{"lineNumber":104,"author":{"gitId":"tototto"},"content":"        String deadlineTime \u003d getTimeContent(eachLineContent);"},{"lineNumber":105,"author":{"gitId":"tototto"},"content":"        list.addDeadline(convertArrayToString(deadlineBody), deadlineDate, deadlineTime);"},{"lineNumber":106,"author":{"gitId":"tototto"},"content":""},{"lineNumber":107,"author":{"gitId":"tototto"},"content":"        if (doneStatus.equals(\"[✓]\")) {"},{"lineNumber":108,"author":{"gitId":"tototto"},"content":"            Vector List \u003d list.getList();"},{"lineNumber":109,"author":{"gitId":"tototto"},"content":"            Task justInserted \u003d (Task) List.lastElement();"},{"lineNumber":110,"author":{"gitId":"tototto"},"content":"            justInserted.markAsDone();"},{"lineNumber":111,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"tototto"},"content":""},{"lineNumber":114,"author":{"gitId":"tototto"},"content":"    private void insertEvent(ListHandler list, String[] eachLineContent) {"},{"lineNumber":115,"author":{"gitId":"tototto"},"content":"        String doneStatus \u003d eachLineContent[1];"},{"lineNumber":116,"author":{"gitId":"tototto"},"content":"        int begin \u003d 2;"},{"lineNumber":117,"author":{"gitId":"tototto"},"content":"        int end \u003d eachLineContent.length - 4;"},{"lineNumber":118,"author":{"gitId":"tototto"},"content":"        String[] eventBody \u003d new String[ (end + 1) - begin];"},{"lineNumber":119,"author":{"gitId":"tototto"},"content":"        System.arraycopy(eachLineContent, begin, eventBody, 0, eventBody.length);"},{"lineNumber":120,"author":{"gitId":"tototto"},"content":"        String eventDate \u003d getDateContent(eachLineContent);"},{"lineNumber":121,"author":{"gitId":"tototto"},"content":"        String eventTime \u003d getTimeContent(eachLineContent);"},{"lineNumber":122,"author":{"gitId":"tototto"},"content":"        list.addEvent(convertArrayToString(eventBody), eventDate, eventTime);"},{"lineNumber":123,"author":{"gitId":"tototto"},"content":""},{"lineNumber":124,"author":{"gitId":"tototto"},"content":"        if (doneStatus.equals(\"[✓]\")) {"},{"lineNumber":125,"author":{"gitId":"tototto"},"content":"            Vector List \u003d list.getList();"},{"lineNumber":126,"author":{"gitId":"tototto"},"content":"            Task justInserted \u003d (Task) List.lastElement();"},{"lineNumber":127,"author":{"gitId":"tototto"},"content":"            justInserted.markAsDone();"},{"lineNumber":128,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"tototto"},"content":""},{"lineNumber":131,"author":{"gitId":"tototto"},"content":"    private String getDateContent(String[] eachLineContent) {"},{"lineNumber":132,"author":{"gitId":"tototto"},"content":"        String date \u003d eachLineContent[eachLineContent.length - 2];"},{"lineNumber":133,"author":{"gitId":"tototto"},"content":"        return date;"},{"lineNumber":134,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"tototto"},"content":""},{"lineNumber":136,"author":{"gitId":"tototto"},"content":"    private String getTimeContent(String[] eachLineContent) {"},{"lineNumber":137,"author":{"gitId":"tototto"},"content":"        String time \u003d eachLineContent[eachLineContent.length - 1];"},{"lineNumber":138,"author":{"gitId":"tototto"},"content":"        time \u003d charRemoveAt(time, time.length() - 1);"},{"lineNumber":139,"author":{"gitId":"tototto"},"content":"        return time;"},{"lineNumber":140,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"tototto"},"content":""},{"lineNumber":142,"author":{"gitId":"tototto"},"content":"    public static String charRemoveAt(String str, int p) {"},{"lineNumber":143,"author":{"gitId":"tototto"},"content":"        return str.substring(0, p) + str.substring(p + 1);"},{"lineNumber":144,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"tototto"},"content":""},{"lineNumber":146,"author":{"gitId":"tototto"},"content":"    private String convertArrayToString(String[] array) {"},{"lineNumber":147,"author":{"gitId":"tototto"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":148,"author":{"gitId":"tototto"},"content":"        for (String value : array) {"},{"lineNumber":149,"author":{"gitId":"tototto"},"content":"            builder.append(\" \" + value);"},{"lineNumber":150,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"tototto"},"content":"        builder.append(\" \");"},{"lineNumber":152,"author":{"gitId":"tototto"},"content":"        return builder.toString();"},{"lineNumber":153,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"tototto"},"content":""},{"lineNumber":155,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"tototto"},"content":"     * Store all task in duke as a data file"},{"lineNumber":157,"author":{"gitId":"tototto"},"content":"     * @param ListStorage data to be stored in file"},{"lineNumber":158,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"tototto"},"content":"    public void saveFile(Vector ListStorage) {"},{"lineNumber":160,"author":{"gitId":"tototto"},"content":""},{"lineNumber":161,"author":{"gitId":"tototto"},"content":"        dataFile \u003d createFile();"},{"lineNumber":162,"author":{"gitId":"tototto"},"content":"        Iterator dukeTask \u003d ListStorage.iterator();"},{"lineNumber":163,"author":{"gitId":"tototto"},"content":"        clearFileContent();"},{"lineNumber":164,"author":{"gitId":"tototto"},"content":""},{"lineNumber":165,"author":{"gitId":"tototto"},"content":"        while (dukeTask.hasNext()) {"},{"lineNumber":166,"author":{"gitId":"tototto"},"content":"            try {"},{"lineNumber":167,"author":{"gitId":"tototto"},"content":"                Task toBeStored \u003d (Task) dukeTask.next(); // Read the Tasks from Duke"},{"lineNumber":168,"author":{"gitId":"tototto"},"content":"                writeToFile(toBeStored.toString()); // Write Tasks to File"},{"lineNumber":169,"author":{"gitId":"tototto"},"content":""},{"lineNumber":170,"author":{"gitId":"tototto"},"content":"            } catch (IOException e) {"},{"lineNumber":171,"author":{"gitId":"tototto"},"content":"                DisplayHandler.writeFileError(e.getMessage());"},{"lineNumber":172,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"tototto"},"content":""},{"lineNumber":176,"author":{"gitId":"tototto"},"content":"    private File createFile() {"},{"lineNumber":177,"author":{"gitId":"tototto"},"content":"        File createdFile \u003d new File(fileName);"},{"lineNumber":178,"author":{"gitId":"tototto"},"content":"        filePath \u003d createdFile.getAbsolutePath();"},{"lineNumber":179,"author":{"gitId":"tototto"},"content":"        DisplayHandler.createdFile(createdFile.getAbsolutePath()); // debug statement"},{"lineNumber":180,"author":{"gitId":"tototto"},"content":""},{"lineNumber":181,"author":{"gitId":"tototto"},"content":"        return createdFile;"},{"lineNumber":182,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"tototto"},"content":""},{"lineNumber":184,"author":{"gitId":"tototto"},"content":"    private void writeToFile(String textToAppend) throws IOException {"},{"lineNumber":185,"author":{"gitId":"tototto"},"content":"        FileWriter fw \u003d new FileWriter(fileName, true);"},{"lineNumber":186,"author":{"gitId":"tototto"},"content":"        fw.write(textToAppend + \"\\n\");"},{"lineNumber":187,"author":{"gitId":"tototto"},"content":"        fw.close();"},{"lineNumber":188,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"tototto"},"content":""},{"lineNumber":190,"author":{"gitId":"tototto"},"content":"    private void clearFileContent() {"},{"lineNumber":191,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":192,"author":{"gitId":"tototto"},"content":"            PrintWriter writer \u003d new PrintWriter(dataFile);"},{"lineNumber":193,"author":{"gitId":"tototto"},"content":"            writer.print(\"\");"},{"lineNumber":194,"author":{"gitId":"tototto"},"content":"            writer.close();"},{"lineNumber":195,"author":{"gitId":"tototto"},"content":""},{"lineNumber":196,"author":{"gitId":"tototto"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":197,"author":{"gitId":"tototto"},"content":"            DisplayHandler.clearFileFailure(e.getMessage());"},{"lineNumber":198,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":200}},{"path":"src/main/java/duke/input/InputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.input;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":""},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":" * Used to obtain user input from Input Stream"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"public class InputHandler {"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":""},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"    private static Scanner fromInputStream \u003d new Scanner(System.in);"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":""},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"     * Used to get user input"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"     * @return a line of user input e.g. todo Birthday Celebration"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    public String getUserInput() {"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"        String command \u003d fromInputStream.nextLine();"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"        return command;"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":20}},{"path":"src/main/java/duke/input/InputParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.input;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":"import duke.command.keyword;"},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import duke.exception.IncorrectInputException;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import duke.output.DisplayHandler;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":""},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":" * Handles and transform user input"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":" * Turns input into format accepted by DUKE"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"public class InputParser {"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":""},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"     * Determine if user entered a Task"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"     * @param input value to be checked"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"     * @return returns true if keyword, false otherwise"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"    public boolean checkIfKeyWord(String input) {"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":""},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"            keyword.valueOf(input.toUpperCase());"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"            return true;"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":""},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"            return false;"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":""},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"     * Get Task keyWord from user input line"},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"     * @param input value to be parsed"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"     * @return return keyword from @param input"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"    public String extractKeyWord(String input) {"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"        String[] Array \u003d input.split(\" \");"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"        return Array[0];"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":""},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"     * Get Task body from user\u0027s input"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"     * @param input full line of user input"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"     * @param keyword keyword of user"},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"     * @return return extracted body"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"    public String extractKeyWordBody(String input, String keyword) {"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"            return input.replaceFirst(keyword, \"\");"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":""},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"        } catch (ArrayIndexOutOfBoundsException e) { // May not be used anymore"},{"lineNumber":49,"author":{"gitId":"tototto"},"content":"            return null;"},{"lineNumber":50,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"tototto"},"content":""},{"lineNumber":53,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"tototto"},"content":"     * Extract body from Todo"},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"     * @param todoInput take input line from a todo"},{"lineNumber":56,"author":{"gitId":"tototto"},"content":"     * @return extracted body"},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"     * @throws IncorrectInputException for wrong input format"},{"lineNumber":58,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"    public String extractTodoBody(String todoInput) throws IncorrectInputException {"},{"lineNumber":60,"author":{"gitId":"tototto"},"content":"        if (todoInput.isEmpty()) {"},{"lineNumber":61,"author":{"gitId":"tototto"},"content":"            throw new IncorrectInputException(DisplayHandler.EMPTY_TODO);"},{"lineNumber":62,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"tototto"},"content":"        return todoInput;"},{"lineNumber":64,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tototto"},"content":""},{"lineNumber":66,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"tototto"},"content":"     * Get the body of the deadline from user input"},{"lineNumber":68,"author":{"gitId":"tototto"},"content":"     * @param deadlineInput the full user input for deadline"},{"lineNumber":69,"author":{"gitId":"tototto"},"content":"     * @return the deadline task"},{"lineNumber":70,"author":{"gitId":"tototto"},"content":"     * @throws IncorrectInputException if input does not follow duke format"},{"lineNumber":71,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"tototto"},"content":"    public String extractDeadlineBody(String deadlineInput) throws IncorrectInputException {"},{"lineNumber":73,"author":{"gitId":"tototto"},"content":"        String result \u003d \"\";"},{"lineNumber":74,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"tototto"},"content":"            int indx \u003d deadlineInput.indexOf(\"/by\");"},{"lineNumber":76,"author":{"gitId":"tototto"},"content":"            result \u003d deadlineInput.substring(0, indx);"},{"lineNumber":77,"author":{"gitId":"tototto"},"content":""},{"lineNumber":78,"author":{"gitId":"tototto"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"tototto"},"content":"            if (result.length() \u003c 1) {"},{"lineNumber":80,"author":{"gitId":"tototto"},"content":"                throw new IncorrectInputException(DisplayHandler.EMPTY_DEADLINE_DESC);"},{"lineNumber":81,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"tototto"},"content":"        return result;"},{"lineNumber":84,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"tototto"},"content":""},{"lineNumber":86,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"tototto"},"content":"     * Get deadline input \"day\" field"},{"lineNumber":88,"author":{"gitId":"tototto"},"content":"     * @param deadlineInput full user input for deadline"},{"lineNumber":89,"author":{"gitId":"tototto"},"content":"     * @return the day"},{"lineNumber":90,"author":{"gitId":"tototto"},"content":"     * @throws IncorrectInputException if input does not follow duke format"},{"lineNumber":91,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"tototto"},"content":"    public String extractDeadlineByDay(String deadlineInput) throws IncorrectInputException {"},{"lineNumber":93,"author":{"gitId":"tototto"},"content":"        String day \u003d \"\";"},{"lineNumber":94,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"tototto"},"content":"            int indx \u003d deadlineInput.indexOf(\"/by\");"},{"lineNumber":96,"author":{"gitId":"tototto"},"content":"            String by \u003d deadlineInput.substring(indx, deadlineInput.length());"},{"lineNumber":97,"author":{"gitId":"tototto"},"content":"            String[] array \u003d by.split(\" \");"},{"lineNumber":98,"author":{"gitId":"tototto"},"content":"            day \u003d array[1];"},{"lineNumber":99,"author":{"gitId":"tototto"},"content":"            return day;"},{"lineNumber":100,"author":{"gitId":"tototto"},"content":""},{"lineNumber":101,"author":{"gitId":"tototto"},"content":"        } catch (Exception e) {"},{"lineNumber":102,"author":{"gitId":"tototto"},"content":"            if (day.length() \u003c 1) {"},{"lineNumber":103,"author":{"gitId":"tototto"},"content":"                throw new IncorrectInputException(DisplayHandler.EMPTY_DEADLINE_DAY);"},{"lineNumber":104,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"tototto"},"content":""},{"lineNumber":107,"author":{"gitId":"tototto"},"content":"        return day;"},{"lineNumber":108,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tototto"},"content":""},{"lineNumber":110,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"tototto"},"content":"     * Get the deadline input time field"},{"lineNumber":112,"author":{"gitId":"tototto"},"content":"     * @param deadlineInput full user input for deadline"},{"lineNumber":113,"author":{"gitId":"tototto"},"content":"     * @return the time field"},{"lineNumber":114,"author":{"gitId":"tototto"},"content":"     * @throws IncorrectInputException if it does not follow duke format"},{"lineNumber":115,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"tototto"},"content":"    public String extractDeadlineByTime(String deadlineInput) throws IncorrectInputException {"},{"lineNumber":117,"author":{"gitId":"tototto"},"content":"        String time \u003d \"\";"},{"lineNumber":118,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"tototto"},"content":"            int indx \u003d deadlineInput.indexOf(\"/by\");"},{"lineNumber":120,"author":{"gitId":"tototto"},"content":"            String by \u003d deadlineInput.substring(indx);"},{"lineNumber":121,"author":{"gitId":"tototto"},"content":"            String[] array \u003d by.split(\" \");"},{"lineNumber":122,"author":{"gitId":"tototto"},"content":"            time \u003d array[2];"},{"lineNumber":123,"author":{"gitId":"tototto"},"content":""},{"lineNumber":124,"author":{"gitId":"tototto"},"content":"        } catch (Exception e) {"},{"lineNumber":125,"author":{"gitId":"tototto"},"content":"            if (time.length() \u003c 1) {"},{"lineNumber":126,"author":{"gitId":"tototto"},"content":"                throw new IncorrectInputException(DisplayHandler.EMPTY_DEADLINE_TIME);"},{"lineNumber":127,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"tototto"},"content":""},{"lineNumber":130,"author":{"gitId":"tototto"},"content":"        return time;"},{"lineNumber":131,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"tototto"},"content":""},{"lineNumber":133,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"tototto"},"content":"     * Get the body of the Event from user input"},{"lineNumber":135,"author":{"gitId":"tototto"},"content":"     * @param eventInput the full input of the event"},{"lineNumber":136,"author":{"gitId":"tototto"},"content":"     * @return the event body field"},{"lineNumber":137,"author":{"gitId":"tototto"},"content":"     * @throws IncorrectInputException if it does not follow duke format"},{"lineNumber":138,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"tototto"},"content":"    public String extractEventBody(String eventInput) throws IncorrectInputException {"},{"lineNumber":140,"author":{"gitId":"tototto"},"content":"        String result \u003d \"\";"},{"lineNumber":141,"author":{"gitId":"tototto"},"content":""},{"lineNumber":142,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":143,"author":{"gitId":"tototto"},"content":"            int indx \u003d eventInput.indexOf(\"/at\");"},{"lineNumber":144,"author":{"gitId":"tototto"},"content":"            result \u003d eventInput.substring(0, indx);"},{"lineNumber":145,"author":{"gitId":"tototto"},"content":""},{"lineNumber":146,"author":{"gitId":"tototto"},"content":"        } catch (Exception e) {"},{"lineNumber":147,"author":{"gitId":"tototto"},"content":"            if (result.length() \u003c 1) {"},{"lineNumber":148,"author":{"gitId":"tototto"},"content":"                throw new IncorrectInputException(DisplayHandler.EMPTY_EVENT_DESC);"},{"lineNumber":149,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"tototto"},"content":""},{"lineNumber":152,"author":{"gitId":"tototto"},"content":"        return result;"},{"lineNumber":153,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"tototto"},"content":"     * Get the day of the Event from user input"},{"lineNumber":156,"author":{"gitId":"tototto"},"content":"     * @param eventInput the full input of the event"},{"lineNumber":157,"author":{"gitId":"tototto"},"content":"     * @return the event day field"},{"lineNumber":158,"author":{"gitId":"tototto"},"content":"     * @throws IncorrectInputException if it does not follow duke format"},{"lineNumber":159,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"tototto"},"content":"    public String extractEventAtDay(String eventInput) throws IncorrectInputException {"},{"lineNumber":161,"author":{"gitId":"tototto"},"content":"        String day \u003d \"\";"},{"lineNumber":162,"author":{"gitId":"tototto"},"content":""},{"lineNumber":163,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":164,"author":{"gitId":"tototto"},"content":"            int indx \u003d eventInput.indexOf(\"/at\");"},{"lineNumber":165,"author":{"gitId":"tototto"},"content":"            String by \u003d eventInput.substring(indx, eventInput.length());"},{"lineNumber":166,"author":{"gitId":"tototto"},"content":"            String[] array \u003d by.split(\" \");"},{"lineNumber":167,"author":{"gitId":"tototto"},"content":"            day \u003d array[1];"},{"lineNumber":168,"author":{"gitId":"tototto"},"content":""},{"lineNumber":169,"author":{"gitId":"tototto"},"content":"        } catch (Exception e) {"},{"lineNumber":170,"author":{"gitId":"tototto"},"content":"            if (day.length() \u003c 1) {"},{"lineNumber":171,"author":{"gitId":"tototto"},"content":"                throw new IncorrectInputException(DisplayHandler.EMPTY_EVENT_DAY);"},{"lineNumber":172,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"tototto"},"content":"        return day;"},{"lineNumber":175,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"tototto"},"content":""},{"lineNumber":177,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"tototto"},"content":"     * Get the time of the Event from user input"},{"lineNumber":179,"author":{"gitId":"tototto"},"content":"     * @param eventInput the full input of the event"},{"lineNumber":180,"author":{"gitId":"tototto"},"content":"     * @return the event time field"},{"lineNumber":181,"author":{"gitId":"tototto"},"content":"     * @throws IncorrectInputException if it does not follow duke format"},{"lineNumber":182,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"tototto"},"content":"    public String extractEventAtTime(String eventInput) throws IncorrectInputException {"},{"lineNumber":184,"author":{"gitId":"tototto"},"content":"        String time \u003d \"\";"},{"lineNumber":185,"author":{"gitId":"tototto"},"content":""},{"lineNumber":186,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":187,"author":{"gitId":"tototto"},"content":"            int indx \u003d eventInput.indexOf(\"/at\");"},{"lineNumber":188,"author":{"gitId":"tototto"},"content":"            String by \u003d eventInput.substring(indx);"},{"lineNumber":189,"author":{"gitId":"tototto"},"content":"            String[] array \u003d by.split(\" \");"},{"lineNumber":190,"author":{"gitId":"tototto"},"content":"            time \u003d array[2];"},{"lineNumber":191,"author":{"gitId":"tototto"},"content":""},{"lineNumber":192,"author":{"gitId":"tototto"},"content":"        } catch (Exception e) {"},{"lineNumber":193,"author":{"gitId":"tototto"},"content":"            if (time.length() \u003c 1) {"},{"lineNumber":194,"author":{"gitId":"tototto"},"content":"                throw new IncorrectInputException(DisplayHandler.EMPTY_EVENT_TIME);"},{"lineNumber":195,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"tototto"},"content":""},{"lineNumber":198,"author":{"gitId":"tototto"},"content":"        return time;"},{"lineNumber":199,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":200}},{"path":"src/main/java/duke/output/DisplayHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.output;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import java.util.Iterator;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import java.util.Vector;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":""},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":""},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"public class DisplayHandler {"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":""},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"    public static final String EMPTY_TODO \u003d \" OOPS!!! The description of a todo cannot be empty\";"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"    public static final String EMPTY_DEADLINE_DESC \u003d \" OOPS!!! The description of a duke Deadline \""},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"                                                        + \"cannot be empty \u0026 must be accompanied by Date and Time\";"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"    public static final String EMPTY_DEADLINE_DAY \u003d \" OOPS!!! The description of duke\u0027s Deadline Day cannot be empty\";"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"    public static final String EMPTY_DEADLINE_TIME \u003d \" OOPS!!! The description of duke\u0027s Deadline Time cannot be empty\";"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"    public static final String EMPTY_EVENT_DESC \u003d \" OOPS!!! The description of a duke Event \""},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"                                                    + \"cannot be empty \u0026 must be accompanied by Date and Time Range\";"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"    public static final String EMPTY_EVENT_DAY \u003d \" OOPS!!! The description of a duke\u0027s Event Day cannot be empty\";"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"    public static final String EMPTY_EVENT_TIME \u003d \" OOPS!!! The description of a duke\u0027s Event Time cannot be empty\";"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    public static final String FILE_NOT_EXISTS \u003d \"File does not exists yet : \";"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    public static final String FILE_CANNOT_BE_READ \u003d \"File cannot be read : \";"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"    public static final String UNRECOGNISED_TEXT_FORMAT \u003d \"There is a unrecognised text format in DUKE data file\";"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"    public static final String WRITE_FILE_ERROR \u003d \"Error writing to file: \";"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"    public static final String CREATED_FILE_SUCCESS \u003d \"Created/Updated data file at: \";"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"    public static final String CLEAR_FILE_ERROR \u003d \"Unable to clear file content: \";"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"    public static final String WRONG_COMMAND \u003d \"OOPS!!! No such command exists\";"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":""},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"    private final String logoIcon \u003d \" ____        _        \\n\""},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"                                    + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"                                    + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"                                    + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"                                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":""},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"    private final String greetingMsg \u003d \" Hello! I\u0027m duke.Duke\\n What can I do for you?\";"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"    private final String successMsg \u003d \" Got it. I\u0027ve added this task: \";"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"    private final String listMsg \u003d \" Here are the tasks in your list:\";"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"    private final String doneMsg \u003d \" Nice! I\u0027ve marked this task as done: \";"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"    private final String invalidInputMsg \u003d \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"    private final String deleteTask \u003d \" Noted. I\u0027ve removed this task:\";"},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"    private final String goodbyeMsg \u003d \" Bye. Hope to see you again soon!\";"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"    private final String lineDivider \u003d \"----------------------------------------\";"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":""},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"    public static void clearFileFailure(String errorMsg) {"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"        System.out.println(CLEAR_FILE_ERROR + errorMsg);"},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":""},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"    public static void createdFile(String fileAbsolutePath) {"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"        System.out.println(CREATED_FILE_SUCCESS + fileAbsolutePath);"},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tototto"},"content":""},{"lineNumber":50,"author":{"gitId":"tototto"},"content":"    public static void writeFileError(String errorMsg) {"},{"lineNumber":51,"author":{"gitId":"tototto"},"content":"        System.out.println(WRITE_FILE_ERROR + errorMsg);"},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tototto"},"content":""},{"lineNumber":54,"author":{"gitId":"tototto"},"content":"    public static void encounterWrongFormat() {"},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"        System.out.println(UNRECOGNISED_TEXT_FORMAT);"},{"lineNumber":56,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"tototto"},"content":""},{"lineNumber":58,"author":{"gitId":"tototto"},"content":"    public static void cannotReadFile(String errorMsg) {"},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"        System.out.println(FILE_CANNOT_BE_READ + errorMsg);"},{"lineNumber":60,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tototto"},"content":""},{"lineNumber":62,"author":{"gitId":"tototto"},"content":"    public static void fileNotFound(String errorMsg) {"},{"lineNumber":63,"author":{"gitId":"tototto"},"content":"        System.out.println(FILE_NOT_EXISTS + errorMsg);"},{"lineNumber":64,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tototto"},"content":""},{"lineNumber":66,"author":{"gitId":"tototto"},"content":"    private void greeter() {"},{"lineNumber":67,"author":{"gitId":"tototto"},"content":"        System.out.println(greetingMsg);"},{"lineNumber":68,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"tototto"},"content":""},{"lineNumber":70,"author":{"gitId":"tototto"},"content":"    private String goodbye() {"},{"lineNumber":71,"author":{"gitId":"tototto"},"content":"        return goodbyeMsg;"},{"lineNumber":72,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"tototto"},"content":""},{"lineNumber":74,"author":{"gitId":"tototto"},"content":"    private String divider() {"},{"lineNumber":75,"author":{"gitId":"tototto"},"content":"        return (lineDivider);"},{"lineNumber":76,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"tototto"},"content":""},{"lineNumber":78,"author":{"gitId":"tototto"},"content":"    private void logo() {"},{"lineNumber":79,"author":{"gitId":"tototto"},"content":"        System.out.println(logoIcon);"},{"lineNumber":80,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"tototto"},"content":""},{"lineNumber":82,"author":{"gitId":"tototto"},"content":"    private void success() {"},{"lineNumber":83,"author":{"gitId":"tototto"},"content":"        System.out.println(successMsg);"},{"lineNumber":84,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"tototto"},"content":""},{"lineNumber":86,"author":{"gitId":"tototto"},"content":"    private String invalidInput() {"},{"lineNumber":87,"author":{"gitId":"tototto"},"content":"        return invalidInputMsg;"},{"lineNumber":88,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"tototto"},"content":""},{"lineNumber":90,"author":{"gitId":"tototto"},"content":"    private String showListMsg() {"},{"lineNumber":91,"author":{"gitId":"tototto"},"content":"        return listMsg;"},{"lineNumber":92,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"tototto"},"content":""},{"lineNumber":94,"author":{"gitId":"tototto"},"content":"    public String displayNumAddedTask(int listNum) {"},{"lineNumber":95,"author":{"gitId":"tototto"},"content":"        return \"Now you have \" + listNum + \" task in the list\";"},{"lineNumber":96,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"tototto"},"content":""},{"lineNumber":98,"author":{"gitId":"tototto"},"content":"    public String done() {"},{"lineNumber":99,"author":{"gitId":"tototto"},"content":"        return doneMsg;"},{"lineNumber":100,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"tototto"},"content":""},{"lineNumber":102,"author":{"gitId":"tototto"},"content":"    public String printDeleteMsg() {"},{"lineNumber":103,"author":{"gitId":"tototto"},"content":"        return deleteTask;"},{"lineNumber":104,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"tototto"},"content":""},{"lineNumber":106,"author":{"gitId":"tototto"},"content":"    public String displayIndividualTask(Task task) {"},{"lineNumber":107,"author":{"gitId":"tototto"},"content":"        return \"   \" + task;"},{"lineNumber":108,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tototto"},"content":""},{"lineNumber":110,"author":{"gitId":"tototto"},"content":"    private String listResult(Vector result) {"},{"lineNumber":111,"author":{"gitId":"tototto"},"content":""},{"lineNumber":112,"author":{"gitId":"tototto"},"content":"        String output \u003d \"\";"},{"lineNumber":113,"author":{"gitId":"tototto"},"content":"        output \u003d output + showListMsg() + \u0027\\n\u0027;"},{"lineNumber":114,"author":{"gitId":"tototto"},"content":"        Iterator iter \u003d result.iterator();"},{"lineNumber":115,"author":{"gitId":"tototto"},"content":""},{"lineNumber":116,"author":{"gitId":"tototto"},"content":"        for (int i \u003d 0; iter.hasNext(); i++) {"},{"lineNumber":117,"author":{"gitId":"tototto"},"content":"            int currIndex \u003d i + 1;"},{"lineNumber":118,"author":{"gitId":"tototto"},"content":"            Task element \u003d (Task) iter.next();"},{"lineNumber":119,"author":{"gitId":"tototto"},"content":"            output \u003d output + \" \" + currIndex + \".\" + element + \u0027\\n\u0027;"},{"lineNumber":120,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"tototto"},"content":""},{"lineNumber":122,"author":{"gitId":"tototto"},"content":"        return output;"},{"lineNumber":123,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"tototto"},"content":""},{"lineNumber":125,"author":{"gitId":"tototto"},"content":"    public String displayInvalidInput() {"},{"lineNumber":126,"author":{"gitId":"tototto"},"content":"        return invalidInputMsg;"},{"lineNumber":127,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"tototto"},"content":""},{"lineNumber":129,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"tototto"},"content":"     * Output the new state of the task that was updated"},{"lineNumber":131,"author":{"gitId":"tototto"},"content":"     * @param task to be updated"},{"lineNumber":132,"author":{"gitId":"tototto"},"content":"     * @return result of the update"},{"lineNumber":133,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"tototto"},"content":"    public String displayChanges(Task task) {"},{"lineNumber":135,"author":{"gitId":"tototto"},"content":""},{"lineNumber":136,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":137,"author":{"gitId":"tototto"},"content":"            task.getStatusIcon(); // check if exception will be thrown, this line has no functional usage"},{"lineNumber":138,"author":{"gitId":"tototto"},"content":"            return lineDivider + \u0027\\n\u0027 + done() + task + \u0027\\n\u0027 + lineDivider;"},{"lineNumber":139,"author":{"gitId":"tototto"},"content":""},{"lineNumber":140,"author":{"gitId":"tototto"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":141,"author":{"gitId":"tototto"},"content":"            return invalidInput();"},{"lineNumber":142,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"tototto"},"content":""},{"lineNumber":144,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"tototto"},"content":""},{"lineNumber":146,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"tototto"},"content":"     * Output the result of the deletion"},{"lineNumber":148,"author":{"gitId":"tototto"},"content":"     * @param ListNum ID of the deletion"},{"lineNumber":149,"author":{"gitId":"tototto"},"content":"     * @param task the task to be deleted"},{"lineNumber":150,"author":{"gitId":"tototto"},"content":"     * @return result of the deletion"},{"lineNumber":151,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"tototto"},"content":"    public String displayDeleteResult(int ListNum, Task task) {"},{"lineNumber":153,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":154,"author":{"gitId":"tototto"},"content":"            task.getStatusIcon(); // check if exception will be thrown, this line has no functional usage"},{"lineNumber":155,"author":{"gitId":"tototto"},"content":"            return lineDivider + \u0027\\n\u0027"},{"lineNumber":156,"author":{"gitId":"tototto"},"content":"                    + printDeleteMsg()"},{"lineNumber":157,"author":{"gitId":"tototto"},"content":"                    + task + \u0027\\n\u0027"},{"lineNumber":158,"author":{"gitId":"tototto"},"content":"                    + displayNumAddedTask(ListNum)"},{"lineNumber":159,"author":{"gitId":"tototto"},"content":"                    + \u0027\\n\u0027 + lineDivider;"},{"lineNumber":160,"author":{"gitId":"tototto"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":161,"author":{"gitId":"tototto"},"content":"            return invalidInput();"},{"lineNumber":162,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"tototto"},"content":""},{"lineNumber":165,"author":{"gitId":"tototto"},"content":"    public String displayList(Vector result) {"},{"lineNumber":166,"author":{"gitId":"tototto"},"content":"        return \u0027\\n\u0027 + lineDivider + \u0027\\n\u0027 + listResult(result) + \u0027\\n\u0027 + lineDivider;"},{"lineNumber":167,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"tototto"},"content":""},{"lineNumber":169,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"tototto"},"content":"     * Display the task that was added to duke"},{"lineNumber":171,"author":{"gitId":"tototto"},"content":"     * @param ListNum ID of new task"},{"lineNumber":172,"author":{"gitId":"tototto"},"content":"     * @param task task data"},{"lineNumber":173,"author":{"gitId":"tototto"},"content":"     * @return the result of the added task"},{"lineNumber":174,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"tototto"},"content":"    public String showTaskAdded(int ListNum, Task task) {"},{"lineNumber":176,"author":{"gitId":"tototto"},"content":"        return \u0027\\n\u0027"},{"lineNumber":177,"author":{"gitId":"tototto"},"content":"                + lineDivider"},{"lineNumber":178,"author":{"gitId":"tototto"},"content":"                + \u0027\\n\u0027"},{"lineNumber":179,"author":{"gitId":"tototto"},"content":"                + successMsg"},{"lineNumber":180,"author":{"gitId":"tototto"},"content":"                + displayIndividualTask(task)"},{"lineNumber":181,"author":{"gitId":"tototto"},"content":"                + \u0027\\n\u0027"},{"lineNumber":182,"author":{"gitId":"tototto"},"content":"                + displayNumAddedTask(ListNum)"},{"lineNumber":183,"author":{"gitId":"tototto"},"content":"                + \u0027\\n\u0027 + lineDivider;"},{"lineNumber":184,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"tototto"},"content":""},{"lineNumber":186,"author":{"gitId":"tototto"},"content":"    public String programOpening() {"},{"lineNumber":187,"author":{"gitId":"tototto"},"content":"        return \u0027\\n\u0027 + lineDivider + \u0027\\n\u0027 + logoIcon + \u0027\\n\u0027 + greetingMsg + \u0027\\n\u0027 + lineDivider;"},{"lineNumber":188,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"tototto"},"content":""},{"lineNumber":190,"author":{"gitId":"tototto"},"content":"    public String programEnding() {"},{"lineNumber":191,"author":{"gitId":"tototto"},"content":"        return \u0027\\n\u0027 + lineDivider + \u0027\\n\u0027 + goodbye() + \u0027\\n\u0027 + lineDivider;"},{"lineNumber":192,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"tototto"},"content":""},{"lineNumber":194,"author":{"gitId":"tototto"},"content":"    public String displayCustomException(Exception e) {"},{"lineNumber":195,"author":{"gitId":"tototto"},"content":"        return e.getMessage();"},{"lineNumber":196,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"tototto"},"content":""},{"lineNumber":198,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"tototto"},"content":"     * Display Help guide to user"},{"lineNumber":200,"author":{"gitId":"tototto"},"content":"     * @return list of command usage details"},{"lineNumber":201,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"tototto"},"content":"    public String displayHelp() {"},{"lineNumber":203,"author":{"gitId":"tototto"},"content":"        return \"TODO : todo \u003ctask desc\u003e \""},{"lineNumber":204,"author":{"gitId":"tototto"},"content":"                + \" \\n DEADLINE: deadline \u003ctask desc\u003e /by \u003cdate\u003e \u003ctime\u003e \""},{"lineNumber":205,"author":{"gitId":"tototto"},"content":"                + \" \\n EVENT: event \u003cevent desc\u003e /at \u003cdate\u003e \u003ctime period\u003e\""},{"lineNumber":206,"author":{"gitId":"tototto"},"content":"                + \" \\n LIST: list\""},{"lineNumber":207,"author":{"gitId":"tototto"},"content":"                + \" \\n DONE: done \u003ctask id\u003e\""},{"lineNumber":208,"author":{"gitId":"tototto"},"content":"                + \" \\n DELETE: delete \u003cid\u003e\""},{"lineNumber":209,"author":{"gitId":"tototto"},"content":"                + \" \\n FIND: find \u003cSearch String\u003e\""},{"lineNumber":210,"author":{"gitId":"tototto"},"content":"                + \" \\n BYE: bye\";"},{"lineNumber":211,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":212}},{"path":"src/main/java/duke/search/TaskFinder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.search;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import java.util.Iterator;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import java.util.Vector;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":""},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":""},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"public class TaskFinder {"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"     * Find task in Duke list"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"     * @param searchTerm string to search for"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"     * @param taskList the task List to be searched"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"     * @return the task found"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"    @SuppressWarnings(\"checkstyle:Regexp\")"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    public static String findTask(String searchTerm , Vector taskList) {"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"        Iterator taskIter \u003d taskList.iterator();"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"        String output;"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":""},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"        output \u003d \"----------------------------------------\" + \u0027\\n\u0027;"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"        output \u003d output + \"Here are the matching tasks in your list:\" + \u0027\\n\u0027;"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":""},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"        for (int i \u003d 0; taskIter.hasNext(); i++) {"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"            Task currTask \u003d (Task) taskIter.next();"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"            String currTaskDesc \u003d currTask.getTaskDescription();"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":""},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"            if (currTaskDesc.contains(searchTerm)) {"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"                //System.out.println(i+1 + \".\" + currTask);"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"                int indx \u003d i + 1;"},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"                output \u003d output + indx + \".\" + currTask + \u0027\\n\u0027;"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":""},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"        output \u003d output + \"----------------------------------------\" + \u0027\\n\u0027;"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":""},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"        return output;"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":38}},{"path":"src/main/java/duke/storage/ListHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import java.util.Vector;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":""},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":""},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"public class ListHandler {"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":""},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"    private Vector ListStorage \u003d new Vector();"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":""},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"    public void addToDo(String body) {"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"        ListStorage.add(new Todo(body));"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":""},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"    public void addDeadline(String body, String by, String time) {"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"        ListStorage.add(new Deadline(body, by, time));"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":""},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"    public void addEvent(String body, String at, String timePeriod) {"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"        ListStorage.add(new Event(body, at, timePeriod));"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":""},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"    public Vector getList() {"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"        return ListStorage;"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":""},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"     * Update the task in list by index"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"     * @param index the identifier for the task"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"     * @return return updated task if sucessful NULL otherwise"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"    public Task updateListItem(String index) {"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"            int idx \u003d Integer.parseInt(index.trim());"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"            Task task \u003d (Task) ListStorage.get(idx - 1);"},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"            task.markAsDone();"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"            return task;"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"            // Do nothing"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"            // Do nothing"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"tototto"},"content":""},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"        return null;"},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tototto"},"content":""},{"lineNumber":50,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"tototto"},"content":"     * Delete a task based on index from task list"},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"     * @param index the identifier for the task"},{"lineNumber":53,"author":{"gitId":"tototto"},"content":"     * @return"},{"lineNumber":54,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"    public Task deleteListItem(String index) {"},{"lineNumber":56,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"            int idx \u003d Integer.parseInt(index.trim());"},{"lineNumber":58,"author":{"gitId":"tototto"},"content":"            Task task \u003d (Task) ListStorage.remove(idx - 1);"},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"            return task;"},{"lineNumber":60,"author":{"gitId":"tototto"},"content":""},{"lineNumber":61,"author":{"gitId":"tototto"},"content":"        } catch (Exception e) {"},{"lineNumber":62,"author":{"gitId":"tototto"},"content":"            // Do nothing"},{"lineNumber":63,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"tototto"},"content":""},{"lineNumber":65,"author":{"gitId":"tototto"},"content":"        return null;"},{"lineNumber":66,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":67}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"    protected String time;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":""},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"     * constructor for the deadline"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"     * @param description describe the deadline task"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"     * @param by when it must be completed"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"     * @param time time it must be completed"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"    public Deadline(String description, String by, String time) {"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"        this.by \u003d by;"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"        this.time \u003d time;"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":""},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"        return \"[D] \" + super.toString() + \"(by: \" + by + \" \" + time + \")\";"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":23}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"    protected String timePeriod;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"     * Constructor for the Event task"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"     * @param description describe the event task"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"     * @param at which date the event takes place"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"     * @param timePeriod the start till end time of the event"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"    public Event(String description, String at, String timePeriod) {"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"        this.at \u003d at;"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"        this.timePeriod \u003d timePeriod;"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"        return \"[E] \" + super.toString() + \"(at: \" + at + \" \" + timePeriod + \")\";"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"}"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":""}],"authorContributionMap":{"tototto":22}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":""},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"     * Constructor for the Task"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"     * @param description describe the task to be done"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"    public Task(String description) {"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"        this.description \u003d description;"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":""},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    public String getStatusIcon() {"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":""},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    public String getTaskDescription() {"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"        return description;"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":""},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"    public void markAsDone() {"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"        isDone \u003d !isDone;"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":""},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"        return \"[\" + getStatusIcon() + \"]\" + \"\" + getTaskDescription();"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":32}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":""},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"    public Todo(String description) {"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":""},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"        return \"[T] \" + super.toString();"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":13}},{"path":"src/main/java/duke/userInterface/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.userInterface;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":""},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":""},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"tototto"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":""},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":""},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":""},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"tototto"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tototto"},"content":""},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"tototto"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"tototto"},"content":""},{"lineNumber":56,"author":{"gitId":"tototto"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"tototto"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":61}},{"path":"src/main/java/duke/userInterface/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package duke.userInterface;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"tototto"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":""},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":""},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":""},{"lineNumber":29,"author":{"gitId":"tototto"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":""},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"        startDuke();"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":""},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"    private void startDuke() {"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"        displayDukeResponse(duke.displayProgramOpening());"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"        displayDukeResponse(duke.readDataFile());"},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":""},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"tototto"},"content":"    private void handleUserInput() {"},{"lineNumber":50,"author":{"gitId":"tototto"},"content":""},{"lineNumber":51,"author":{"gitId":"tototto"},"content":"        // Get and display user input"},{"lineNumber":52,"author":{"gitId":"tototto"},"content":"        String input \u003d getInput();"},{"lineNumber":53,"author":{"gitId":"tototto"},"content":"        displayUserInput(input);"},{"lineNumber":54,"author":{"gitId":"tototto"},"content":""},{"lineNumber":55,"author":{"gitId":"tototto"},"content":"        String dukeResponse \u003d duke.runLogic(input);"},{"lineNumber":56,"author":{"gitId":"tototto"},"content":"        //System.out.println(dukeResponse);"},{"lineNumber":57,"author":{"gitId":"tototto"},"content":"        displayDukeResponse(dukeResponse);"},{"lineNumber":58,"author":{"gitId":"tototto"},"content":""},{"lineNumber":59,"author":{"gitId":"tototto"},"content":"        userInput.clear();"},{"lineNumber":60,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tototto"},"content":""},{"lineNumber":62,"author":{"gitId":"tototto"},"content":"    private String getInput() {"},{"lineNumber":63,"author":{"gitId":"tototto"},"content":"        return userInput.getText();"},{"lineNumber":64,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tototto"},"content":""},{"lineNumber":66,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"tototto"},"content":"     * Creates dialog boxes containing Duke\u0027s reply and then appends them to"},{"lineNumber":68,"author":{"gitId":"tototto"},"content":"     * the dialog container."},{"lineNumber":69,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"tototto"},"content":"    private void displayDukeResponse(String response) {"},{"lineNumber":71,"author":{"gitId":"tototto"},"content":"        String dukeText \u003d duke.getResponse(response);"},{"lineNumber":72,"author":{"gitId":"tototto"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":73,"author":{"gitId":"tototto"},"content":"                DialogBox.getDukeDialog(dukeText, dukeImage)"},{"lineNumber":74,"author":{"gitId":"tototto"},"content":"        );"},{"lineNumber":75,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"tototto"},"content":""},{"lineNumber":77,"author":{"gitId":"tototto"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"tototto"},"content":"     * Creates dialog boxes containing User\u0027s Input and then appends them to"},{"lineNumber":79,"author":{"gitId":"tototto"},"content":"     * the dialog container."},{"lineNumber":80,"author":{"gitId":"tototto"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"tototto"},"content":"    private void displayUserInput(String input) {"},{"lineNumber":82,"author":{"gitId":"tototto"},"content":"        String userText \u003d input;"},{"lineNumber":83,"author":{"gitId":"tototto"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":84,"author":{"gitId":"tototto"},"content":"                DialogBox.getUserDialog(userText, userImage)"},{"lineNumber":85,"author":{"gitId":"tototto"},"content":"        );"},{"lineNumber":86,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":87}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":""},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" /\u003e"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"tototto":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"tototto"},"content":""},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.userInterface.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"tototto":19}},{"path":"src/test/java/inputParser/InputParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package inputParser;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":""},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":""},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":""},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import duke.exception.IncorrectInputException;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":"import duke.input.InputParser;"},{"lineNumber":10,"author":{"gitId":"tototto"},"content":""},{"lineNumber":11,"author":{"gitId":"tototto"},"content":"public class InputParserTest {"},{"lineNumber":12,"author":{"gitId":"tototto"},"content":""},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"    public void testKeywordChecker() {"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"        String keywordStub \u003d \"Hello There\";"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":""},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"        InputParser inputParser \u003d new InputParser();"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"        boolean result \u003d inputParser.checkIfKeyWord(keywordStub);"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":""},{"lineNumber":20,"author":{"gitId":"tototto"},"content":"        assertEquals(result, false);"},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":""},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"    public void testKeywordExtraction() {"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":"        String inputStub \u003d \"todo Buy groceries from NTUC\";"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":""},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"        InputParser inputParser \u003d new InputParser();"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"        String result \u003d inputParser.extractKeyWord(inputStub);"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":""},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"        assertEquals(result, \"todo\");"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":""},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":"    public void testDeadlineBodyExtraction() {"},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"        String inputStub \u003d \"Read book /by 20/12/20 6pm\";"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":""},{"lineNumber":37,"author":{"gitId":"tototto"},"content":"        InputParser inputParser \u003d new InputParser();"},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"        String result \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"tototto"},"content":""},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"            result \u003d inputParser.extractDeadlineBody(inputStub);"},{"lineNumber":42,"author":{"gitId":"tototto"},"content":"        } catch (IncorrectInputException e) {"},{"lineNumber":43,"author":{"gitId":"tototto"},"content":"            fail();"},{"lineNumber":44,"author":{"gitId":"tototto"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"tototto"},"content":""},{"lineNumber":46,"author":{"gitId":"tototto"},"content":"        assertEquals(result, \"Read book \");"},{"lineNumber":47,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":48}},{"path":"src/test/java/listHandler/ListHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"package listHandler;"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":3,"author":{"gitId":"tototto"},"content":""},{"lineNumber":4,"author":{"gitId":"tototto"},"content":"import java.util.Vector;"},{"lineNumber":5,"author":{"gitId":"tototto"},"content":""},{"lineNumber":6,"author":{"gitId":"tototto"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"tototto"},"content":""},{"lineNumber":8,"author":{"gitId":"tototto"},"content":"import duke.storage.ListHandler;"},{"lineNumber":9,"author":{"gitId":"tototto"},"content":""},{"lineNumber":10,"author":{"gitId":"tototto"},"content":"public class ListHandlerTest {"},{"lineNumber":11,"author":{"gitId":"tototto"},"content":""},{"lineNumber":12,"author":{"gitId":"tototto"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"tototto"},"content":"    public void testAddTodo() {"},{"lineNumber":14,"author":{"gitId":"tototto"},"content":"        ListHandler listHandler \u003d new ListHandler();"},{"lineNumber":15,"author":{"gitId":"tototto"},"content":"        listHandler.addToDo(\"Read Book\");"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":""},{"lineNumber":17,"author":{"gitId":"tototto"},"content":"        Vector result \u003d listHandler.getList();"},{"lineNumber":18,"author":{"gitId":"tototto"},"content":"        assertEquals(result.size(), 1);"},{"lineNumber":19,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"tototto"},"content":""},{"lineNumber":21,"author":{"gitId":"tototto"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"tototto"},"content":"    public void testAddDeadline() {"},{"lineNumber":23,"author":{"gitId":"tototto"},"content":"        ListHandler listHandler \u003d new ListHandler();"},{"lineNumber":24,"author":{"gitId":"tototto"},"content":"        listHandler.addDeadline(\"Read book\", \"21/12/20\", \"1800\");"},{"lineNumber":25,"author":{"gitId":"tototto"},"content":""},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"        Vector result \u003d listHandler.getList();"},{"lineNumber":27,"author":{"gitId":"tototto"},"content":"        assertEquals(result.size(), 1);"},{"lineNumber":28,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tototto"},"content":""},{"lineNumber":30,"author":{"gitId":"tototto"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"tototto"},"content":"    public void testDeleteTask() {"},{"lineNumber":32,"author":{"gitId":"tototto"},"content":"        ListHandler listHandler \u003d new ListHandler();"},{"lineNumber":33,"author":{"gitId":"tototto"},"content":"        listHandler.addToDo(\"Read Book\");"},{"lineNumber":34,"author":{"gitId":"tototto"},"content":""},{"lineNumber":35,"author":{"gitId":"tototto"},"content":"        String indexToDelete \u003d \"1\";"},{"lineNumber":36,"author":{"gitId":"tototto"},"content":"        listHandler.deleteListItem(indexToDelete);"},{"lineNumber":37,"author":{"gitId":"tototto"},"content":""},{"lineNumber":38,"author":{"gitId":"tototto"},"content":"        Vector result \u003d listHandler.getList();"},{"lineNumber":39,"author":{"gitId":"tototto"},"content":"        assertEquals(result.size(), 0);"},{"lineNumber":40,"author":{"gitId":"tototto"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tototto"},"content":"}"}],"authorContributionMap":{"tototto":41}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tototto"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"tototto"},"content":"deadline return book /by 12/12/12 6pm"},{"lineNumber":3,"author":{"gitId":"tototto"},"content":"bye"}],"authorContributionMap":{"tototto":3}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"tototto"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/**/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"tototto"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"tototto":2,"-":32}}]
