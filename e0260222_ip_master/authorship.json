[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    mainClassName \u003d \"duke.main.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":17,"-":44}},{"path":"docs/DeveloperGuide.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"# Developer Guide"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"## Implementation of Todo Feature"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"The `todo` feature is implemented using `TodoCommand`, which extends `Command`."},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"Upon receiving an input string that has `todo` as the first word, the `Duke` object will instantiate a"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"`TodoCommand` object with the `fullCommand` string, which is the input entered by the user. The `Duke`"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"object will then call the `execute` method in the `TodoCommand` object with the following arguments:"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"1. `tasks`: a `TaskList` object;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"2. `ui`: a `Ui` object;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"3. `storage`: a `Storage` object;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"Finally, the `execute` method will execute the following steps:"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"1. Calls `Parser#createTodo(fullCommand)` to get an `Todo` object `todo`;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"2. Calls `tasks#addTask(todo)` to add `todo` to `tasks`;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"3. Calls `storage#saveTasks(tasks)` to save all tasks to data file;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"4. Calls `ui#printAddedTask(tasks)` to generate the output string that will be shown to the user."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"The following sequence diagram shows the object interactions when the `Duke` object calls the `execute` method"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"of the `TodoCommand` object:"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"\u003cbr\u003e\u003cimg src\u003d\"images/TodoSequenceDiagram.png\" alt\u003d\"TodoSequenceDiagram\" width\u003d\"800\"/\u003e\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"The following activity diagram shows what happens when a user enters a `todo` command:"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"\u003cbr\u003e\u003cimg src\u003d\"images/TodoActivityDiagram.png\" alt\u003d\"TodoActivityDiagram\" width\u003d\"500\"/\u003e\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"## User Stories"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"|Version| As a ... | I want to ... | So that I can ...|"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"|--------|----------|---------------|------------------|"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"|v0.1|new user|add a task with no deadline|be reminded to do this task|"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"|v0.1|new user|add a task with deadline|be reminded to do this task before the deadline|"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"|v0.1|new user|add a task with start datetime and duration|be reminded to do this task during its timeslot|"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"|v0.1|new user|list all tasks|view my assigned tasks|"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"|v0.1|user|find tasks|view specific tasks of interest|"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"|v0.1|user|mark a task as done|know which of the tasks are completed|"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"|v0.1|user|delete a task|remove a task that is no longer needed|"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"|v0.5|user|sort all tasks|order my tasks based on their deadline|"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"## Non-Functional Requirements"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"1. The app should work on any mainstream OS with Java `11` or above installed."},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"2. The response time for each command should not exceed `3` seconds."},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"3. A user with average typing speed should be able to enter any one command within `12` seconds."},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"4. After using each command for at least `5` times, a user with no cognitive disability should be able to"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"   use all the app features without having to reference the user guide."},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"## Glossary"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"* *Mainstream OS* - Windows 7, Windows 10, Linux, Unix, OS-X"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":""}],"authorContributionMap":{"e0260222":49}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"# Duke"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"![Ui](./Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"Duke is a Java-based desktop app that helps the users keep track of the tasks they need to do."},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"It comes with a Command Line Interface (CLI) that allows users to enter their commands while retaining the benefits of a Graphical User Interface (GUI)."},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"This allows users who type fast to complete their desired actions quicker than using traditional GUI apps."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"Useful links:"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"* [Developer Guide](DeveloperGuide.md)"}],"authorContributionMap":{"e0260222":8,"-":3}},{"path":"docs/UserGuide.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"Duke is a Java-based desktop app that helps the users keep track of the tasks they need to do."},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"It comes with a Command Line Interface (CLI) that allows users to enter their commands while retaining the benefits of a Graphical User Interface (GUI)."},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"This allows users who type fast to complete their desired actions quicker than using traditional GUI apps."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"## Quick Start"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"2. Download the latest `duke.jar` [here](https://github.com/e0260222/ip/releases)."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"3. Copy `duke.jar` to the folder you want to use as the home folder for Duke."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"4. Navigate to the home folder for Duke on your CLI program."},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"5. Launch Duke by running the command `java -jar duke.jar`."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"6. Type the command in the text box and press `Enter` to execute it."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"   \u003cbr\u003eSome example commands you can try:"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    - `todo Go to the gym`: Adds a todo to Duke."},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    - `deadline Finish homework /by 2020-09-15 1800`: Adds a deadline to Duke."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    - `event Watch movie /at 2020-09-16 1800 180`: Adds an event to Duke."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    - `list`: Lists all tasks in Duke."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    - `done 1`: Marks the first task shown in the list as done."},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"7. Refer to **Features** below for details of each command."},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"## Features"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"Notes about the command format:"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"- Words in UPPER_CASE are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"  E.g. `DESCRIPTION` in the command `todo DESCRIPTION`."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"- Parameters with `...` after them can be used multiple times.\u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"  E.g. `KEYWORD` in the command `find KEYWORD...`."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"### Adding a todo: `todo`"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"Adds a `todo` to Duke. `todo` is a task that has a description."},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"Example of usage: `todo Read book`"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"Got it! I have added this task:"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"[T][✘] Read book"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"Now you have 1 tasks in the list."},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"### Adding a deadline: `deadline`"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"Adds a `deadline` to Duke. `deadline` is a task that has a description,"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"and it must be done by a specified date and time."},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"Format: `deadline DESCRIPTION /by DATE_TIME`"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"- `DATE_TIME` must be in yyyy-MM-dd HHmm  format. E.g. `2020-09-20 1800`."},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"Example of usage: `deadline Finish TIC4001 quiz /by 2020-09-20 1800`"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"Got it! I have added this task:"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"[D][✘] Finish TIC4001 quiz (by: 20 Sep 2020 6:00PM)"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"Now you have 2 tasks in the list."},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"### Adding an event: `event`"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"Adds an `event` to Duke. `event` is a task that has a description,"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"and it will happen at a specified time period."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"Format: `event DESCRIPTION /at DATE_TIME DURATION_IN_MINUTES`"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"- `DATE_TIME` must be in yyyy-MM-dd HHmm  format. E.g. `2020-09-20 1800`."},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"- `DURATION_IN_MINUTES` must be a positive integer."},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"Example of usage: `event Attend party /at 2020-09-21 1900 90`"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"Duke: Got it! I have added this task:"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"[E][✘] Attend party (at: 21 Sep 2020 7:00PM to 21 Sep 2020 8:30PM)"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"Now you have 3 tasks in the list."},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"### Listing all tasks: `list`"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"Lists all tasks in Duke."},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"Format: `list`"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"Example of usage: `list`"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"Here are the tasks in your list:"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"1. [T][✘] Read book"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"2. [D][✘] Finish TIC4001 quiz (by: 20 Sep 2020 6:00PM)"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"3. [E][✘] Attend party (at: 21 Sep 2020 7:00PM to 21 Sep 2020 8:30PM)"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"### Finding tasks: `find`"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"Finds all tasks in Duke that match any of the specified keywords."},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"Format: `find KEYWORD...`"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"Example of usage: `find read finish`"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"Here are the matching tasks in your list:"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"1. [T][✘] Read book"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"2. [D][✘] Finish TIC4001 quiz (by: 20 Sep 2020 6:00PM)"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"### Marking task as done: `done`"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"Marks the specified task in Duke as done."},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"Format: `done TASK_INDEX`"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"- `list` or `find` command must be executed first before using the `done` command."},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"- `TASK_INDEX` refers to the index number shown in the list generated by the `list` or `find` command."},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"- `TASK_INDEX` must be a positive integer."},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"Example of usage: `done 1`"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"I have marked this task as done:"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"[T][✓] Read book"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"### Deleting a task: `delete`"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"Deletes the specified task in Duke."},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"Format: `delete TASK_INDEX`"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"- `list` or `find` command must be executed first before using the `delete` command."},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"- `TASK_INDEX` refers to the index number shown in the list generated by the `list` or `find` command."},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"- `TASK_INDEX` must be a positive integer."},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"Example of usage: `delete 1`"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"Noted! I\u0027ve removed this task: "},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"[T][✓] Read book"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"Now you have 2 tasks in the list."},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"### Sorting all tasks: `sort`"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"Sorts all tasks in Duke."},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"Format: `sort`"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"- `deadline` tasks will be sorted based on their `by` datetime."},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"- `event` tasks will be sorted based on their `at` datetime."},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"- `deadline` tasks will appear at the top of the list."},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"- `event` tasks will appear after the `deadline` tasks."},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"- `todo` tasks will appear after the `event` tasks. "},{"lineNumber":142,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"Example of usage: `sort`"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":"Tasks sorted! Here are the tasks in your list:"},{"lineNumber":147,"author":{"gitId":"e0260222"},"content":"1. [D][✘] Finish TIC4001 quiz (by: 20 Sep 2020 6:00PM)"},{"lineNumber":148,"author":{"gitId":"e0260222"},"content":"2. [D][✘] Finish TIC4002 user guide (by: 25 Sep 2020 7:00PM)"},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"3. [E][✘] Attend party (at: 21 Sep 2020 7:00PM to 21 Sep 2020 8:30PM)"},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"4. [E][✘] Attend conference (at: 10 Oct 2020 6:00PM to 10 Oct 2020 9:00PM)"},{"lineNumber":151,"author":{"gitId":"e0260222"},"content":"5. [T][✘] Learn Python"},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"6. [T][✘] Bring family out for lunch"},{"lineNumber":153,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"### Exiting Duke: `bye`"},{"lineNumber":156,"author":{"gitId":"e0260222"},"content":"Exits from Duke."},{"lineNumber":157,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":158,"author":{"gitId":"e0260222"},"content":"Format: `bye`"},{"lineNumber":159,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":160,"author":{"gitId":"e0260222"},"content":"Example of usage: `bye`"},{"lineNumber":161,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":162,"author":{"gitId":"e0260222"},"content":"The program window will close as soon as the `bye` command is entered."},{"lineNumber":163,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":164,"author":{"gitId":"e0260222"},"content":"### Saving data"},{"lineNumber":165,"author":{"gitId":"e0260222"},"content":"There is no save command because any change to the data in Duke will be automatically saved."},{"lineNumber":166,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":167,"author":{"gitId":"e0260222"},"content":"## Command Summary"},{"lineNumber":168,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":169,"author":{"gitId":"e0260222"},"content":"* Add todo `todo DESCRIPTION`"},{"lineNumber":170,"author":{"gitId":"e0260222"},"content":"* Add deadline `deadline DESCRIPTION /by DATE_TIME`"},{"lineNumber":171,"author":{"gitId":"e0260222"},"content":"* Add event `event DESCRIPTION /at DATE_TIME DURATION_IN_MINUTES`"},{"lineNumber":172,"author":{"gitId":"e0260222"},"content":"* List tasks `list`"},{"lineNumber":173,"author":{"gitId":"e0260222"},"content":"* Find tasks `find KEYWORD...`"},{"lineNumber":174,"author":{"gitId":"e0260222"},"content":"* Mark task as done `done TASK_INDEX`"},{"lineNumber":175,"author":{"gitId":"e0260222"},"content":"* Delete task `delete TASK_INDEX`"},{"lineNumber":176,"author":{"gitId":"e0260222"},"content":"* Sort tasks `sort`"},{"lineNumber":177,"author":{"gitId":"e0260222"},"content":"* Exit Duke `bye`"}],"authorContributionMap":{"e0260222":177}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to exit Duke."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * Executes the exit program command."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     * Returns true so that Duke will exist after this command is executed."},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    public boolean isBye() {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        return true;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":29}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" * Represents a command that a user wants to execute. A \u003ccode\u003eCommand\u003c/code\u003e object contains"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * methods need to execute the user\u0027s command . This class defines the common behaviour that"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * can be inherited by subclasses with specific implementation of a Command."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * Executes the user\u0027s command."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Returns false to prevent Duke from exiting after the command."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Subclasses should override this method to return true if Duke"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * needs to exit after the command."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public boolean isBye() {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":31}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to add deadline task."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDeadlineCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public DeadlineCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the add deadline command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(Parser.createDeadline(fullCommand));"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":38}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to delete task."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDeleteCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public DeleteCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the delete task command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        if (!(tasks.getIsInitialized())) {"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"Please run the list or find command first.\");"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        int taskIndex \u003d Parser.getTaskIndex(fullCommand);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        String taskDescription;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"            taskDescription \u003d tasks.getTask(tasks.getSearchResultIndex(taskIndex)).toString();"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"            tasks.removeTask(tasks.getSearchResultIndex(taskIndex));"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            tasks.setIsInitialized(false);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        ui.printRemovedTask(tasks.getSize(), taskDescription);"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":48}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to mark task as done."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDoneCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public DoneCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the mark task as done command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        if (!(tasks.getIsInitialized())) {"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"Please run the list or find command first.\");"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        int taskIndex \u003d Parser.getTaskIndex(fullCommand);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"            tasks.getTask(tasks.getSearchResultIndex(taskIndex)).setDone();"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"            tasks.setIsInitialized(false);"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        ui.printDoneTask(tasks.getTask(tasks.getSearchResultIndex(taskIndex)));"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":46}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to add event task."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class EventCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes an \u003ccode\u003eEventCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public EventCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the add event command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(Parser.createEvent(fullCommand));"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":38}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to find tasks based on keywords."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes an \u003ccode\u003eFindCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public FindCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the find tasks command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        String searchString \u003d Parser.getSearchString(fullCommand).toLowerCase();"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        String[] searchWords \u003d searchString.split(\" \");"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(true);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        tasks.clearSearchResultIndexes();"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"            String taskDescription \u003d tasks.getTask(i).getDescription().toLowerCase();"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"            for (String searchWord : searchWords) {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"                if (taskDescription.contains(searchWord.trim())) {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"                    tasks.addSearchResultIndex(i);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"                    break;"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                }"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        ui.printFilteredTasks(tasks);"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":48}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to list all tasks."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * Executes the list all tasks command."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(true);"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        tasks.clearSearchResultIndexes();"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"            tasks.addSearchResultIndex(i);"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        ui.printTasks(tasks);"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":27}},{"path":"src/main/java/duke/command/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"public class SortCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"     * Executes the sort tasks command."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        tasks.sortTasks();"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        ui.printSortedTasks(tasks);"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":22}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to add todo task."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class TodoCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTodoCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public TodoCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the add todo command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(Parser.createTodo(fullCommand));"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":38}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Contains the method to inform users if the command is invalid."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class UnknownCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * Executes the invalid input command."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        ui.printError(\"I\u0027m sorry, I don\u0027t know what that means.\");"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":22}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":" * Overrides the Exception class\u0027s constructor to implement"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":" * custom error messages for user-defined exceptions."},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":11}},{"path":"src/main/java/duke/main/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":61}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * Implements an application that allows users to manage tasks."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * It contains methods that allow the creation, modification and storage of tasks."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    private final Storage storage;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    private final Ui ui;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDuke\u003c/code\u003e object."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     * @param filePath Path of the text file used for storing app data."},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    public Duke(String filePath) {"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"            tasks \u003d new TaskList(storage.loadTasks(filePath));"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * Generates the response for the user\u0027s input."},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand Input provided by user."},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    public String getResponse(String fullCommand) {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        ui.clearOutput();"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"            if (c.isBye()) {"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"                return null;"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        } catch (DukeException e) {"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"            return e.getMessage();"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        return ui.getOutput();"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":51,"-":2}},{"path":"src/main/java/duke/main/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":9}},{"path":"src/main/java/duke/main/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private Duke duke \u003d new Duke(\"data/tasks.txt\");"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    public void start(Stage stage) {"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"            stage.setScene(scene);"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"            stage.setTitle(\"Duke, a Personal Assistant Chatbot\");"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/icon.png\")));"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":30}},{"path":"src/main/java/duke/main/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * Initializes the main window"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        showWelcome();"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    private void handleUserInput() {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        if (response \u003d\u003d null) {"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            System.exit(0);"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        );"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        userInput.clear();"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"    private void showWelcome() {"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        String outputText \u003d \"Hello! I\u0027m Duke, your personal chat bot.\""},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"                + System.lineSeparator()"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"                + \"What can I do for you?\";"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"                DialogBox.getDukeDialog(outputText, dukeImage)"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"        );"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":64}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.command.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.command.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import duke.command.EventCommand;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import duke.command.FindCommand;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import duke.command.ListCommand;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import duke.command.SortCommand;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import duke.command.TodoCommand;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import duke.command.UnknownCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import duke.task.Todo;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":" * Contains methods that deal with parsing user commands to extract meaningful details from them."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"public class Parser {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Gets the command word from user\u0027s input string."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * @return Command word from user\u0027s input string."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public static String getCommand(String fullCommand) {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        return fullCommand.split(\" \")[0];"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"     * Creates a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If description for \u003ccode\u003eTodo\u003c/code\u003e is missing."},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    public static Todo createTodo(String fullCommand) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of a todo task cannot be empty.\");"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        return new Todo(commandParameter);"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"     * Creates a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If description or by field for \u003ccode\u003eDeadline\u003c/code\u003e is missing."},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    public static Deadline createDeadline(String fullCommand) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of a deadline task cannot be empty.\");"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        String description;"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        String by;"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"            description \u003d commandParameter.split(\"/by\")[0].trim();"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"            by \u003d commandParameter.split(\"/by\")[1].trim();"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The by field of the deadline task is missing.\");"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        if (description.isEmpty()) {"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of a deadline task cannot be empty.\");"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"        return new Deadline(description, by);"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"     * Creates an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If description or at field for \u003ccode\u003eEvent\u003c/code\u003e is missing."},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"    public static Event createEvent(String fullCommand) throws DukeException {"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of a event task cannot be empty.\");"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"        String description;"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        String at;"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"            description \u003d commandParameter.split(\"/at\")[0].trim();"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"            at \u003d commandParameter.split(\"/at\")[1].trim();"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The at field of the event task is missing.\");"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"        if (description.isEmpty()) {"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of an event task cannot be empty.\");"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"        return new Event(description, at);"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"    private static String getCommandParameter(String fullCommand) {"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"        return fullCommand.replaceFirst(\"(?i)todo\", \"\")"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)deadline\", \"\")"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)event\", \"\")"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)done\", \"\")"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)delete\", \"\")"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)list\", \"\")"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)sort\", \"\")"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"                .trim();"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"     * Gets task index from user\u0027s full input string."},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"     * @return Task index."},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If task index is missing or invalid."},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"    public static int getTaskIndex(String fullCommand) throws DukeException {"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The task index is missing.\");"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        int taskIndex;"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"            taskIndex \u003d Integer.parseInt(commandParameter);"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"        return taskIndex - 1;"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"     * Gets search string from user\u0027s full input string."},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"     * @return Search string."},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If search string is missing."},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"    public static String getSearchString(String fullCommand) throws DukeException {"},{"lineNumber":142,"author":{"gitId":"e0260222"},"content":"        String searchString \u003d fullCommand.replaceFirst(\"find\", \"\").trim();"},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"        if (searchString.isEmpty()) {"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The search string is missing.\");"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":"        return searchString;"},{"lineNumber":147,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"     * Gets \u003ccode\u003eCommand\u003c/code\u003e object from user\u0027s full input string."},{"lineNumber":151,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":153,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eCommand\u003c/code\u003e object."},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"    public static Command parse(String fullCommand) {"},{"lineNumber":156,"author":{"gitId":"e0260222"},"content":"        String command \u003d getCommand(fullCommand).toLowerCase();"},{"lineNumber":157,"author":{"gitId":"e0260222"},"content":"        switch (command) {"},{"lineNumber":158,"author":{"gitId":"e0260222"},"content":"        case \"bye\":"},{"lineNumber":159,"author":{"gitId":"e0260222"},"content":"            return new ByeCommand();"},{"lineNumber":160,"author":{"gitId":"e0260222"},"content":"        case \"todo\":"},{"lineNumber":161,"author":{"gitId":"e0260222"},"content":"            return new TodoCommand(fullCommand);"},{"lineNumber":162,"author":{"gitId":"e0260222"},"content":"        case \"deadline\":"},{"lineNumber":163,"author":{"gitId":"e0260222"},"content":"            return new DeadlineCommand(fullCommand);"},{"lineNumber":164,"author":{"gitId":"e0260222"},"content":"        case \"event\":"},{"lineNumber":165,"author":{"gitId":"e0260222"},"content":"            return new EventCommand(fullCommand);"},{"lineNumber":166,"author":{"gitId":"e0260222"},"content":"        case \"done\":"},{"lineNumber":167,"author":{"gitId":"e0260222"},"content":"            return new DoneCommand(fullCommand);"},{"lineNumber":168,"author":{"gitId":"e0260222"},"content":"        case \"delete\":"},{"lineNumber":169,"author":{"gitId":"e0260222"},"content":"            return new DeleteCommand(fullCommand);"},{"lineNumber":170,"author":{"gitId":"e0260222"},"content":"        case \"find\":"},{"lineNumber":171,"author":{"gitId":"e0260222"},"content":"            return new FindCommand(fullCommand);"},{"lineNumber":172,"author":{"gitId":"e0260222"},"content":"        case \"list\":"},{"lineNumber":173,"author":{"gitId":"e0260222"},"content":"            return new ListCommand();"},{"lineNumber":174,"author":{"gitId":"e0260222"},"content":"        case \"sort\":"},{"lineNumber":175,"author":{"gitId":"e0260222"},"content":"            return new SortCommand();"},{"lineNumber":176,"author":{"gitId":"e0260222"},"content":"        default:"},{"lineNumber":177,"author":{"gitId":"e0260222"},"content":"            return new UnknownCommand();"},{"lineNumber":178,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":180}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import duke.task.Todo;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":" * Contains methods that load tasks from the hard disk and save tasks to the hard disk."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    private final String filePath;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eStorage\u003c/code\u003e object."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param filePath Path of the text file used for storing app data."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public Storage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * Loads list of tasks from text file."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If file folder is unable to be created."},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    public ArrayList\u003cTask\u003e loadTasks(String filePath) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            Path path \u003d Paths.get(\"data/\");"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"            if (!(Files.exists(path))) {"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                Files.createDirectory(path);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        } catch (IOException e) {"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"I\u0027ve problem creating the save directory!\");"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        ArrayList\u003cString\u003e lines;"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        lines \u003d getLines(filePath);"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        for (String line : lines) {"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"            if (!(line.trim().isEmpty())) {"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"                tasks.add(createTask(line));"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        return tasks;"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"     * Saves information of all \u003ccode\u003eTasks\u003c/code\u003e objects to text file."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If text file is not found or inaccessible."},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    public void saveTasks(TaskList tasks) throws DukeException {"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        FileWriter fw;"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"            fw \u003d new FileWriter(filePath);"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"                String isDone \u003d getTaskStatus(tasks.getTask(i));"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"                String description \u003d tasks.getTask(i).getDescription();"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"                String lineToSave;"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"                if (tasks.getTask(i) instanceof Todo) {"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"                    lineToSave \u003d \"T\" + \" | \" + isDone + \" | \" + description + System.lineSeparator();"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"                } else if (tasks.getTask(i) instanceof Deadline) {"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"                    String by \u003d ((Deadline) tasks.getTask(i)).getBy();"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"                    lineToSave \u003d \"D\" + \" | \" + isDone + \" | \" + description + \" | \" + by + System.lineSeparator();"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"                } else if (tasks.getTask(i) instanceof Event) {"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"                    String at \u003d ((Event) tasks.getTask(i)).getAt();"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"                    String duration \u003d ((Event) tasks.getTask(i)).getDuration();"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"                    lineToSave \u003d \"E\" + \" | \" + isDone + \" | \" + description"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"                            + \" | \" + at + \" | \" + duration + System.lineSeparator();"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"                } else {"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"                    throw new DukeException(\"I\u0027ve problem saving to the file.\");"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"                fw.write(lineToSave);"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"            fw.close();"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"I\u0027ve problem reading the save file.\");"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"    private Task createTask(String line) throws DukeException {"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"        String taskType \u003d line.split(\"\\\\|\")[0].trim();"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"        String isDoneString \u003d line.split(\"\\\\|\")[1].trim();"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        String description \u003d line.split(\"\\\\|\")[2].trim();"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"        boolean isDone;"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"        isDone \u003d isDoneString.equals(\"1\");"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"        switch (taskType) {"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"        case \"D\":"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"            String by \u003d line.split(\"\\\\|\")[3].trim();"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"            return new Deadline(description, by, isDone);"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"        case \"E\":"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"            String at \u003d line.split(\"\\\\|\")[3].trim();"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"            String duration \u003d line.split(\"\\\\|\")[4].trim();"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"            return new Event(description, at, duration, isDone);"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"        case \"T\":"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"            return new Todo(description, isDone);"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"        default:"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"There is invalid data in the save file!\");"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"    private ArrayList\u003cString\u003e getLines(String filePath) throws DukeException {"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"            while (s.hasNext()) {"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"                result.add(s.nextLine());"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        } catch (IOException e) {"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"I\u0027ve problem reading the save file.\""},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"                    + \" Let\u0027s start with an empty task list instead.\");"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"        return result;"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"    private String getTaskStatus(Task task) {"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"        return (task.getIsDone() ? \"1\" : \"0\");"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":135}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Represents a task that a user wants to do. A \u003ccode\u003eDeadline\u003c/code\u003e object has a"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * description string, a boolean that indicates whether the task is done, and a by string"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * that indicates the deadline of the task."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"public class Deadline extends Task {"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    private final LocalDateTime by;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"     * @param by Deadline of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If datetime is in the wrong format."},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    public Deadline(String description, String by) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"            this.by \u003d LocalDateTime.parse(by, formatter);"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The by field should be in yyyy-MM-dd HHmm format. E.g. 2020-12-25 1800\");"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"     * @param by Deadline of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"     * @param isDone Completion status of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If datetime is in the wrong format."},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"    public Deadline(String description, String by, boolean isDone) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        super(description, isDone);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"            this.by \u003d LocalDateTime.parse(by);"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The by field should be in yyyy-MM-dd HHmm format. E.g. 2020-12-25 1800\");"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     * Gets the deadline of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"     * @return Deadline of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    public String getBy() {"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        return by.toString();"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"     * Gets the String representation of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"     * @return String representation of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        return \"[D]\" + super.toString()"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"                + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\")) + \")\";"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":70}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Represents a task that a user wants to do. An \u003ccode\u003eEvent\u003c/code\u003e object has a"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * description string, a boolean that indicates whether the task is done, an at string"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * that indicates the start datetime of the task, and a duration string that indicates"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * the duration of the task."},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"public class Event extends Task {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    private final LocalDateTime at;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private final int duration;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     * Initializes an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     * @param description Description of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     * @param at Start datetime of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If datetime is in the wrong format."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    public Event(String description, String at) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        super(description);"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"            String startDate \u003d at.split(\" \")[0].trim();"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"            String startTime \u003d at.split(\" \")[1].trim();"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"            String startDateTime \u003d startDate + \" \" + startTime;"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"            this.at \u003d LocalDateTime.parse(startDateTime, formatter);"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"            this.duration \u003d Integer.parseInt(at.split(\" \")[2].trim());"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The at field should be in yyyy-MM-dd HHmm DURATION_IN_MINUTES format.\""},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"                    + \" E.g. 2020-12-25 1800 60\");"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"     * Initializes an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     * @param description Description of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"     * @param at Start datetime of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"     * @param duration Duration of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"     * @param isDone Completion status of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If datetime is in the wrong format."},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    public Event(String description, String at, String duration, boolean isDone) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        super(description, isDone);"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"            this.at \u003d LocalDateTime.parse(at);"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"            this.duration \u003d Integer.parseInt(duration);"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The at field should be in yyyy-MM-dd HHmm format. E.g. 2020-12-25 1800\");"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"     * Gets the start datetime of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"     * @return Start datetime of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    public String getAt() {"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        return at.toString();"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"     * Gets the duration of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"     * @return Duration of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"    public String getDuration() {"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"        return String.valueOf(duration);"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"     * Gets the String representation of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"     * @return String representation of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"        return \"[E]\" + super.toString()"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"                + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\"))"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"                + \" to \""},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"                + at.plusMinutes(duration).format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\"))"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"                + \")\";"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":91}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":" * Represents a task that a user wants to do. A \u003ccode\u003eTask\u003c/code\u003e object has a"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":" * description string and a boolean that indicates whether the task is done. This"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":" * class defines the common behaviour that can be inherited by subclasses with specific"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * implementation of a task."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    private final String description;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    private boolean isDone;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    public Task(String description) {"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param isDone Completion status of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        this.description \u003d description;"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * Gets the description of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     * @return Description of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    public String getDescription() {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        return description;"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     * Gets the completion station of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"     * @return Completion status of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    public boolean getIsDone() {"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        return isDone;"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"     * Gets the status icon of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"     * @return Status icon of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    public String getStatusIcon() {"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"        //return tick or X symbol based on isDone value"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"     * Sets the completion status of a \u003ccode\u003eTask\u003c/code\u003e object to done."},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    public void setDone() {"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        this.isDone \u003d true;"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"     * Gets the String representation of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"     * @return String representation of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getDescription();"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":78}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Manages the in-memory task list. It contains an ArrayList that stores"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" * individual \u003ccode\u003eTask\u003c/code\u003e objects and methods to perform operations"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * such as adding and deleting task from the Task List."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    private final ArrayList\u003cInteger\u003e searchResultIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    private boolean isInitialized \u003d false;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"     * Gets a \u003ccode\u003eTask\u003c/code\u003e object from the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * @param index Index of Task in the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eTask\u003c\u003c/code\u003e object."},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    public Task getTask(int index) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        return tasks.get(index);"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * Adds a task to the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"     * @param t \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    public void addTask(Task t) {"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        tasks.add(t);"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     * Removes a \u003ccode\u003eTask\u003c/code\u003e object from the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"     * @param index Index of a \u003ccode\u003eTask\u003c/code\u003e in the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If index is invalid."},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    public void removeTask(int index) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"            tasks.remove(tasks.get(index));"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"Invalid index\");"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"     * Gets the size of a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"     * @return Size of a \u003ccode\u003eList\u003c/code\u003e object."},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"    public int getSize() {"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"        return tasks.size();"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"     *  Sorts a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"    public void sortTasks() {"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"        tasks.sort(new TaskListSorter());"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"     * Adds the index of a \u003ccode\u003eTask\u003c/code\u003e object that contains the search keyword."},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"     * @param searchResultIndex Index of a \u003ccode\u003eTask\u003c/code\u003e object in the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"    public void addSearchResultIndex(int searchResultIndex) {"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"        searchResultIndexes.add(searchResultIndex);"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"     * Clears the indexes of \u003ccode\u003eTask\u003c/code\u003e objects that contain the search keyword."},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"    public void clearSearchResultIndexes() {"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"        searchResultIndexes.clear();"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"     * Gets the indexes of \u003ccode\u003eTask\u003c/code\u003e objects that contain the search keyword."},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"     * @return Indexes of \u003ccode\u003eTask\u003c/code\u003e objects that contain the search keyword."},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"    public ArrayList\u003cInteger\u003e getSearchResultIndexes() {"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"        return searchResultIndexes;"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"     * Gets the index of a \u003ccode\u003eTask\u003c/code\u003e object that contains the search keyword."},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"     * @return Index of \u003ccode\u003eTask\u003c/code\u003e object that contains the search keyword."},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"    public int getSearchResultIndex(int resultIndex) {"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"        return searchResultIndexes.get(resultIndex);"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"     * Sets the initialization status of the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"     * @param isInitialized Initialization status of the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"    public void setIsInitialized(boolean isInitialized) {"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"        this.isInitialized \u003d isInitialized;"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"     * Gets the initialization status of a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"     * @return Initialization status of a \u003ccode\u003eList\u003c/code\u003e object."},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"    public boolean getIsInitialized() {"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"        return isInitialized;"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":132}},{"path":"src/main/java/duke/task/TaskListSorter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":" * Implements the Comparator interface."},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * It contains the compare method that sorts \u003ccode\u003eTask\u003c/code\u003e objects"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * based on task\u0027s deadline."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class TaskListSorter implements Comparator\u003cTask\u003e {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * Compares two \u003ccode\u003eTask\u003c/code\u003e objects and order them."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param a First \u003ccode\u003eTask\u003c/code\u003e object in a comparison."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * @param b Second \u003ccode\u003eTask\u003c/code\u003e object in a comparison."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @return -1 if a \u003c b, 1 if a \u003e b, 0 if a \u003d\u003d b."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    public int compare(Task a, Task b) {"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"        if ((a instanceof Deadline || a instanceof Event) \u0026\u0026 (b instanceof Todo)) {"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"            return -1;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        if ((a instanceof Todo) \u0026\u0026 (b instanceof Deadline || b instanceof Event)) {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"            return 1;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        if ((a instanceof Deadline) \u0026\u0026 (b instanceof Event)) {"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"            return -1;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        if ((a instanceof Event) \u0026\u0026 (b instanceof Deadline)) {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"            return 1;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        if (a instanceof Deadline \u0026\u0026 b instanceof Deadline) {"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"            return Integer.compare(((Deadline) a).getBy().compareTo(((Deadline) b).getBy()), 0);"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        if (a instanceof Event \u0026\u0026 b instanceof Event) {"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"            return Integer.compare(((Event) a).getAt().compareTo(((Event) b).getAt()), 0);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        return 0;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":39}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":" * Represents a task that a user wants to do. A \u003ccode\u003eTodo\u003c/code\u003e object has a"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":" * description string and a boolean that indicates whether the task is done."},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"     * @param isDone Completion status of a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        super(description, isDone);"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * Gets the String representation of a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     * @return String representation of a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":36}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" * Contains methods that generate the output messages from user\u0027s input."},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    private final StringBuilder output \u003d new StringBuilder();"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * Builds the error message string"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    public void printError(String errorMessage) {"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        output.append(\"OOPS!! \");"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"        output.append(errorMessage);"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     * Builds the added task message string"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    public void printAddedTask(TaskList tasks) {"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        output.append(\"Got it! I have added this task:\");"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        output.append(System.lineSeparator());"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        output.append(tasks.getTask(tasks.getSize() - 1).toString());"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        output.append(System.lineSeparator());"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        output.append(\"Now you have \");"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        output.append(tasks.getSize());"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        output.append(\" tasks in the list.\");"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * Builds the removed task message string"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    public void printRemovedTask(int size, String taskDescription) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        output.append(\"Noted! I\u0027ve removed this task: \");"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        output.append(System.lineSeparator());"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        output.append(taskDescription);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        output.append(System.lineSeparator());"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        output.append(\"Now you have \");"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        output.append(size);"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        output.append(\" tasks in the list.\");"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"     * Builds the done task message string"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    public void printDoneTask(Task task) {"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        output.append(\"I have marked this task as done:\");"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        output.append(System.lineSeparator());"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"        output.append(task.toString());"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"     * Builds the list of tasks message string"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    public void printTasks(TaskList tasks) {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        if (tasks.getSize() \u003d\u003d 0) {"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"            output.append(\"Sorry, there is no task in your list.\");"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"            output.append(\"Here are the tasks in your list:\");"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"            output.append(System.lineSeparator());"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"                output.append(i + 1);"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"                output.append(\". \");"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"                output.append(tasks.getTask(i).toString());"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"                output.append(System.lineSeparator());"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"     * Builds the list of filtered tasks message string"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"    public void printFilteredTasks(TaskList tasks) {"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"        ArrayList\u003cInteger\u003e searchResultIndexes \u003d tasks.getSearchResultIndexes();"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"        if (searchResultIndexes.size() \u003d\u003d 0) {"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"            output.append(\"Sorry, there is no matching task.\");"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"            output.append(\"Here are the matching tasks in your list:\");"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"            output.append(System.lineSeparator());"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"            for (int i \u003d 0; i \u003c searchResultIndexes.size(); i++) {"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"                output.append(i + 1);"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"                output.append(\". \");"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"                output.append(tasks.getTask(searchResultIndexes.get(i)).toString());"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"                output.append(System.lineSeparator());"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"     * Builds the list of sorted tasks message string"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"    public void printSortedTasks(TaskList tasks) {"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"        if (tasks.getSize() \u003d\u003d 0) {"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"            output.append(\"Sorry, there is no task in your list.\");"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"            output.append(\"Tasks sorted! Here are the tasks in your list:\");"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"            output.append(System.lineSeparator());"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"                output.append(i + 1);"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"                output.append(\". \");"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"                output.append(tasks.getTask(i).toString());"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"                output.append(System.lineSeparator());"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"     * Clears the output message string."},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"    public void clearOutput() {"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"        output.setLength(0);"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"     * Gets the output message string."},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"     * @return Output message string to be shown to the user."},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"    public String getOutput() {"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        return output.toString();"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":127}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" minHeight\u003d\"-Infinity\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"e0260222":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.main.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"e0260222":19}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Parser class."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"public class ParserTest {"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    public void testGetCommand() {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"todo\", Parser.getCommand(\"todo Eat breakfast\"));"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"\", Parser.getCommand(\"\"));"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    public void testGetTaskIndex() throws DukeException {"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        assertEquals(2, Parser.getTaskIndex(\"delete 3\"));"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"            Parser.getTaskIndex(\"delete\");"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"            Parser.getTaskIndex(\"delete x\");"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        });"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":30}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Deadline class."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"public class DeadlineTest {"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    public void testGetDescription() throws DukeException {"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"        Task deadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"Have lunch with John\", deadline.getDescription());"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    public void testGetIsDone() throws DukeException {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        Task deadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        Task deadlineWithDoneStatus \u003d new Deadline(\"Have lunch with John\", \"2020-12-25T18:00\", true);"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        assertFalse(deadline.getIsDone());"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        assertTrue(deadlineWithDoneStatus.getIsDone());"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public void testToString() throws DukeException {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        Task deadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        Task deadlineWithDoneStatus \u003d new Deadline(\"Have lunch with John\", \"2020-12-25T18:00\", true);"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[D][\\u2718] Have lunch with John (by: 25 Dec 2020 6:00PM)\", deadline.toString());"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[D][\\u2713] Have lunch with John (by: 25 Dec 2020 6:00PM)\", deadlineWithDoneStatus.toString());"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":36}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Event class."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"public class EventTest {"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    public void testGetDescription() throws DukeException {"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"        Task event \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"Have lunch with John\", event.getDescription());"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    public void testGetIsDone() throws DukeException {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        Task event \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        Task eventWithDoneStatus \u003d new Event(\"Have lunch with John\", \"2020-09-25T18:00\","},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"                \"60\", true);"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        assertFalse(event.getIsDone());"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        assertTrue(eventWithDoneStatus.getIsDone());"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    public void testToString() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        Task event \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        Task eventWithDoneStatus \u003d new Event(\"Have lunch with John\", \"2020-09-25T18:00\","},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"                \"60\", true);"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[E][\\u2718] Have lunch with John (at: 25 Sep 2020 6:00PM to 25 Sep 2020 7:00PM)\","},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"                event.toString());"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[E][\\u2713] Have lunch with John (at: 25 Sep 2020 6:00PM to 25 Sep 2020 7:00PM)\","},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"                eventWithDoneStatus.toString());"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":40}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Task class."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class TaskTest {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    private Task task \u003d new Todo(\"Have lunch with John\");"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    private Task taskWithDoneStatus \u003d new Todo(\"Have lunch with John\", true);"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    public void testGetDescription() {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"Have lunch with John\", task.getDescription());"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public void testGetIsDone() {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        assertEquals(false, task.getIsDone());"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        assertEquals(true, taskWithDoneStatus.getIsDone());"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    public void testToString() {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[T][\\u2718] Have lunch with John\", task.toString());"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[T][\\u2713] Have lunch with John\", taskWithDoneStatus.toString());"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":30}},{"path":"src/test/java/duke/task/TestTaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * JUnit tests for TaskList class."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class TestTaskList {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * Tests the correctness of the getSize() method"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    public void testGetSize() {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(new Todo(\"Have lunch with John\"));"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(new Todo(\"Have lunch with Sam\"));"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"        assertEquals(2, tasks.getSize());"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":21}}]
