[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    archiveBaseName \u003d \"Duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":"Duke is a Java-based Command Line Interface (CLI) Task Manager application"},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"that helps the users keep track of the tasks they need to do."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"## Quick Start"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"2. Download the latest `ip.jar` [here](https://github.com/e0260222/ip/releases)."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"3. Copy `ip.jar` to the folder you want to use as the home folder for Duke."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"4. Navigate to the home folder for Duke on your CLI program."},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"5. Launch Duke by running the command `java -jar ip.jar`."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"6. Type the command in the CLI program and press `Enter` to execute it."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"\u003cbr\u003eSome example commands you can try:"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    - `todo Go to the gym`: Adds a todo to Duke."},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    - `deadline Finish homework 2020-09-30 1800`: Adds a deadline to Duke."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    - `list`: Lists all tasks in Duke."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    - `done 1`: Marks the first task shown in the list as done."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"7. Refer to **Features** below for details of each command."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"Notes about the command format:"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"- Words in UPPER_CASE are the parameters to be supplied by the user."},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"E.g. `DESCRIPTION` in the command `todo DESCRIPTION`."},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"- Parameters with `...` after them can be used multiple times."},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"E.g. `KEYWORD` in the command `find KEYWORD...`."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"### Adding a todo: `todo`"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"Adds a `todo` to Duke. `todo` is a task that has a description."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"Example of usage: `todo Read book`"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"Duke: Got it! I have added this task:"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"      [T][N] Read book"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"      Now you have 1 tasks in the list."},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"### Adding a deadline: `deadline`"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"Adds a deadline to Duke. `deadline` is a task that has a description,"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"and it must be done by a specified date and time."},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"Format: `deadline DESCRIPTION /by DATE_TIME`"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"- `DATE_TIME` must be in yyyy-MM-dd HHmm  format. E.g. `2020-09-20 1800`."},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"Example of usage: `deadline Finish TIC4001 quiz /by 2020-09-20 1800`"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"Expected outcome:"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"Duke: Got it! I have added this task:"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"      [D][N] Finish TIC4001 quiz (by: 20 Sep 2020 6:00PM)"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"      Now you have 2 tasks in the list."},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"### Adding an event: `event`"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"Adds an event to Duke. `event` is a task that has a description,"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"and it will happen at a specified time period."},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"Format: `event DESCRIPTION /at DATE_TIME DURATION_IN_MINUTES`"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"- `DATE_TIME` must be in yyyy-MM-dd HHmm  format. E.g. `2020-09-20 1800`."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"- `DURATION_IN_MINUTES` must be a positive integer."},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"Example of usage: `event Attend party /at 2020-09-21 1900 90`"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"Expected outcome:"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"Duke: Got it! I have added this task:"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"      [E][N] Attend party (at: 21 Sep 2020 7:00PM to 21 Sep 2020 8:30PM)"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"      Now you have 3 tasks in the list."},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"### Listing all tasks: `list`"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"Lists all tasks in Duke."},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"Format: `list`"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"Expected outcome:"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"Duke: Here are the tasks in your list:"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"      1. [T][N] Read book"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"      2. [D][N] Finish TIC4001 quiz (by: 20 Sep 2020 6:00PM)"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"      3. [E][N] Attend party (at: 21 Sep 2020 7:00PM to 21 Sep 2020 8:30PM)"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"### Finding tasks: `find`"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"Finds tasks in Duke that match any of the specified keywords."},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"Format: `find KEYWORD...`"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"Example of usage: `find read finish`"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"Expected outcome:"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"Duke: Here are the matching tasks in your list:"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"      1. [T][N] Read book"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"      2. [D][N] Finish TIC4001 quiz (by: 20 Sep 2020 6:00PM)"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"### Marking task as done: `done`"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"Marks the specified task in Duke as done."},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"Format: `done TASK_INDEX`"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"Example of usage: `done 1`"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"- `list` or `find` command must be executed first before using the `done` command."},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"- `TASK_INDEX` refers to the index number shown in the list generated by the `list` or `find` command."},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"- `TASK_INDEX` must be a positive integer."},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"Expected outcome:"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"Duke: I have marked this task as done:"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"      [T][Y] Read book"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"### Deleting a task: `delete`"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"Deletes the specified task in Duke."},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"Format: `delete TASK_INDEX`"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"Example of usage: `delete 1`"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"- `list` or `find` command must be executed first before using the `delete` command."},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"- `TASK_INDEX` refers to the index number shown in the list generated by the `list` or `find` command."},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"- `TASK_INDEX` must be a positive integer."},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"Expected outcome:"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"Duke: Noted! I\u0027ve removed this task: "},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"      [T][Y] Read book"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"      Now you have 2 tasks in the list."},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"### Exiting Duke: `bye`"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"Exits from Duke."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"Format: `bye`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"Duke: Bye! Hope to see you again soon."},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"```"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"### Saving data"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"There is no save command because any change to the data in Duke will be automatically saved."}],"authorContributionMap":{"e0260222":131,"-":13}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * Implements an application that allows users to manage tasks."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * It contains methods that allow the creation, modification and storage of tasks."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    private final Storage storage;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    private final Ui ui;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDuke\u003c/code\u003e object."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     * @param filePath Path of the text file used for storing app data."},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    public Duke(String filePath) {"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"            tasks \u003d new TaskList(storage.loadTasks(filePath));"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    public void run() {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        ui.printWelcome();"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        boolean isBye \u003d false;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        while (!isBye) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"                String fullCommand \u003d ui.readUserInput();"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                isBye \u003d c.isBye();"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            } catch (DukeException e) {"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"                ui.printError(e.getMessage());"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"     *  Main method of Duke. This is the starting point of the app."},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     *  @param args Command line arguments. Not used."},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    public static void main(String[] args) {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":55,"-":2}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to exit Duke."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * Executes the exit program command."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        ui.printGoodbye();"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Returns true so that Duke will exist after this command is executed."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public boolean isBye() {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        return true;"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":30}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" * Represents a command that a user wants to execute. A \u003ccode\u003eCommand\u003c/code\u003e object contains"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * methods need to execute the user\u0027s command . This class defines the common behaviour that"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * can be inherited by subclasses with specific implementation of a Command."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * Executes the user\u0027s command."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Returns false to prevent Duke from exiting after the command."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Subclasses should override this method to return true if Duke"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * needs to exit after the command."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public boolean isBye() {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":31}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to add deadline task."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDeadlineCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public DeadlineCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the add deadline command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(Parser.createDeadline(fullCommand));"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":38}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to delete task."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDeleteCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public DeleteCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the delete task command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        if (!(tasks.getIsInitialized())) {"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"Please run the list or find command first.\");"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        int taskIndex \u003d Parser.getTaskIndex(fullCommand);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        String taskDescription;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"            taskDescription \u003d tasks.getTask(tasks.getSearchResultIndex(taskIndex)).toString();"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"            tasks.removeTask(tasks.getSearchResultIndex(taskIndex));"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            tasks.setIsInitialized(false);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        ui.printRemovedTask(tasks.getSize(), taskDescription);"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":48}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to mark task as done."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDoneCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public DoneCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the mark task as done command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        if (!(tasks.getIsInitialized())) {"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"Please run the list or find command first.\");"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        int taskIndex \u003d Parser.getTaskIndex(fullCommand);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"            tasks.getTask(tasks.getSearchResultIndex(taskIndex)).setDone();"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"            tasks.setIsInitialized(false);"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        ui.printDoneTask(tasks.getTask(tasks.getSearchResultIndex(taskIndex)));"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":46}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to add event task."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class EventCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes an \u003ccode\u003eEventCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public EventCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the add event command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(Parser.createEvent(fullCommand));"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":38}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to find tasks based on keywords."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes an \u003ccode\u003eFindCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public FindCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the find tasks command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        String searchString \u003d Parser.getSearchString(fullCommand).toLowerCase();"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        String[] searchWords \u003d searchString.split(\" \");"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(true);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        tasks.clearSearchResultIndexes();"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"            String taskDescription \u003d tasks.getTask(i).getDescription().toLowerCase();"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"            for (String searchWord : searchWords) {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"                if (taskDescription.contains(searchWord.trim())) {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"                    tasks.addSearchResultIndex(i);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"                    break;"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                }"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        ui.printFilteredTasks(tasks);"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":48}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to list all tasks."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * Executes the list all tasks command."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(true);"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        tasks.clearSearchResultIndexes();"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"            tasks.addSearchResultIndex(i);"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        ui.printTasks(tasks);"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":27}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains the methods for user to add todo task."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class TodoCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTodoCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public TodoCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * Executes the add todo command."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(Parser.createTodo(fullCommand));"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":38}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Contains the method to inform users if the command is invalid."},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class UnknownCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     * Executes the invalid input command."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        ui.printError(\"I\u0027m sorry, I don\u0027t know what that means.\");"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":22}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":" * Overrides the Exception class\u0027s constructor to implement"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":" * custom error messages for user-defined exceptions."},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":11}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.command.ByeCommand;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.command.EventCommand;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.command.TodoCommand;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import duke.command.UnknownCommand;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import duke.task.Deadline;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import duke.task.Event;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import duke.task.Todo;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":" * Contains methods that deal with parsing user commands to extract meaningful details from them."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     * Gets the command word from user\u0027s input string."},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * @return Command word from user\u0027s input string."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public static String getCommand(String fullCommand) {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        return fullCommand.split(\" \")[0];"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"     * Creates a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If description for \u003ccode\u003eTodo\u003c/code\u003e is missing."},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    public static Todo createTodo(String fullCommand) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of a todo task cannot be empty.\");"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        return new Todo(commandParameter);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"     * Creates a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If description or by field for \u003ccode\u003eDeadline\u003c/code\u003e is missing."},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"    public static Deadline createDeadline(String fullCommand) throws DukeException {"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of a deadline task cannot be empty.\");"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        String description;"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        String by;"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"            description \u003d commandParameter.split(\"/by\")[0].trim();"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"            by \u003d commandParameter.split(\"/by\")[1].trim();"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The by field of the deadline task is missing.\");"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        if (description.isEmpty()) {"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of a deadline task cannot be empty.\");"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        return new Deadline(description, by);"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"     * Creates an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If description or at field for \u003ccode\u003eEvent\u003c/code\u003e is missing."},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"    public static Event createEvent(String fullCommand) throws DukeException {"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of a event task cannot be empty.\");"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"        String description;"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"        String at;"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"            description \u003d commandParameter.split(\"/at\")[0].trim();"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"            at \u003d commandParameter.split(\"/at\")[1].trim();"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The at field of the event task is missing.\");"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"        if (description.isEmpty()) {"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The description of an event task cannot be empty.\");"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        return new Event(description, at);"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"    private static String getCommandParameter(String fullCommand) {"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"        return fullCommand.replaceFirst(\"(?i)todo\", \"\")"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)deadline\", \"\")"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)event\", \"\")"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)done\", \"\")"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)delete\", \"\")"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"                .replaceFirst(\"(?i)list\", \"\")"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"                .trim();"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"     * Gets task index from user\u0027s full input string."},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"     * @return Task index."},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If task index is missing or invalid."},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"    public static int getTaskIndex(String fullCommand) throws DukeException {"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The task index is missing.\");"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"        int taskIndex;"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"            taskIndex \u003d Integer.parseInt(commandParameter);"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"        return taskIndex - 1;"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"     * Gets search string from user\u0027s full input string."},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"     * @return Search string."},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If search string is missing."},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"    public static String getSearchString(String fullCommand) throws DukeException {"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"        String searchString \u003d fullCommand.replaceFirst(\"find\", \"\").trim();"},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"        if (searchString.isEmpty()) {"},{"lineNumber":142,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The search string is missing.\");"},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"        return searchString;"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":147,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"e0260222"},"content":"     * Gets \u003ccode\u003eCommand\u003c/code\u003e object from user\u0027s full input string."},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":151,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eCommand\u003c/code\u003e object."},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"e0260222"},"content":"    public static Command parse(String fullCommand) {"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"        String command \u003d getCommand(fullCommand).toLowerCase();"},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"        switch (command) {"},{"lineNumber":156,"author":{"gitId":"e0260222"},"content":"        case \"bye\":"},{"lineNumber":157,"author":{"gitId":"e0260222"},"content":"            return new ByeCommand();"},{"lineNumber":158,"author":{"gitId":"e0260222"},"content":"        case \"todo\":"},{"lineNumber":159,"author":{"gitId":"e0260222"},"content":"            return new TodoCommand(fullCommand);"},{"lineNumber":160,"author":{"gitId":"e0260222"},"content":"        case \"deadline\":"},{"lineNumber":161,"author":{"gitId":"e0260222"},"content":"            return new DeadlineCommand(fullCommand);"},{"lineNumber":162,"author":{"gitId":"e0260222"},"content":"        case \"event\":"},{"lineNumber":163,"author":{"gitId":"e0260222"},"content":"            return new EventCommand(fullCommand);"},{"lineNumber":164,"author":{"gitId":"e0260222"},"content":"        case \"done\":"},{"lineNumber":165,"author":{"gitId":"e0260222"},"content":"            return new DoneCommand(fullCommand);"},{"lineNumber":166,"author":{"gitId":"e0260222"},"content":"        case \"delete\":"},{"lineNumber":167,"author":{"gitId":"e0260222"},"content":"            return new DeleteCommand(fullCommand);"},{"lineNumber":168,"author":{"gitId":"e0260222"},"content":"        case \"find\":"},{"lineNumber":169,"author":{"gitId":"e0260222"},"content":"            return new FindCommand(fullCommand);"},{"lineNumber":170,"author":{"gitId":"e0260222"},"content":"        case \"list\":"},{"lineNumber":171,"author":{"gitId":"e0260222"},"content":"            return new ListCommand();"},{"lineNumber":172,"author":{"gitId":"e0260222"},"content":"        default:"},{"lineNumber":173,"author":{"gitId":"e0260222"},"content":"            return new UnknownCommand();"},{"lineNumber":174,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":176}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.task.Todo;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import java.nio.file.Files;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import java.nio.file.Paths;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import java.util.Scanner;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":" * Contains methods that load tasks from the hard disk and save tasks to the hard disk."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    private final String filePath;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eStorage\u003c/code\u003e object."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * @param filePath Path of the text file used for storing app data."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public Storage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * Loads list of tasks from text file."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If file folder is unable to be created."},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    public ArrayList\u003cTask\u003e loadTasks(String filePath) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            Path path \u003d Paths.get(\"data/\");"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"            if (!(Files.exists(path))) {"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                Files.createDirectory(path);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        } catch (IOException e) {"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"I\u0027ve problem creating the save directory!\");"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        ArrayList\u003cString\u003e lines;"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        lines \u003d getLines(filePath);"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        for (String line : lines) {"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"            if (!(line.trim().isEmpty())) {"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"                tasks.add(createTask(line));"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        return tasks;"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"     * Saves information of all \u003ccode\u003eTasks\u003c/code\u003e objects to text file."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If text file is not found or inaccessible."},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    public void saveTasks(TaskList tasks) throws DukeException {"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        FileWriter fw;"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"            fw \u003d new FileWriter(filePath);"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"                String isDone \u003d getTaskStatus(tasks.getTask(i));"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"                String description \u003d tasks.getTask(i).getDescription();"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"                String lineToSave;"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"                if (tasks.getTask(i) instanceof Todo) {"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"                    lineToSave \u003d \"T\" + \" | \" + isDone + \" | \" + description + System.lineSeparator();"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"                } else if (tasks.getTask(i) instanceof Deadline) {"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"                    String by \u003d ((Deadline) tasks.getTask(i)).getBy();"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"                    lineToSave \u003d \"D\" + \" | \" + isDone + \" | \" + description + \" | \" + by + System.lineSeparator();"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"                } else if (tasks.getTask(i) instanceof Event) {"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"                    String at \u003d ((Event) tasks.getTask(i)).getAt();"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"                    String duration \u003d ((Event) tasks.getTask(i)).getDuration();"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"                    lineToSave \u003d \"E\" + \" | \" + isDone + \" | \" + description"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"                            + \" | \" + at + \" | \" + duration + System.lineSeparator();"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"                } else {"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"                    throw new DukeException(\"I\u0027ve problem saving to the file.\");"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"                fw.write(lineToSave);"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"            fw.close();"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"I\u0027ve problem reading the save file.\");"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"    private Task createTask(String line) throws DukeException {"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"        String taskType \u003d line.split(\"\\\\|\")[0].trim();"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"        String isDoneString \u003d line.split(\"\\\\|\")[1].trim();"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        String description \u003d line.split(\"\\\\|\")[2].trim();"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"        boolean isDone;"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"        isDone \u003d isDoneString.equals(\"1\");"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"        switch (taskType) {"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"        case \"D\":"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"            String by \u003d line.split(\"\\\\|\")[3].trim();"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"            return new Deadline(description, by, isDone);"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"        case \"E\":"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"            String at \u003d line.split(\"\\\\|\")[3].trim();"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"            String duration \u003d line.split(\"\\\\|\")[4].trim();"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"            return new Event(description, at, duration, isDone);"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"        case \"T\":"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"            return new Todo(description, isDone);"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"        default:"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"There is invalid data in the save file!\");"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"    private ArrayList\u003cString\u003e getLines(String filePath) throws DukeException {"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"            while (s.hasNext()) {"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"                result.add(s.nextLine());"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        } catch (IOException e) {"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"I\u0027ve problem reading the save file.\""},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"                    + \" Let\u0027s start with an empty task list instead.\");"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"        return result;"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"    private String getTaskStatus(Task task) {"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"        return (task.getIsDone() ? \"1\" : \"0\");"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":135}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Represents a task that a user wants to do. A \u003ccode\u003eDeadline\u003c/code\u003e object has a"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * description string, a boolean that indicates whether the task is done, and a by string"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * that indicates the deadline of the task."},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"public class Deadline extends Task {"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    private final LocalDateTime by;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"     * @param by Deadline of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    public Deadline(String description, String by) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"            this.by \u003d LocalDateTime.parse(by, formatter);"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The by field should be in yyyy-MM-dd HHmm format. E.g. 2020-12-25 1800\");"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     * @param by Deadline of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"     * @param isDone Completion status of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    public Deadline(String description, String by, boolean isDone) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        super(description, isDone);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"            this.by \u003d LocalDateTime.parse(by);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The by field should be in yyyy-MM-dd HHmm format. E.g. 2020-12-25 1800\");"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"     * Get the deadline of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     * @return Deadline of a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    public String getBy() {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        return by.toString();"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        return \"[D]\" + super.toString()"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"                + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\")) + \")\";"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":63}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Represents a task that a user wants to do. An \u003ccode\u003eEvent\u003c/code\u003e object has a"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * description string, a boolean that indicates whether the task is done, an at string"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * that indicates the start datetime of the task, and a duration string that indicates"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * the duration of the task."},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"public class Event extends Task {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    private final LocalDateTime at;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private final int duration;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     * Initializes an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     * @param description Description of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     * @param at Start datetime of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    public Event(String description, String at) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"            String startDate \u003d at.split(\" \")[0].trim();"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"            String startTime \u003d at.split(\" \")[1].trim();"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"            String startDateTime \u003d startDate + \" \" + startTime;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"            this.at \u003d LocalDateTime.parse(startDateTime, formatter);"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"            this.duration \u003d Integer.parseInt(at.split(\" \")[2].trim());"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The at field should be in yyyy-MM-dd HHmm DURATION_IN_MINUTES format.\""},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"                    + \" E.g. 2020-12-25 1800 60\");"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"     * Initializes an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * @param description Description of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     * @param at Start datetime of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"     * @param duration Duration of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"     * @param isDone Completion status of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    public Event(String description, String at, String duration, boolean isDone) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        super(description, isDone);"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"            this.at \u003d LocalDateTime.parse(at);"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"            this.duration \u003d Integer.parseInt(duration);"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"The at field should be in yyyy-MM-dd HHmm format. E.g. 2020-12-25 1800\");"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"     * Gets the start datetime of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"     * @return Start datetime of an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    public String getAt() {"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        return at.toString();"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"    public String getDuration() {"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        return String.valueOf(duration);"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"        return \"[E]\" + super.toString()"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"                + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\"))"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"                + \" to \""},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"                + at.plusMinutes(duration).format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\"))"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"                + \")\";"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":79}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":" * Represents a task that a user wants to do. A \u003ccode\u003eTask\u003c/code\u003e object has a"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":" * description string and a boolean that indicates whether the task is done. This"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":" * class defines the common behaviour that can be inherited by subclasses with specific"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * implementation of a task."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    private final String description;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    private boolean isDone;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    public Task(String description) {"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    "},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param isDone Completion status of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        this.description \u003d description;"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * Gets the description of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * @return Description of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    public String getDescription() {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        return description;"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"    public boolean getIsDone() {"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        return isDone;"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"     * Gets the status icon of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"     * @return Status icon of a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    public String getStatusIcon() {"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        //return tick or X symbol based on isDone value"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        return (isDone ? \"Y\" : \"N\");"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"     * Sets the completion status of a \u003ccode\u003eTask\u003c/code\u003e object to done."},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    public void setDone() {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        this.isDone \u003d true;"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getDescription();"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":68}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Manages the in-memory task list. It contains an ArrayList that stores"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" * individual \u003ccode\u003eTask\u003c/code\u003e objects and methods to perform operations"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * such as adding and deleting task from the Task List."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    private final ArrayList\u003cInteger\u003e searchResultIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    private boolean isInitialized \u003d false;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Instantiate a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"     * Get a \u003ccode\u003eTask\u003c/code\u003e object from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * @param index Index of Task in the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eTask\u003c\u003c/code\u003e object."},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    public Task getTask(int index) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        return tasks.get(index);"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * Add a task to the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"     * @param t \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    public void addTask(Task t) {"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        tasks.add(t);"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     * Remove a \u003ccode\u003eTask\u003c/code\u003e object from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"     * @param index Index of a \u003ccode\u003eTask\u003c/code\u003e in \u003ccode\u003eList\u003c/code\u003e."},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"     * @throws DukeException If index is invalid."},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    public void removeTask(int index) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"            tasks.remove(tasks.get(index));"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"            throw new DukeException(\"Invalid index\");"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"     * Get size of a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"     * @return Size of a \u003ccode\u003eList\u003c/code\u003e object."},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"    public int getSize() {"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        return tasks.size();"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"    public void clearSearchResultIndexes() {"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        searchResultIndexes.clear();"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"    public void addSearchResultIndex(int searchResultIndex) {"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"        searchResultIndexes.add(searchResultIndex);"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"    public ArrayList\u003cInteger\u003e getSearchResultIndexes() {"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"        return searchResultIndexes;"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"    public int getSearchResultIndex(int resultIndex) {"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"        return searchResultIndexes.get(resultIndex);"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"    public void setIsInitialized(boolean isInitialized) {"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"        this.isInitialized \u003d isInitialized;"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"    public boolean getIsInitialized() {"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"        return isInitialized;"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":96}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":" * Represents a task that a user wants to do. A \u003ccode\u003eTodo\u003c/code\u003e object has a"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":" * description string and a boolean that indicates whether the task is done."},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     * @param description Description of a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"     * @param isDone Completion status of a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        super(description, isDone);"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":31}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * Contains methods that interacts with the users such as obtaining commands"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * from user input and displaying messages to the users."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"public class Ui {"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    public static final String INDENT \u003d \"      \";"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * Get the input stream from the user."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     * @return Input stream from the user."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    public String readUserInput() {"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        System.out.print(\"You:  \");"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        return in.nextLine().trim();"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public void printLine() {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        System.out.println(LINE);"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    public void printIndentation() {"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        System.out.print(INDENT);"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    public void printWelcome() {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        String logo \u003d \" ____        _        \" + System.lineSeparator()"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"                + \"|  _ \\\\ _   _| | _____ \" + System.lineSeparator()"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"                + \"| | | | | | | |/ / _ \\\\\" + System.lineSeparator()"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"                + \"| |_| | |_| |   \u003c  __/\" + System.lineSeparator()"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\" + System.lineSeparator();"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        System.out.println(logo);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Duke: Hello! I\u0027m Duke, your personal chat bot.\");"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Duke: What can I do for you?\");"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    public void printError(String errorMessage) {"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Duke: OOPS!! \" + errorMessage);"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    public void printGoodbye() {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Duke: Bye! Hope to see you again soon.\");"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"    public void printAddedTask(TaskList tasks) {"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Duke: Got it! I have added this task:\");"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        printIndentation();"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"        System.out.println(tasks.getTask(tasks.getSize() - 1).toString());"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"        printIndentation();"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"    public void printRemovedTask(int size, String taskDescription) {"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Duke: Noted! I\u0027ve removed this task: \");"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        printIndentation();"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"        System.out.println(taskDescription);"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"        printIndentation();"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"    public void printDoneTask(Task task) {"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"        System.out.println(\"Duke: I have marked this task as done:\");"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"        printIndentation();"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"        System.out.println(task.toString());"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"    public void printTasks(TaskList tasks) {"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"        if (tasks.getSize() \u003d\u003d 0) {"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"            System.out.println(\"Duke: Sorry, there is no task in your list.\");"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"        } else {"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"            System.out.println(\"Duke: Here are the tasks in your list:\");"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"                printIndentation();"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"                System.out.println((i + 1) + \". \" + tasks.getTask(i).toString());"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"    public void printFilteredTasks(TaskList tasks) {"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"        ArrayList\u003cInteger\u003e searchResultIndexes \u003d tasks.getSearchResultIndexes();"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"        if (searchResultIndexes.size() \u003d\u003d 0) {"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"            System.out.println(\"Duke: Sorry, there is no matching task.\");"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"        } else {"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"            System.out.println(\"Duke: Here are the matching tasks in your list:\");"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"            for (int i \u003d 0; i \u003c searchResultIndexes.size(); i++) {"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"                printIndentation();"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"                System.out.println((i + 1) + \". \" + tasks.getTask(searchResultIndexes.get(i)).toString());"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"        printLine();"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":110}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Deadline class."},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"public class DeadlineTest {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    public void testGetDescription() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        Task testDeadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"Have lunch with John\", testDeadline.getDescription());"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    public void testGetIsDone() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        Task testDeadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        Task testDeadline2 \u003d new Deadline(\"Have lunch with John\", \"2020-12-25T18:00\", true);"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        assertFalse(testDeadline.getIsDone());"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        assertTrue(testDeadline2.getIsDone());"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    public void testToString() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        Task testDeadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        Task testDeadline3 \u003d new Deadline(\"Have lunch with John\", \"2020-12-25T18:00\", true);"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[D][N] Have lunch with John (by: 25 Dec 2020 6:00PM)\", testDeadline.toString());"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[D][Y] Have lunch with John (by: 25 Dec 2020 6:00PM)\", testDeadline3.toString());"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":37}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Event class."},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"public class EventTest {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    public void testGetDescription() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        Task testEvent \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"Have lunch with John\", testEvent.getDescription());"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    public void testGetIsDone() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        Task testEvent \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        Task testEvent2 \u003d new Event(\"Have lunch with John\", \"2020-09-25T18:00\","},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"                \"60\", true);"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        assertFalse(testEvent.getIsDone());"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        assertTrue(testEvent2.getIsDone());"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void testToString() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        Task testEvent \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        Task testEvent2 \u003d new Event(\"Have lunch with John\", \"2020-09-25T18:00\","},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"                \"60\", true);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[E][N] Have lunch with John (at: 25 Sep 2020 6:00PM to 25 Sep 2020 7:00PM)\","},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"                testEvent.toString());"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[E][Y] Have lunch with John (at: 25 Sep 2020 6:00PM to 25 Sep 2020 7:00PM)\","},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"                testEvent2.toString());"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":41}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Parser class."},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"public class ParserTest {"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    public void testGetCommand() {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"todo\", Parser.getCommand(\"todo Eat breakfast\"));"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"\", Parser.getCommand(\"\"));"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    public void testGetTaskIndex() throws DukeException {"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        assertEquals(2, Parser.getTaskIndex(\"delete 3\"));"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"            Parser.getTaskIndex(\"delete\");"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"            Parser.getTaskIndex(\"delete x\");"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        });"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":30}},{"path":"src/test/java/duke/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.Todo;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Task class."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class TaskTest {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private Task task \u003d new Todo(\"Have lunch with John\");"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    private Task task2 \u003d new Todo(\"Have lunch with John\", true);"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    public void testGetDescription() {"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"Have lunch with John\", task.getDescription());"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    public void testGetIsDone() {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        assertEquals(false, task.getIsDone());"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        assertEquals(true, task2.getIsDone());"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public void testToString() {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[T][N] Have lunch with John\", task.toString());"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        assertEquals(\"[T][Y] Have lunch with John\", task2.toString());"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":32}},{"path":"src/test/java/duke/TestTaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.task.Todo;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * JUnit tests for TaskList class."},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"public class TestTaskList {"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    public void testGetSize() {"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(new Todo(\"Have lunch with John\"));"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"        tasks.addTask(new Todo(\"Have lunch with Sam\"));"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        assertEquals(2, tasks.getSize());"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"bye"}],"authorContributionMap":{"e0260222":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"e0260222":1,"-":20}}]
