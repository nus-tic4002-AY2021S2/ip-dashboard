[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    archiveBaseName \u003d \"Duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":43}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Contains the methods for user to exit Duke."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the exit program command."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ui.printGoodbye();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns true so that Duke will exist after this command is executed."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public boolean isBye() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":29}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents a command that a user wants to execute. A \u003ccode\u003eCommand\u003c/code\u003e object contains"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * methods need to execute the user\u0027s command . This class defines the common behaviour that"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * can be inherited by subclasses with specific implementation of a Command."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Executes the user\u0027s command."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns false to prevent Duke from exiting after the command."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Subclasses should override this method to return true if Duke"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * needs to exit after the command."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean isBye() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":30}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Contains the methods for user to add deadline task."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Initializes a \u003ccode\u003eDeadlineCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public DeadlineCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the add deadline command."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        tasks.addTask(Parser.createDeadline(fullCommand));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":37}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Contains the methods for user to delete task."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Initializes a \u003ccode\u003eDeleteCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public DeleteCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the delete task command."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!(tasks.getIsInitialized())) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new DukeException(\"Please run the list or find command first.\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        int taskIndex \u003d Parser.getTaskIndex(fullCommand);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String taskDescription;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            taskDescription \u003d tasks.getTask(tasks.getSearchResultIndex(taskIndex)).toString();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            tasks.removeTask(tasks.getSearchResultIndex(taskIndex));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            tasks.setIsInitialized(false);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ui.printRemovedTask(tasks.getSize(), taskDescription);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":47}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Contains the methods for user to mark task as done."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Initializes a \u003ccode\u003eDoneCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public DoneCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the mark task as done command."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!(tasks.getIsInitialized())) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new DukeException(\"Please run the list or find command first.\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        int taskIndex \u003d Parser.getTaskIndex(fullCommand);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            tasks.getTask(tasks.getSearchResultIndex(taskIndex)).setDone();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            tasks.setIsInitialized(false);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        ui.printDoneTask(tasks.getTask(tasks.getSearchResultIndex(taskIndex)));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":45}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Contains the methods for user to add event task."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class EventCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Initializes an \u003ccode\u003eEventCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public EventCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the add event command."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        tasks.addTask(Parser.createEvent(fullCommand));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":37}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Contains the methods for user to find tasks based on keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Initializes an \u003ccode\u003eFindCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public FindCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the find tasks command."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String searchString \u003d Parser.getSearchString(fullCommand).toLowerCase();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String[] searchWords \u003d searchString.split(\" \");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        tasks.setIsInitialized(true);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        tasks.clearSearchResultIndexes();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            String taskDescription \u003d tasks.getTask(i).getDescription().toLowerCase();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            for (String searchWord : searchWords) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                if (taskDescription.contains(searchWord.trim())) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    tasks.addSearchResultIndex(i);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ui.printFilteredTasks(tasks);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":47}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Contains the methods for user to list all tasks."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the list all tasks command."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        tasks.setIsInitialized(true);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        tasks.clearSearchResultIndexes();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            tasks.addSearchResultIndex(i);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        ui.printTasks(tasks);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":26}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Contains the methods for user to add todo task."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TodoCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Initializes a \u003ccode\u003eTodoCommand\u003c/code\u003e object."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public TodoCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the add todo command."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        tasks.addTask(Parser.createTodo(fullCommand));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        tasks.setIsInitialized(false);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ui.printAddedTask(tasks);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":37}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Contains the method to inform users if the command is invalid."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class UnknownCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the invalid input command."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ui.printError(\"I\u0027m sorry, I don\u0027t know what that means.\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":21}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import duke.command.ByeCommand;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import duke.command.EventCommand;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import duke.command.TodoCommand;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import duke.command.UnknownCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import duke.task.Deadline;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import duke.task.Event;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import duke.task.Todo;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains methods that deal with parsing user commands to extract meaningful details from them."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Gets the command word from user\u0027s input string."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @return Command word from user\u0027s input string."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static String getCommand(String fullCommand) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return fullCommand.split(\" \")[0];"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Creates a \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return \u003ccode\u003eTodo\u003c/code\u003e object."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DukeException If description for \u003ccode\u003eTodo\u003c/code\u003e is missing."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Todo createTodo(String fullCommand) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The description of a todo task cannot be empty.\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return new Todo(commandParameter);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @return \u003ccode\u003eDeadline\u003c/code\u003e object."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @throws DukeException If description or by field for \u003ccode\u003eDeadline\u003c/code\u003e is missing."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static Deadline createDeadline(String fullCommand) throws DukeException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The description of a deadline task cannot be empty.\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String description;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String by;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            description \u003d commandParameter.split(\"/by\")[0].trim();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            by \u003d commandParameter.split(\"/by\")[1].trim();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The by field of the deadline task is missing.\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (description.isEmpty()) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The description of a deadline task cannot be empty.\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new Deadline(description, by);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Creates an \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @return \u003ccode\u003eEvent\u003c/code\u003e object."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws DukeException If description or at field for \u003ccode\u003eEvent\u003c/code\u003e is missing."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static Event createEvent(String fullCommand) throws DukeException {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The description of a event task cannot be empty.\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String description;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String at;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            description \u003d commandParameter.split(\"/at\")[0].trim();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            at \u003d commandParameter.split(\"/at\")[1].trim();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The at field of the event task is missing.\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (description.isEmpty()) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The description of an event task cannot be empty.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Event(description, at);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static String getCommandParameter(String fullCommand) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return fullCommand.replaceFirst(\"(?i)todo\", \"\")"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .replaceFirst(\"(?i)deadline\", \"\")"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .replaceFirst(\"(?i)event\", \"\")"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .replaceFirst(\"(?i)done\", \"\")"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                .replaceFirst(\"(?i)delete\", \"\")"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                .replaceFirst(\"(?i)list\", \"\")"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                .trim();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Gets task index from user\u0027s full input string."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @return Task index."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @throws DukeException If task index is missing or invalid."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static int getTaskIndex(String fullCommand) throws DukeException {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String commandParameter \u003d getCommandParameter(fullCommand);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (commandParameter.isEmpty()) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The task index is missing.\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        int taskIndex;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            taskIndex \u003d Integer.parseInt(commandParameter);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The task index is invalid.\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return taskIndex - 1;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Gets search string from user\u0027s full input string."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * @return Search string."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @throws DukeException If search string is missing."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static String getSearchString(String fullCommand) throws DukeException {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String searchString \u003d fullCommand.replaceFirst(\"find\", \"\").trim();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        if (searchString.isEmpty()) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new DukeException(\"The search string is missing.\");"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return searchString;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Gets \u003ccode\u003eCommand\u003c/code\u003e object from user\u0027s full input string."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * @param fullCommand User\u0027s full input string."},{"lineNumber":151,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eCommand\u003c/code\u003e object."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public static Command parse(String fullCommand) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String command \u003d getCommand(fullCommand).toLowerCase();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        switch (command) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        case \"bye\":"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            return new ByeCommand();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        case \"todo\":"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            return new TodoCommand(fullCommand);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        case \"deadline\":"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            return new DeadlineCommand(fullCommand);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        case \"event\":"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return new EventCommand(fullCommand);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        case \"done\":"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            return new DoneCommand(fullCommand);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        case \"delete\":"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return new DeleteCommand(fullCommand);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        case \"find\":"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            return new FindCommand(fullCommand);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        case \"list\":"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return new UnknownCommand();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":11,"-":165}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Manages the in-memory task list. It contains an ArrayList that stores"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * individual \u003ccode\u003eTask\u003c/code\u003e objects and methods to perform operations"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * such as adding and deleting task from the Task List."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final ArrayList\u003cInteger\u003e searchResultIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private boolean isInitialized \u003d false;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     * Initializes a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Instantiate a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * @param tasks List of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"     * Get a \u003ccode\u003eTask\u003c/code\u003e object from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param index Index of Task in the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * @return \u003ccode\u003eTask\u003c\u003c/code\u003e object."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Task getTask(int index) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return tasks.get(index);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * Add a task to the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @param t \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void addTask(Task t) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        tasks.add(t);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Remove a \u003ccode\u003eTask\u003c/code\u003e object from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"     * @param index Index of a \u003ccode\u003eTask\u003c/code\u003e in \u003ccode\u003eList\u003c/code\u003e."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws DukeException If index is invalid."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void removeTask(int index) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            tasks.remove(tasks.get(index));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new DukeException(\"Invalid index\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"     * Get size of a \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"     * @return Size of a \u003ccode\u003eList\u003c/code\u003e object."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public int getSize() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return tasks.size();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void clearSearchResultIndexes() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        searchResultIndexes.clear();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void addSearchResultIndex(int searchResultIndex) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        searchResultIndexes.add(searchResultIndex);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public ArrayList\u003cInteger\u003e getSearchResultIndexes() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return searchResultIndexes;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int getSearchResultIndex(int resultIndex) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return searchResultIndexes.get(resultIndex);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setIsInitialized(boolean isInitialized) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.isInitialized \u003d isInitialized;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean getIsInitialized() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return isInitialized;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":9,"-":87}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Deadline class."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class DeadlineTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void testGetDescription() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Task testDeadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(\"Have lunch with John\", testDeadline.getDescription());"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void testGetIsDone() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Task testDeadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Task testDeadline2 \u003d new Deadline(\"Have lunch with John\", \"2020-12-25T18:00\", true);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(testDeadline.getIsDone());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(testDeadline2.getIsDone());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void testToString() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Task testDeadline \u003d new Deadline(\"Have lunch with John\", \"2020-12-25 1800\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Task testDeadline3 \u003d new Deadline(\"Have lunch with John\", \"2020-12-25T18:00\", true);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(\"[D][N] Have lunch with John (by: 25 Dec 2020 6:00PM)\", testDeadline.toString());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(\"[D][Y] Have lunch with John (by: 25 Dec 2020 6:00PM)\", testDeadline3.toString());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":36}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Event class."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class EventTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void testGetDescription() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Task testEvent \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(\"Have lunch with John\", testEvent.getDescription());"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void testGetIsDone() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Task testEvent \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Task testEvent2 \u003d new Event(\"Have lunch with John\", \"2020-09-25T18:00\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \"60\", true);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(testEvent.getIsDone());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(testEvent2.getIsDone());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void testToString() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Task testEvent \u003d new Event(\"Have lunch with John\", \"2020-09-25 1800 60\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Task testEvent2 \u003d new Event(\"Have lunch with John\", \"2020-09-25T18:00\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"                \"60\", true);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(\"[E][N] Have lunch with John (at: 25 Sep 2020 6:00PM to 25 Sep 2020 7:00PM)\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"                testEvent.toString());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(\"[E][Y] Have lunch with John (at: 25 Sep 2020 6:00PM to 25 Sep 2020 7:00PM)\","},{"lineNumber":39,"author":{"gitId":"-"},"content":"                testEvent2.toString());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":40}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Parser class."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ParserTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void testGetCommand() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(\"todo\", Parser.getCommand(\"todo Eat breakfast\"));"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertEquals(\"\", Parser.getCommand(\"\"));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void testGetTaskIndex() throws DukeException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(2, Parser.getTaskIndex(\"delete 3\"));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            Parser.getTaskIndex(\"delete\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Parser.getTaskIndex(\"delete x\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":29}},{"path":"src/test/java/duke/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.Todo;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * JUnit tests for Task class."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TaskTest {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Task task \u003d new Todo(\"Have lunch with John\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private Task task2 \u003d new Todo(\"Have lunch with John\", true);"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void testGetDescription() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(\"Have lunch with John\", task.getDescription());"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void testGetIsDone() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(false, task.getIsDone());"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(true, task2.getIsDone());"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void testToString() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(\"[T][N] Have lunch with John\", task.toString());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(\"[T][Y] Have lunch with John\", task2.toString());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":31}},{"path":"src/test/java/duke/TestTaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.Todo;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" * JUnit tests for TaskList class."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TestTaskList {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void testGetSize() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        tasks.addTask(new Todo(\"Have lunch with John\"));"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        tasks.addTask(new Todo(\"Have lunch with Sam\"));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(2, tasks.getSize());"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":19}}]
