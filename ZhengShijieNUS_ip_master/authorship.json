[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"# duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"ZhengShijieNUS"},"content":"1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"ZhengShijieNUS":2,"-":24}},{"path":"Test/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"class ParserTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    String cmdTodo\u003d\"todo read book\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    String cmdDeadline\u003d\"deadline watch movie /by 2020-09-14\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    String cmdEvent\u003d\"event meeting with John /at 2020-09-20\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    String cmdList \u003d \"list\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    String cmdDelete \u003d \"delete 1\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    String cmdDone \u003d \"done 1\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    String cmdUnknown \u003d \"what is this?\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    void getCommand() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Command todo \u003d new TodoCommand(\"read book\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Command deadline \u003d new DeadlineCommand(\"watch movie\",\"2020-09-14\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Command event \u003d new EventCommand(\"meeting with John\",\"2020-09-20\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Command list \u003d new ListCommand();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Command delete \u003d new DeleteCommand(\"1\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Command done \u003d new DoneCommand(\"1\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Command unknown \u003d new OtherCommand(\"what\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            assertEquals(todo.getCMDType(), Parser.getCommand(cmdTodo).getCMDType());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            assertEquals(deadline.getCMDType(),Parser.getCommand(cmdDeadline).getCMDType());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            assertEquals(event.getCMDType(),Parser.getCommand(cmdEvent).getCMDType());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            assertEquals(list.getCMDType(),Parser.getCommand(cmdList).getCMDType());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            assertEquals(delete.getCMDType(),Parser.getCommand(cmdDelete).getCMDType());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            assertEquals(done.getCMDType(),Parser.getCommand(cmdDone).getCMDType());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            assertEquals(unknown.getCMDType(),Parser.getCommand(cmdUnknown).getCMDType());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            assertEquals(todo.getCMDContent(), Parser.getCommand(cmdTodo).getCMDContent());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            assertEquals(deadline.getCMDContent(),Parser.getCommand(cmdDeadline).getCMDContent());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            assertEquals(event.getCMDContent(),Parser.getCommand(cmdEvent).getCMDContent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            assertEquals(delete.getCMDContent(),Parser.getCommand(cmdDelete).getCMDContent());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            assertEquals(done.getCMDContent(),Parser.getCommand(cmdDone).getCMDContent());"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }catch(Exception e){"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            e.getMessage();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":1,"-":46}},{"path":"Test/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Deadlines;"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Events;"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.ToDos;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"class TaskListTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ToDos todo1 \u003d new ToDos(\"read book\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ToDos todo2 \u003d new ToDos(\"read two book\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Deadlines deadline1 \u003d new Deadlines(\"watch movies\", \"2020-09-14\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Events event1 \u003d new Events(\"book a room\", \"2020-09-15\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void findKeywordList() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        ArrayList\u003cTask\u003e a \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        TaskList original \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        String keyword \u003d \"book\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        a.add(todo1);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        a.add(todo2);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        a.add(event1);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        original.add(todo1);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        original.add(todo2);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        original.add(deadline1);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        original.add(event1);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(a, original.findKeywordList(keyword));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":5,"-":33}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"ZhengShijieNUS"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"}"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"group \u0027org.example\u0027"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"version \u00271.0-SNAPSHOT\u0027"},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"sourceCompatibility \u003d 1.8"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"repositories {"},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"    mavenCentral()"},{"lineNumber":13,"author":{"gitId":"ZhengShijieNUS"},"content":"}"},{"lineNumber":14,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhengShijieNUS"},"content":"dependencies {"},{"lineNumber":16,"author":{"gitId":"ZhengShijieNUS"},"content":"    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"},{"lineNumber":17,"author":{"gitId":"ZhengShijieNUS"},"content":"}"},{"lineNumber":18,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":19,"author":{"gitId":"ZhengShijieNUS"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"ZhengShijieNUS"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"ZhengShijieNUS"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":21}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":"The duke applet is a task management applet. It supports the following features"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"### Feature 1 "},{"lineNumber":8,"author":{"gitId":"-"},"content":"_To **add a Todo task**. A Todo task is a basic type of task which is without time restriction._ "},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"### Feature 2 "},{"lineNumber":11,"author":{"gitId":"-"},"content":"_To **add a Deadline task**. A Deadline task is the task with a expiration date._"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"### Feature 3 "},{"lineNumber":14,"author":{"gitId":"-"},"content":"_To **add a Event task**. A Event task is the task with a specific time that the event occurs._"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"### Feature 4 "},{"lineNumber":17,"author":{"gitId":"-"},"content":"_**List down** all task exist._"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"### Feature 5 "},{"lineNumber":20,"author":{"gitId":"-"},"content":"_**Set task** status to be **done**._"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"### Feature 6 "},{"lineNumber":23,"author":{"gitId":"-"},"content":"_**Delete a task** from the list._"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"### Feature 7 "},{"lineNumber":26,"author":{"gitId":"-"},"content":"_**Find specific tasks** with **keyword** entered._"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Feature 8 "},{"lineNumber":29,"author":{"gitId":"-"},"content":"_**Auto saving** and **loading** existing task file._"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"### `todo \u003csomething\u003e` - add a todo task in the list"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"This command will add a todo task in the list with specific content"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":39,"author":{"gitId":"-"},"content":"```"},{"lineNumber":40,"author":{"gitId":"-"},"content":"todo read a book"},{"lineNumber":41,"author":{"gitId":"-"},"content":"```"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":44,"author":{"gitId":"-"},"content":"```"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":46,"author":{"gitId":"-"},"content":"[T][✗] read a book"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Now you have 1 tasks in the list."},{"lineNumber":48,"author":{"gitId":"-"},"content":"```"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"### `deadline \u003csomething\u003e /by \u003csometime\u003e` - add a deadline task in the list"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"This command will add a deadline task in the list with specific content and deadline time. The time is supposed to be in format \"yyyy-MM-dd\"."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":55,"author":{"gitId":"-"},"content":"```"},{"lineNumber":56,"author":{"gitId":"-"},"content":"deadline read a book /by 2019-09-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"```"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"```"},{"lineNumber":61,"author":{"gitId":"-"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"[D][✗] read a book (by: Sep 20 2019)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"Now you have 2 tasks in the list."},{"lineNumber":64,"author":{"gitId":"-"},"content":"```"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"### `event \u003csomething\u003e /at \u003csometime\u003e` - add a event task in the list"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"This command will add a event task in the list with specific content and occuring time. The time is supposed to be in format \"yyyy-MM-dd\"."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":71,"author":{"gitId":"-"},"content":"```"},{"lineNumber":72,"author":{"gitId":"-"},"content":"event read a book /at 2019-09-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"```"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"```"},{"lineNumber":77,"author":{"gitId":"-"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":78,"author":{"gitId":"-"},"content":"[E][✗] read a book (at: Sep 20 2019)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"Now you have 3 tasks in the list."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"### `list` - list down all tasks in the list"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"This command will list down all tasks in the list."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":89,"author":{"gitId":"-"},"content":"```"},{"lineNumber":90,"author":{"gitId":"-"},"content":"list"},{"lineNumber":91,"author":{"gitId":"-"},"content":"```"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":94,"author":{"gitId":"-"},"content":"```"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Here are the tasks in your list:"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1.[T][✗] read a book"},{"lineNumber":97,"author":{"gitId":"-"},"content":"2.[D][✗] read a book (by: Sep 20 2019)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"3.[E][✗] read a book (at: Sep 20 2019)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"```"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"### `done \u003cindex\u003e` - set the status of the specific task to be done. "},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"This command will set the task to be done."},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":108,"author":{"gitId":"-"},"content":"```"},{"lineNumber":109,"author":{"gitId":"-"},"content":"done 2"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":113,"author":{"gitId":"-"},"content":"```"},{"lineNumber":114,"author":{"gitId":"-"},"content":"Nice! I\u0027ve marked this task as done: "},{"lineNumber":115,"author":{"gitId":"-"},"content":"[D][✓] read a book (by: Sep 20 2019)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"```"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"### `delete \u003cindex\u003e` - delete the task with the specific index. "},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"This command will delete the task with the specific index in the list."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":124,"author":{"gitId":"-"},"content":"```"},{"lineNumber":125,"author":{"gitId":"-"},"content":"delete 2"},{"lineNumber":126,"author":{"gitId":"-"},"content":"```"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":129,"author":{"gitId":"-"},"content":"```"},{"lineNumber":130,"author":{"gitId":"-"},"content":"Noted. I\u0027ve removed this task: "},{"lineNumber":131,"author":{"gitId":"-"},"content":"[D][✓] read a book (by: Sep 20 2019)"},{"lineNumber":132,"author":{"gitId":"-"},"content":"Now you have 2 tasks in the list."},{"lineNumber":133,"author":{"gitId":"-"},"content":"```"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### `find \u003csomething\u003e` - find the tasks with the keyword. "},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"This command will find all the tasks with the keyword specified in the list."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":141,"author":{"gitId":"-"},"content":"```"},{"lineNumber":142,"author":{"gitId":"-"},"content":"find book"},{"lineNumber":143,"author":{"gitId":"-"},"content":"```"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":146,"author":{"gitId":"-"},"content":"```"},{"lineNumber":147,"author":{"gitId":"-"},"content":"Here are the matching tasks in your list:"},{"lineNumber":148,"author":{"gitId":"-"},"content":"1.[T][✗] read a book"},{"lineNumber":149,"author":{"gitId":"-"},"content":"2.[E][✗] read a book (at: Sep 20 2019)"},{"lineNumber":150,"author":{"gitId":"-"},"content":"```"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"ZhengShijieNUS":1,"-":151}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":2,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem ##########################################################################"},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem"},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem ##########################################################################"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":13,"author":{"gitId":"ZhengShijieNUS"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":14,"author":{"gitId":"ZhengShijieNUS"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":15,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":17,"author":{"gitId":"ZhengShijieNUS"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""},{"lineNumber":18,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":19,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem Find java.exe"},{"lineNumber":20,"author":{"gitId":"ZhengShijieNUS"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":21,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":22,"author":{"gitId":"ZhengShijieNUS"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":23,"author":{"gitId":"ZhengShijieNUS"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":24,"author":{"gitId":"ZhengShijieNUS"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":25,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":26,"author":{"gitId":"ZhengShijieNUS"},"content":"echo."},{"lineNumber":27,"author":{"gitId":"ZhengShijieNUS"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":28,"author":{"gitId":"ZhengShijieNUS"},"content":"echo."},{"lineNumber":29,"author":{"gitId":"ZhengShijieNUS"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":30,"author":{"gitId":"ZhengShijieNUS"},"content":"echo location of your Java installation."},{"lineNumber":31,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":32,"author":{"gitId":"ZhengShijieNUS"},"content":"goto fail"},{"lineNumber":33,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":34,"author":{"gitId":"ZhengShijieNUS"},"content":":findJavaFromJavaHome"},{"lineNumber":35,"author":{"gitId":"ZhengShijieNUS"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":36,"author":{"gitId":"ZhengShijieNUS"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":37,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":38,"author":{"gitId":"ZhengShijieNUS"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":39,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":40,"author":{"gitId":"ZhengShijieNUS"},"content":"echo."},{"lineNumber":41,"author":{"gitId":"ZhengShijieNUS"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":42,"author":{"gitId":"ZhengShijieNUS"},"content":"echo."},{"lineNumber":43,"author":{"gitId":"ZhengShijieNUS"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":44,"author":{"gitId":"ZhengShijieNUS"},"content":"echo location of your Java installation."},{"lineNumber":45,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":46,"author":{"gitId":"ZhengShijieNUS"},"content":"goto fail"},{"lineNumber":47,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":48,"author":{"gitId":"ZhengShijieNUS"},"content":":init"},{"lineNumber":49,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":50,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":51,"author":{"gitId":"ZhengShijieNUS"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":52,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":53,"author":{"gitId":"ZhengShijieNUS"},"content":":win9xME_args"},{"lineNumber":54,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem Slurp the command line arguments."},{"lineNumber":55,"author":{"gitId":"ZhengShijieNUS"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":56,"author":{"gitId":"ZhengShijieNUS"},"content":"set _SKIP\u003d2"},{"lineNumber":57,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":58,"author":{"gitId":"ZhengShijieNUS"},"content":":win9xME_args_slurp"},{"lineNumber":59,"author":{"gitId":"ZhengShijieNUS"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":60,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":61,"author":{"gitId":"ZhengShijieNUS"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":62,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":63,"author":{"gitId":"ZhengShijieNUS"},"content":":execute"},{"lineNumber":64,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem Setup the command line"},{"lineNumber":65,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":66,"author":{"gitId":"ZhengShijieNUS"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":67,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":68,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem Execute Gradle"},{"lineNumber":69,"author":{"gitId":"ZhengShijieNUS"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":70,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":71,"author":{"gitId":"ZhengShijieNUS"},"content":":end"},{"lineNumber":72,"author":{"gitId":"ZhengShijieNUS"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":73,"author":{"gitId":"ZhengShijieNUS"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":74,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":75,"author":{"gitId":"ZhengShijieNUS"},"content":":fail"},{"lineNumber":76,"author":{"gitId":"ZhengShijieNUS"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":77,"author":{"gitId":"ZhengShijieNUS"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":78,"author":{"gitId":"ZhengShijieNUS"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":79,"author":{"gitId":"ZhengShijieNUS"},"content":"exit /b 1"},{"lineNumber":80,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":81,"author":{"gitId":"ZhengShijieNUS"},"content":":mainEnd"},{"lineNumber":82,"author":{"gitId":"ZhengShijieNUS"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":83,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":84,"author":{"gitId":"ZhengShijieNUS"},"content":":omega"}],"authorContributionMap":{"ZhengShijieNUS":84}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"rootProject.name \u003d \u0027Duke\u0027"},{"lineNumber":2,"author":{"gitId":"ZhengShijieNUS"},"content":""}],"authorContributionMap":{"ZhengShijieNUS":2}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.EventCommand;"},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.OtherCommand;"},{"lineNumber":13,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":14,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Deadlines;"},{"lineNumber":15,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Events;"},{"lineNumber":16,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Task;"},{"lineNumber":17,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.ToDos;"},{"lineNumber":18,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"ZhengShijieNUS"},"content":"    static final String HELLO \u003d \" Hello! I\u0027m Duke\\n\" + \" What can I do for you?\";"},{"lineNumber":22,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":23,"author":{"gitId":"ZhengShijieNUS"},"content":"    static final String BYE \u003d \" Bye. Hope to see you again soon!\";"},{"lineNumber":24,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Ui ui;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Storage storage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private TaskList tasks;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param relativePath constructor, generate Duke with an relative path"},{"lineNumber":31,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Duke(String relativePath) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.storage \u003d new Storage(relativePath);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param args A commandline starting args."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        new Duke(\"/data/duke.txt\").run();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"ZhengShijieNUS"},"content":"     * The normal run method."},{"lineNumber":47,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void run() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ui.showLine();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ui.show(HELLO);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ui.showLine();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        1. If a file exist, load it to memory, otherwise create a new file"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            storage.load(tasks);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            ui.show(e.getMessage());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        while (true) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            String userInput \u003d ui.getCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            Command cmd \u003d null;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"            /*"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            2.Parse user command to readable format"},{"lineNumber":69,"author":{"gitId":"-"},"content":"             */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                cmd \u003d Parser.getCommand(userInput);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            } catch (DukeException e) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                ui.show(e.getMessage());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            } catch (Exception e) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                ui.show(\"☹ OOPS!!! Unknown internal error occurs.\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"            /*"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            3.Check the user command whether is legal."},{"lineNumber":82,"author":{"gitId":"-"},"content":"             */"},{"lineNumber":83,"author":{"gitId":"ZhengShijieNUS"},"content":"            if (cmd instanceof OtherCommand \u0026\u0026 cmd.getCmdType().equalsIgnoreCase(\"bye\")) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            } else if (cmd instanceof OtherCommand) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                ui.show(new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\").getMessage());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"            /*"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            4.Process the user command"},{"lineNumber":92,"author":{"gitId":"-"},"content":"             */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            processCommand(cmd, tasks, ui);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"            /*"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            5. Update the result to the file and  save it."},{"lineNumber":97,"author":{"gitId":"-"},"content":"             */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                storage.save(tasks);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            } catch (IOException e) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                ui.show(\"☹ OOPS!!!Updating file is fail.\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"            ui.showLine();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        ui.show(BYE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ui.showLine();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    private static void processCommand(Command cmd, TaskList tasks, Ui ui) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        int index;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        int i \u003d 1;"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"ZhengShijieNUS"},"content":"        switch (cmd.getCmdType()) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        case \"list\":"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            ui.show(\"Here are the tasks in your list:\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            for (Task t : tasks.getWholeList()) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                ui.show(i + \".\" + t.toString());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                i++;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        case \"find\":"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            ui.show(\"Here are the matching tasks in your list:\");"},{"lineNumber":125,"author":{"gitId":"ZhengShijieNUS"},"content":"            for (Task t : tasks.findKeywordList(cmd.getCmdContent())) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                ui.show(i + \".\" + t.toString());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                i++;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        case \"done\":"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            index \u003d ((DoneCommand) cmd).getIndex();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            tasks.get(index - 1).setDone(true);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            ui.show(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            ui.show(tasks.get(index - 1).toString());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        case \"delete\":"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            index \u003d ((DeleteCommand) cmd).getIndex();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            ui.show(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            ui.show(tasks.get(index - 1).toString());"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            tasks.remove(index - 1);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            ui.show(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        case \"todo\":"},{"lineNumber":144,"author":{"gitId":"ZhengShijieNUS"},"content":"            ToDos t \u003d new ToDos(cmd.getCmdContent());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            tasks.add(t);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            ui.printTask(t, tasks);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        case \"deadline\":"},{"lineNumber":149,"author":{"gitId":"ZhengShijieNUS"},"content":"            Deadlines d \u003d new Deadlines(cmd.getCmdContent(), ((DeadlineCommand) cmd).getTime());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            tasks.add(d);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            ui.printTask(d, tasks);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        case \"event\":"},{"lineNumber":154,"author":{"gitId":"ZhengShijieNUS"},"content":"            Events e \u003d new Events(cmd.getCmdContent(), ((EventCommand) cmd).getTime());"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            tasks.add(e);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            ui.printTask(e, tasks);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":158,"author":{"gitId":"ZhengShijieNUS"},"content":"        default:"},{"lineNumber":159,"author":{"gitId":"ZhengShijieNUS"},"content":"            break;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":34,"-":129}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.EventCommand;"},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.FindCommand;"},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.ListCommand;"},{"lineNumber":13,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.OtherCommand;"},{"lineNumber":14,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.command.TodoCommand;"},{"lineNumber":15,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":16,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":17,"author":{"gitId":"ZhengShijieNUS"},"content":"public class Parser {"},{"lineNumber":18,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":19,"author":{"gitId":"ZhengShijieNUS"},"content":"    private static String[] commandSplit(String s, String splitBy) {"},{"lineNumber":20,"author":{"gitId":"ZhengShijieNUS"},"content":"        return s.split(splitBy);"},{"lineNumber":21,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":23,"author":{"gitId":"ZhengShijieNUS"},"content":"    public static Command getCommand(String userInput) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"ZhengShijieNUS"},"content":"        String[] cmd \u003d Parser.commandSplit(userInput, \"\\\\s+\");"},{"lineNumber":25,"author":{"gitId":"ZhengShijieNUS"},"content":"        switch(cmd[0]) {"},{"lineNumber":26,"author":{"gitId":"ZhengShijieNUS"},"content":"        case \"list\":"},{"lineNumber":27,"author":{"gitId":"ZhengShijieNUS"},"content":"            return new ListCommand();"},{"lineNumber":28,"author":{"gitId":"ZhengShijieNUS"},"content":"        case \"done\":"},{"lineNumber":29,"author":{"gitId":"ZhengShijieNUS"},"content":"            try {"},{"lineNumber":30,"author":{"gitId":"ZhengShijieNUS"},"content":"                return new DoneCommand(userInput.split(\" \")[1]);"},{"lineNumber":31,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":32,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The task does not exist.\");"},{"lineNumber":33,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":34,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! Please specify the task need to be done.\");"},{"lineNumber":35,"author":{"gitId":"ZhengShijieNUS"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"ZhengShijieNUS"},"content":"        case \"delete\":"},{"lineNumber":37,"author":{"gitId":"ZhengShijieNUS"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"ZhengShijieNUS"},"content":"                return new DeleteCommand(userInput.split(\" \")[1]);"},{"lineNumber":39,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":40,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The task does not exist.\");"},{"lineNumber":41,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":42,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! Please specify the number of the task need to be delete.\");"},{"lineNumber":43,"author":{"gitId":"ZhengShijieNUS"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"ZhengShijieNUS"},"content":"        case \"todo\":"},{"lineNumber":45,"author":{"gitId":"ZhengShijieNUS"},"content":"            try {"},{"lineNumber":46,"author":{"gitId":"ZhengShijieNUS"},"content":"                return new TodoCommand(userInput.substring(5));"},{"lineNumber":47,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":48,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":49,"author":{"gitId":"ZhengShijieNUS"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"ZhengShijieNUS"},"content":"        case \"deadline\":"},{"lineNumber":51,"author":{"gitId":"ZhengShijieNUS"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"ZhengShijieNUS"},"content":"                String deadlineSpliter \u003d \"/by\";"},{"lineNumber":53,"author":{"gitId":"ZhengShijieNUS"},"content":"                String[] deadlineContent \u003d userInput.split(deadlineSpliter);"},{"lineNumber":54,"author":{"gitId":"ZhengShijieNUS"},"content":"                LocalDate.parse(deadlineContent[1].trim(), DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":55,"author":{"gitId":"ZhengShijieNUS"},"content":"                return new DeadlineCommand("},{"lineNumber":56,"author":{"gitId":"ZhengShijieNUS"},"content":"                        deadlineContent[0].substring(9, deadlineContent[0].length() - 1),"},{"lineNumber":57,"author":{"gitId":"ZhengShijieNUS"},"content":"                        deadlineContent[1].trim());"},{"lineNumber":58,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":59,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":60,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":61,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The keyword /by is missing.\");"},{"lineNumber":62,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (java.time.format.DateTimeParseException e) {"},{"lineNumber":63,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The time format is illegal.Format should be in \\\"yyyy-MM-dd\\\" \");"},{"lineNumber":64,"author":{"gitId":"ZhengShijieNUS"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"ZhengShijieNUS"},"content":"        case \"event\":"},{"lineNumber":66,"author":{"gitId":"ZhengShijieNUS"},"content":"            try {"},{"lineNumber":67,"author":{"gitId":"ZhengShijieNUS"},"content":"                String eventSpliter \u003d \"/at\";"},{"lineNumber":68,"author":{"gitId":"ZhengShijieNUS"},"content":"                String[] eventContent \u003d userInput.split(eventSpliter);"},{"lineNumber":69,"author":{"gitId":"ZhengShijieNUS"},"content":"                LocalDate.parse(eventContent[1].trim(), DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":70,"author":{"gitId":"ZhengShijieNUS"},"content":"                return new EventCommand("},{"lineNumber":71,"author":{"gitId":"ZhengShijieNUS"},"content":"                        eventContent[0].substring(6, eventContent[0].length() - 1),"},{"lineNumber":72,"author":{"gitId":"ZhengShijieNUS"},"content":"                        eventContent[1].trim());"},{"lineNumber":73,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":74,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");"},{"lineNumber":75,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":76,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The keyword /at is missing.\");"},{"lineNumber":77,"author":{"gitId":"ZhengShijieNUS"},"content":"            } catch (java.time.format.DateTimeParseException e) {"},{"lineNumber":78,"author":{"gitId":"ZhengShijieNUS"},"content":"                throw new DukeException(\"☹ OOPS!!! The time format is illegal.Format should be in \\\"yyyy-MM-dd\\\"\");"},{"lineNumber":79,"author":{"gitId":"ZhengShijieNUS"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"ZhengShijieNUS"},"content":"        case \"find\":"},{"lineNumber":81,"author":{"gitId":"ZhengShijieNUS"},"content":"            return new FindCommand(userInput.substring(5));"},{"lineNumber":82,"author":{"gitId":"ZhengShijieNUS"},"content":"        default:"},{"lineNumber":83,"author":{"gitId":"ZhengShijieNUS"},"content":"            return new OtherCommand(cmd[0]);"},{"lineNumber":84,"author":{"gitId":"ZhengShijieNUS"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":87,"author":{"gitId":"ZhengShijieNUS"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":87}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Deadlines;"},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Events;"},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.ToDos;"},{"lineNumber":14,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    static final String CURRENTWORKINGDIR \u003d System.getProperty(\"user.dir\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private String path;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private File f;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param path constructor for storage class"},{"lineNumber":22,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Storage(String path) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.path \u003d CURRENTWORKINGDIR + path;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.f \u003d new File(path);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param tasks the current stored task list"},{"lineNumber":30,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @throws IOException any exception related to IO"},{"lineNumber":31,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @throws DukeException any defined exception"},{"lineNumber":32,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void load(TaskList tasks) throws IOException, DukeException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (f.exists()) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            while (s.hasNext()) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                String line \u003d s.nextLine();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                String[] contents \u003d line.split(\"\\\\|\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"                String taskDate \u003d \"unknown date\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                String taskType \u003d contents[0];"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                boolean taskDoneStatus \u003d checkDoneStatus(contents[1]);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                String taskDescription \u003d contents[2];"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                if (contents.length \u003d\u003d 4) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    taskDate \u003d contents[3];"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                    switch (taskType) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                    case \"T\":"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                        tasks.add(createToDos(taskDescription, taskDoneStatus));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                    case \"D\":"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                        tasks.add(createDeadlines(taskDescription, taskDate, taskDoneStatus));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                    case \"E\":"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                        tasks.add(createEvents(taskDescription, taskDate, taskDoneStatus));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                    default:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                        throw new DukeException(\"☹ OOPS!!!There\u0027s unknown tasks type in the file.\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                } catch (Exception e) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                    throw new DukeException(\"☹ OOPS!!!There is error in the file,please check the format.\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"ZhengShijieNUS"},"content":"            createDukeTxt(path);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param tasks the current task list"},{"lineNumber":74,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @throws IOException any exception related to IO"},{"lineNumber":75,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void save(TaskList tasks) throws IOException {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Iterator\u003cTask\u003e i \u003d tasks.iterator();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        while (i.hasNext()) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            fw.write(i.next().toSavingString());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            fw.write(\"\\n\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        fw.close();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"ZhengShijieNUS"},"content":"    private static void createDukeTxt(String path) throws IOException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String folderPath \u003d CURRENTWORKINGDIR + \"/data\";"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        File folder \u003d new File(folderPath);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!folder.exists() \u0026\u0026 !folder.isDirectory()) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            folder.mkdirs();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        fw.close();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private static Events createEvents(String taskDescription, String taskDate, boolean taskDoneStatus) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Events e \u003d new Events(taskDescription, taskDate);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        e.setDone(taskDoneStatus);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return e;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private static Deadlines createDeadlines(String taskDescription, String taskDate, boolean taskDoneStatus) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Deadlines d \u003d new Deadlines(taskDescription, taskDate);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        d.setDone(taskDoneStatus);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return d;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private static ToDos createToDos(String taskDescription, boolean taskDoneStatus) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        ToDos t \u003d new ToDos(taskDescription);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        t.setDone(taskDoneStatus);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return t;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static boolean checkDoneStatus(String content) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return content.equalsIgnoreCase(\"1\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":21,"-":99}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"    public TaskList() {"},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhengShijieNUS"},"content":"    public Task get(int i) {"},{"lineNumber":16,"author":{"gitId":"ZhengShijieNUS"},"content":"        return taskList.get(i);"},{"lineNumber":17,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":19,"author":{"gitId":"ZhengShijieNUS"},"content":"    public void remove(int i) {"},{"lineNumber":20,"author":{"gitId":"ZhengShijieNUS"},"content":"        taskList.remove(i);"},{"lineNumber":21,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":23,"author":{"gitId":"ZhengShijieNUS"},"content":"    public void add(Task t) {"},{"lineNumber":24,"author":{"gitId":"ZhengShijieNUS"},"content":"        taskList.add(t);"},{"lineNumber":25,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":27,"author":{"gitId":"ZhengShijieNUS"},"content":"    public Iterator iterator() {"},{"lineNumber":28,"author":{"gitId":"ZhengShijieNUS"},"content":"        return taskList.iterator();"},{"lineNumber":29,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":31,"author":{"gitId":"ZhengShijieNUS"},"content":"    public ArrayList\u003cTask\u003e getWholeList() {"},{"lineNumber":32,"author":{"gitId":"ZhengShijieNUS"},"content":"        return this.taskList;"},{"lineNumber":33,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":35,"author":{"gitId":"ZhengShijieNUS"},"content":"    public int size() {"},{"lineNumber":36,"author":{"gitId":"ZhengShijieNUS"},"content":"        return taskList.size();"},{"lineNumber":37,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":39,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param keyword the key input word"},{"lineNumber":41,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @return"},{"lineNumber":42,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ZhengShijieNUS"},"content":"    public ArrayList\u003cTask\u003e findKeywordList(String keyword) {"},{"lineNumber":44,"author":{"gitId":"ZhengShijieNUS"},"content":"        ArrayList\u003cTask\u003e keywordTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"ZhengShijieNUS"},"content":"        for (Task t:this.taskList) {"},{"lineNumber":46,"author":{"gitId":"ZhengShijieNUS"},"content":"            if (t.getTaskDescription().contains(keyword)) {"},{"lineNumber":47,"author":{"gitId":"ZhengShijieNUS"},"content":"                keywordTaskList.add(t);"},{"lineNumber":48,"author":{"gitId":"ZhengShijieNUS"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"ZhengShijieNUS"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"ZhengShijieNUS"},"content":"        return keywordTaskList;"},{"lineNumber":51,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":53,"author":{"gitId":"ZhengShijieNUS"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":53}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private Scanner scanner;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Ui() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getCommand() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return scanner.nextLine();"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void show(String s) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        System.out.println(s);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void showLine() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        show(\"________________________________________________________\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param t A normal task"},{"lineNumber":28,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param tasks the stored task list"},{"lineNumber":29,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void printTask(Task t, TaskList tasks) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        System.out.println(t.toString());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":7,"-":28}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public abstract class Command {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    protected String type;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    protected String content;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"    public String getCmdContent() {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        return content;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"    public String getCmdType() {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        return type;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":3,"-":11}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"    private String time;"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param content deadline content"},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param time the deadline time"},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":"    public DeadlineCommand(String content, String time) {"},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"        this.time \u003d time;"},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"        this.type \u003d \"deadline\";"},{"lineNumber":13,"author":{"gitId":"ZhengShijieNUS"},"content":"        this.content \u003d content;"},{"lineNumber":14,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhengShijieNUS"},"content":"    public String getTime() {"},{"lineNumber":17,"author":{"gitId":"ZhengShijieNUS"},"content":"        return time;"},{"lineNumber":18,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ZhengShijieNUS"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":19}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    private int index;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param i the index"},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public DeleteCommand(String i) {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        type \u003d \"delete\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        content \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        index \u003d Integer.parseInt(i);"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public int getIndex() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":4,"-":14}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class DoneCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    private int index;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param i the index"},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public DoneCommand(String i) {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        type \u003d \"done\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        content \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        index \u003d Integer.parseInt(i);"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public int getIndex() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":4,"-":15}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"public class EventCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"    private String time;"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param content the content of the task"},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param time the event time of task"},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":"    public EventCommand(String content, String time) {"},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":"        this.time \u003d time;"},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"        this.type \u003d \"event\";"},{"lineNumber":13,"author":{"gitId":"ZhengShijieNUS"},"content":"        this.content \u003d content;"},{"lineNumber":14,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhengShijieNUS"},"content":"    public String getTime() {"},{"lineNumber":17,"author":{"gitId":"ZhengShijieNUS"},"content":"        return time;"},{"lineNumber":18,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ZhengShijieNUS"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":19}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param keyword the command keyword"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        type \u003d \"find\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        this.content \u003d keyword;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":4,"-":8}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":"     * the constructor of list command"},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public ListCommand() {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        type \u003d \"list\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        content \u003d \"\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":4,"-":8}},{"path":"src/main/java/duke/command/OtherCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class OtherCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    public OtherCommand(String type) {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"        this.type \u003d type;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":1,"-":6}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhengShijieNUS"},"content":"public class TodoCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @param content the content to create an todo command"},{"lineNumber":6,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"ZhengShijieNUS"},"content":"    public TodoCommand(String content) {"},{"lineNumber":8,"author":{"gitId":"ZhengShijieNUS"},"content":"        type \u003d \"todo\";"},{"lineNumber":9,"author":{"gitId":"ZhengShijieNUS"},"content":"        this.content \u003d content;"},{"lineNumber":10,"author":{"gitId":"ZhengShijieNUS"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ZhengShijieNUS"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhengShijieNUS"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":12}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"-"},"content":"     * @param message create a customized exception with certain message"},{"lineNumber":6,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":1,"-":9}},{"path":"src/main/java/duke/tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Deadlines extends Task {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private LocalDate deadline;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     * @param taskDescription description of the deadline task"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * @param deadline deadline time of the deadline task"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * create a deadline task"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public Deadlines(String taskDescription, String deadline) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(taskDescription);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        super.taskType \u003d \"[D]\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.deadline \u003d LocalDate.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public String toSavingString() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return super.toSavingString() + \"|\" + deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":1,"-":28}},{"path":"src/main/java/duke/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Events extends Task {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private LocalDate eventTime;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     * @param taskDescription description of the event"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * @param eventTime the time of the event"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * To create a event task"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public Events(String taskDescription, String eventTime) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(taskDescription);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        super.taskType \u003d \"[E]\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.eventTime \u003d LocalDate.parse(eventTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return super.toString() + \" (at: \" + eventTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public String toSavingString() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return super.toSavingString() + \"|\" + eventTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":1,"-":28}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    protected String taskType;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    protected boolean isDone \u003d false;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    protected String taskDescription;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    protected String taskSymbol \u003d \"[✗]\";"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     * @param taskDescription Description on the task detail."},{"lineNumber":11,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public Task(String taskDescription) {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @return convert the task to a readable string"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return taskType + taskSymbol + \" \" + taskDescription;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param done set the task done status"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setDone(boolean done) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.isDone \u003d done;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        setSymbol();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private void setSymbol() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (isDone) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            this.taskSymbol \u003d \"[✓]\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            this.taskSymbol \u003d \"[✗]\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"ZhengShijieNUS"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ZhengShijieNUS"},"content":"     * @return a saving method used to save string"},{"lineNumber":42,"author":{"gitId":"ZhengShijieNUS"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toSavingString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String doneStatus \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return taskType.charAt(1) + \"|\" + doneStatus + \"|\" + taskDescription;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public String getTaskDescription() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this.taskDescription;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":4,"-":47}},{"path":"src/main/java/duke/tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhengShijieNUS"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class ToDos extends Task {"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"-"},"content":"     * @param taskDescription create a ToDos task with description of the task"},{"lineNumber":7,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public ToDos(String taskDescription) {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(taskDescription);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        super.taskType \u003d \"[T]\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhengShijieNUS":1,"-":12}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"ZhengShijieNUS"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"ZhengShijieNUS"},"content":"java -classpath ../bin duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"ZhengShijieNUS":2,"-":36}}]
