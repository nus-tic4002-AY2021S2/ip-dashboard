[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"# duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"dgc5213":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"test {"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"    useJUnitPlatform()"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"    testLogging {"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"        showExceptions true"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"        exceptionFormat \"full\""},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"        showCauses true"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        showStackTraces true"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"        showStandardStreams \u003d false"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"application {"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"    mainClassName \u003d \"moneytracker.MoneyTracker\""},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"shadowJar {"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"    archiveBaseName \u003d \"MoneyTracker\""},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"    archiveClassifier \u003d null"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"checkstyle {"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"run{"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"    enableAssertions \u003d true"},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"    standardInput \u003d System.in"},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":50}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":"This product is not meant for end-users and therefore there is no user-friendly installer. Please refer to the Setting up section below to learn how to set up the project."},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"#Starting the program"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"Using IntelliJ"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"1.\tFind the project in the Project Explorer (usually located at the left side)"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e * If the Project Explorer is not visible, press `ALT`+`1` for Windows/Linux, `CMD`+`1` for macOS to open the Project Explorer tab"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"2.\tGo to the `src` folder and locate the duke file"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"3.\tRight click the file and select Run `duke.main()`"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"4.\tThe program now should run on the `Console` (usually located at the bottom side)"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"5.\tNow you can interact with the program through the `Console`"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"Using Command Line"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"1.\t\u0027Build\u0027 the project using IntelliJ"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"2.\tOpen the Terminal/Command Prompt"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"3.\tcd into the project’s `out\\artifacts\\ip_jar`"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"4.\tType `java -jar ip.jar`  then Enter to execute "},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"5.\tNow you can interact with the program through the CLI"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"- Adding a Todo task: todo"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"- Adding a Deadline task: deadline"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"- Adding an Event task: event"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"- Listing task information: list"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"- Finding all tasks containing any keyword: find"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"- Deleting a task : delete"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"- Mark as Done of a task: done"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"- View details of a task : view"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"- Clearing all entries : clear"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"- Exiting the program : bye"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"- Loading the data"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"- Saving the data"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"Notes about the command format:"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"- Words in **UPPER_CASE** are the parameters to be supplied by the user."},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"`E.g. DESCRIPTIONS in the command todo TASK DESCRIPTIONS`."},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"Order of parameters are fixed."},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"### Feature 1: Adding a Todo task: todo"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"Adds a Todo task. ToDos: tasks without any date/time attached to it `e.g., visit new theme park`"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"Format: `todo` **TASK DESCRIPTIONS**"},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"Example of usage: "},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":"`todo borrow book`"},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":"Expected outcome:"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"`Got it. I\u0027ve added this task:`\u003cbr /\u003e"},{"lineNumber":61,"author":{"gitId":"dgc5213"},"content":" \u0026nbsp; `[T][✘] borrow book`\u003cbr /\u003e"},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"`Now you have 13 tasks in the list.`"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":" \u003cbr /\u003e"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":" ### Feature 2: Adding a Deadline task: deadline"},{"lineNumber":67,"author":{"gitId":"dgc5213"},"content":" Adds a Deadline task. Deadlines: tasks that need to be done before a specific date `e.g., submit report by 2020-10-23`"},{"lineNumber":68,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":" ## Usage"},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":71,"author":{"gitId":"dgc5213"},"content":" Format: `deadline` **TASK DESCRIPTIONS** `/by` **SPECIFIC DATE** (FORMAT:yyyy-MM-dd)"},{"lineNumber":72,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":73,"author":{"gitId":"dgc5213"},"content":" Example of usage: "},{"lineNumber":74,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":75,"author":{"gitId":"dgc5213"},"content":"`deadline return book /by 2020-12-12`"},{"lineNumber":76,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":" Expected outcome:"},{"lineNumber":78,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":79,"author":{"gitId":"dgc5213"},"content":" `Got it. I\u0027ve added this task:`\u003cbr /\u003e"},{"lineNumber":80,"author":{"gitId":"dgc5213"},"content":"  \u0026nbsp;   `[D][✘] return book (by: 2020年12月12日星期六)`\u003cbr /\u003e"},{"lineNumber":81,"author":{"gitId":"dgc5213"},"content":" `Now you have 15 tasks in the list.`\u003cbr /\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":" "},{"lineNumber":83,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":84,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":85,"author":{"gitId":"dgc5213"},"content":" ### Feature 3: Adding an Event task: event"},{"lineNumber":86,"author":{"gitId":"dgc5213"},"content":" Adds an Event task. Events: tasks that start at a specific time and ends at a specific time `e.g., team project meeting at 2020-10-23 10:00`"},{"lineNumber":87,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":88,"author":{"gitId":"dgc5213"},"content":" ## Usage"},{"lineNumber":89,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":90,"author":{"gitId":"dgc5213"},"content":" Format: `event` **TASK DESCRIPTIONS** `/at` **SPECIFIC DATE AND TIME** (FORMAT:yyyy-MM-dd\u0027T\u0027HH:mm)"},{"lineNumber":91,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":92,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":93,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":94,"author":{"gitId":"dgc5213"},"content":"`event project meeting /at 2020-12-12 10:00`"},{"lineNumber":95,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":96,"author":{"gitId":"dgc5213"},"content":"Expected outcome:"},{"lineNumber":97,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":98,"author":{"gitId":"dgc5213"},"content":"`Got it. I\u0027ve added this task:`\u003cbr /\u003e"},{"lineNumber":99,"author":{"gitId":"dgc5213"},"content":"  \u0026nbsp;   `[E][✘] project meeting (at: 星期六, 12月12日, 2020 10:00:00 上午)`\u003cbr /\u003e"},{"lineNumber":100,"author":{"gitId":"dgc5213"},"content":"`Now you have 17 tasks in the list.`\u003cbr /\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"dgc5213"},"content":" ### Feature 4: Listing task information: list"},{"lineNumber":105,"author":{"gitId":"dgc5213"},"content":" Display the text entered by the user back to the user when requested. The list contains the task details."},{"lineNumber":106,"author":{"gitId":"-"},"content":" "},{"lineNumber":107,"author":{"gitId":"-"},"content":" ## Usage"},{"lineNumber":108,"author":{"gitId":"-"},"content":" "},{"lineNumber":109,"author":{"gitId":"dgc5213"},"content":" Format: `list` "},{"lineNumber":110,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":111,"author":{"gitId":"dgc5213"},"content":"Example of usage: "},{"lineNumber":112,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":113,"author":{"gitId":"dgc5213"},"content":"`list`"},{"lineNumber":114,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":115,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":116,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":117,"author":{"gitId":"dgc5213"},"content":"`Here are the tasks in your list:`\u003cbr /\u003e"},{"lineNumber":118,"author":{"gitId":"dgc5213"},"content":"`1.[T][✓] write a program`\u003cbr /\u003e"},{"lineNumber":119,"author":{"gitId":"dgc5213"},"content":"`2.[E][✓] visit zoo (at: 星期二, 11月10日, 2020 10:30:00 上午)`\u003cbr /\u003e"},{"lineNumber":120,"author":{"gitId":"dgc5213"},"content":"`3.[D][✓] read book (by: 2020年11月23日星期一)`\u003cbr /\u003e"},{"lineNumber":121,"author":{"gitId":"dgc5213"},"content":"`4.[T][✓] meet friends`\u003cbr /\u003e"},{"lineNumber":122,"author":{"gitId":"dgc5213"},"content":"`5.[E][✓] be happy (at: 星期六, 10月10日, 2020 11:11:00 上午)`\u003cbr /\u003e"},{"lineNumber":123,"author":{"gitId":"dgc5213"},"content":"`6.[D][✘] to submit assignment (by: 2020年10月11日星期日)`\u003cbr /\u003e"},{"lineNumber":124,"author":{"gitId":"dgc5213"},"content":"`7.[D][✓] check coding (by: 2020年9月10日星期四)`\u003cbr /\u003e"},{"lineNumber":125,"author":{"gitId":"dgc5213"},"content":"`8.[T][✘] add book to list`\u003cbr /\u003e"},{"lineNumber":126,"author":{"gitId":"dgc5213"},"content":"`9.[T][✓] checking`\u003cbr /\u003e"},{"lineNumber":127,"author":{"gitId":"dgc5213"},"content":"`10.[E][✘] class (at: 星期六, 12月12日, 2020 11:00:00 上午)`\u003cbr /\u003e"},{"lineNumber":128,"author":{"gitId":"dgc5213"},"content":"`11.[D][✓] submit assignment (by: 2020年10月12日星期一)`\u003cbr /\u003e"},{"lineNumber":129,"author":{"gitId":"dgc5213"},"content":"`12.[T][✘] add more function`\u003cbr /\u003e"},{"lineNumber":130,"author":{"gitId":"dgc5213"},"content":"`13.[T][✘] borrow book`\u003cbr /\u003e"},{"lineNumber":131,"author":{"gitId":"dgc5213"},"content":"`14.[T][✘] return book`\u003cbr /\u003e"},{"lineNumber":132,"author":{"gitId":"dgc5213"},"content":"`15.[D][✘] return book (by: 2020年12月12日星期六)`\u003cbr /\u003e"},{"lineNumber":133,"author":{"gitId":"dgc5213"},"content":"`16.[D][✘] read book (by: 2020年12月23日星期三)`\u003cbr /\u003e"},{"lineNumber":134,"author":{"gitId":"dgc5213"},"content":"`17.[E][✘] project meeting (at: 星期六, 12月12日, 2020 10:00:00 上午)`\u003cbr /\u003e"},{"lineNumber":135,"author":{"gitId":"dgc5213"},"content":"`18.[E][✘] class meeting (at: 星期三, 12月23日, 2020 09:00:00 上午)`\u003cbr /\u003e"},{"lineNumber":136,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":137,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":138,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":139,"author":{"gitId":"dgc5213"},"content":" ### Feature 5: Finding all tasks containing any keyword: find"},{"lineNumber":140,"author":{"gitId":"dgc5213"},"content":"Finds tasks which contain any of the given keywords."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"dgc5213"},"content":" ## Usage"},{"lineNumber":143,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":144,"author":{"gitId":"dgc5213"},"content":" Format: `find` **KEYWORD** [MORE_KEYWORDS]"},{"lineNumber":145,"author":{"gitId":"-"},"content":" "},{"lineNumber":146,"author":{"gitId":"-"},"content":" Example of usage: "},{"lineNumber":147,"author":{"gitId":"-"},"content":" "},{"lineNumber":148,"author":{"gitId":"dgc5213"},"content":"`find book`"},{"lineNumber":149,"author":{"gitId":"-"},"content":" "},{"lineNumber":150,"author":{"gitId":"-"},"content":" Expected outcome:"},{"lineNumber":151,"author":{"gitId":"-"},"content":" "},{"lineNumber":152,"author":{"gitId":"dgc5213"},"content":" `Here are the matching tasks in your list:`\u003cbr /\u003e"},{"lineNumber":153,"author":{"gitId":"dgc5213"},"content":" `1.[D][✓] read book (by: 2020年11月23日星期一)`\u003cbr /\u003e"},{"lineNumber":154,"author":{"gitId":"dgc5213"},"content":" `2.[T][✘] add book to list`\u003cbr /\u003e"},{"lineNumber":155,"author":{"gitId":"dgc5213"},"content":" `3.[T][✘] borrow book`\u003cbr /\u003e"},{"lineNumber":156,"author":{"gitId":"dgc5213"},"content":" `4.[T][✘] return book`\u003cbr /\u003e"},{"lineNumber":157,"author":{"gitId":"dgc5213"},"content":" `5.[D][✘] return book (by: 2020年12月12日星期六)`\u003cbr /\u003e"},{"lineNumber":158,"author":{"gitId":"dgc5213"},"content":" `6.[D][✘] read book (by: 2020年12月23日星期三)`\u003cbr /\u003e"},{"lineNumber":159,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":160,"author":{"gitId":"dgc5213"},"content":" \u003cbr /\u003e"},{"lineNumber":161,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":162,"author":{"gitId":"dgc5213"},"content":" ### Feature 6: Deleting a task : delete"},{"lineNumber":163,"author":{"gitId":"dgc5213"},"content":"Deletes the specified task from the task list. Irreversible."},{"lineNumber":164,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":165,"author":{"gitId":"dgc5213"},"content":" ## Usage"},{"lineNumber":166,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":167,"author":{"gitId":"dgc5213"},"content":" Format: `delete` **INDEX**"},{"lineNumber":168,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":169,"author":{"gitId":"dgc5213"},"content":" Select the task to delete based on the specified INDEX. The index refers to the index number shown in the most recent listing."},{"lineNumber":170,"author":{"gitId":"dgc5213"},"content":"  "},{"lineNumber":171,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":172,"author":{"gitId":"dgc5213"},"content":" Example of usage: "},{"lineNumber":173,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":174,"author":{"gitId":"dgc5213"},"content":" `list `\u003cbr /\u003e"},{"lineNumber":175,"author":{"gitId":"dgc5213"},"content":" `delete 4 `\u003cbr /\u003e"},{"lineNumber":176,"author":{"gitId":"dgc5213"},"content":" Deletes the 4th task in the task list."},{"lineNumber":177,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":178,"author":{"gitId":"dgc5213"},"content":" Expected outcome:"},{"lineNumber":179,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":180,"author":{"gitId":"dgc5213"},"content":" `Noted. I\u0027ve removed this task: `\u003cbr /\u003e"},{"lineNumber":181,"author":{"gitId":"dgc5213"},"content":"   \u0026nbsp;   `[T][✘] write a song`\u003cbr /\u003e"},{"lineNumber":182,"author":{"gitId":"dgc5213"},"content":" `Now you have 3 tasks in the list.`\u003cbr /\u003e"},{"lineNumber":183,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":184,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":185,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":186,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":187,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":188,"author":{"gitId":"dgc5213"},"content":" ### Feature 7: Mark as Done of a task: done"},{"lineNumber":189,"author":{"gitId":"dgc5213"},"content":" Mark specified task as done."},{"lineNumber":190,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":191,"author":{"gitId":"dgc5213"},"content":" ## Usage"},{"lineNumber":192,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":193,"author":{"gitId":"dgc5213"},"content":" Format: `done` **INDEX**"},{"lineNumber":194,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":195,"author":{"gitId":"dgc5213"},"content":" Mark as Done of the task at the specified INDEX. The index refers to the index number shown in the most recent listing."},{"lineNumber":196,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":197,"author":{"gitId":"dgc5213"},"content":" Example of usage: "},{"lineNumber":198,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":199,"author":{"gitId":"dgc5213"},"content":"  `list `\u003cbr /\u003e"},{"lineNumber":200,"author":{"gitId":"dgc5213"},"content":"  `done 4 `\u003cbr /\u003e"},{"lineNumber":201,"author":{"gitId":"dgc5213"},"content":"  Marks the 4th task in the task list as done."},{"lineNumber":202,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":203,"author":{"gitId":"dgc5213"},"content":" Expected outcome:"},{"lineNumber":204,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":205,"author":{"gitId":"dgc5213"},"content":" `Nice! I\u0027ve marked this task as done: `\u003cbr /\u003e"},{"lineNumber":206,"author":{"gitId":"dgc5213"},"content":" `[✓] set a meeting`"},{"lineNumber":207,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":208,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":209,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":210,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":211,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":212,"author":{"gitId":"dgc5213"},"content":" ### Feature 8: View details of a task : view"},{"lineNumber":213,"author":{"gitId":"dgc5213"},"content":" Displays the details of the specified task."},{"lineNumber":214,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":215,"author":{"gitId":"dgc5213"},"content":" ## Usage"},{"lineNumber":216,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":217,"author":{"gitId":"dgc5213"},"content":" Format: `view` **INDEX**"},{"lineNumber":218,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":219,"author":{"gitId":"dgc5213"},"content":" Views the task at the specified INDEX. The index refers to the index number shown in the most recent listing."},{"lineNumber":220,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":221,"author":{"gitId":"dgc5213"},"content":" Example of usage: "},{"lineNumber":222,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":223,"author":{"gitId":"dgc5213"},"content":"  `list `\u003cbr /\u003e"},{"lineNumber":224,"author":{"gitId":"dgc5213"},"content":"  `view 4 `\u003cbr /\u003e"},{"lineNumber":225,"author":{"gitId":"dgc5213"},"content":"  Views the 4th task in the task list."},{"lineNumber":226,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":227,"author":{"gitId":"dgc5213"},"content":" Expected outcome:"},{"lineNumber":228,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":229,"author":{"gitId":"dgc5213"},"content":" `Nice! Here is the task ready to view:`\u003cbr /\u003e"},{"lineNumber":230,"author":{"gitId":"dgc5213"},"content":" `[T][✓] set a meeting`"},{"lineNumber":231,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":232,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":233,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":234,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":235,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":236,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":237,"author":{"gitId":"dgc5213"},"content":" ### Feature 9: Clearing all entries : clear"},{"lineNumber":238,"author":{"gitId":"dgc5213"},"content":"Clears all entries from the address book."},{"lineNumber":239,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":240,"author":{"gitId":"dgc5213"},"content":" ## Usage"},{"lineNumber":241,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":242,"author":{"gitId":"dgc5213"},"content":" Format: `clear` "},{"lineNumber":243,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":244,"author":{"gitId":"dgc5213"},"content":" Example of usage: "},{"lineNumber":245,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":246,"author":{"gitId":"dgc5213"},"content":"  `clear `\u003cbr /\u003e"},{"lineNumber":247,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":248,"author":{"gitId":"dgc5213"},"content":" Expected outcome:"},{"lineNumber":249,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":250,"author":{"gitId":"dgc5213"},"content":" `The Task list initially:`\u003cbr /\u003e"},{"lineNumber":251,"author":{"gitId":"dgc5213"},"content":" `[[T][✓] have dinner, [T][✘] buy book, [T][✘] visit friends, [T][✓] set a meeting]`\u003cbr /\u003e"},{"lineNumber":252,"author":{"gitId":"dgc5213"},"content":" `The Task list after using clear() method:[]`"},{"lineNumber":253,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":254,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":255,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":256,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":257,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":258,"author":{"gitId":"dgc5213"},"content":" ### Feature 10: Exiting the program : bye"},{"lineNumber":259,"author":{"gitId":"dgc5213"},"content":" Exits the program."},{"lineNumber":260,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":261,"author":{"gitId":"dgc5213"},"content":" ## Usage"},{"lineNumber":262,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":263,"author":{"gitId":"dgc5213"},"content":" Format: `bye` "},{"lineNumber":264,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":265,"author":{"gitId":"dgc5213"},"content":"Example of usage: "},{"lineNumber":266,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":267,"author":{"gitId":"dgc5213"},"content":"  `bye `\u003cbr /\u003e"},{"lineNumber":268,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":269,"author":{"gitId":"dgc5213"},"content":" Expected outcome:"},{"lineNumber":270,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":271,"author":{"gitId":"dgc5213"},"content":" `Bye. Hope to see you again soon!`\u003cbr /\u003e"},{"lineNumber":272,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":273,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":274,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":275,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":276,"author":{"gitId":"dgc5213"},"content":"### Feature 11: Loading the data"},{"lineNumber":277,"author":{"gitId":"dgc5213"},"content":"Auto-load the data from the hard disk when duke starts up. \u003cbr /\u003e"},{"lineNumber":278,"author":{"gitId":"dgc5213"},"content":"The file name and location `e.g., [project_root]/data/duke.txt`"},{"lineNumber":279,"author":{"gitId":"dgc5213"},"content":" "},{"lineNumber":280,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"dgc5213"},"content":"### Feature 12: Saving the data"},{"lineNumber":283,"author":{"gitId":"dgc5213"},"content":"Save the tasks in the hard disk automatically whenever the task list changes. There is no need to save manually. If there is no existing txt file, or data folder. The program can auto create a txt file and save the data in the hard disk."},{"lineNumber":284,"author":{"gitId":"dgc5213"},"content":"\u003cbr /\u003e"}],"authorContributionMap":{"dgc5213":259,"-":25}},{"path":"src/main/java/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"T | 0 | checking code"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":"T | 1 | do a push"},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"E | 0 | have dinner at Tom\u0027s home | 2020-10-11T23:00"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"D | 0 | read book | 2020-10-11"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"T | 1 | return book"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"E | 0 | go to school, buy book | 2020-12-12T12:00"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"T | 0 | testing"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"E | 0 | sfhsk | 2020-10-10T11:11"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"T | 0 | sdhfksjh"}],"authorContributionMap":{"dgc5213":9}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import duke.programexit.ProgramExit;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"    // A string to hold the data file name which contains all tasks and their details"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"    public static String filename \u003d \"src/main/java/data/duke.txt\";"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static void main(String[] args)  {"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"        ProgramExit programExit \u003d new ProgramExit();"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"        Storage store \u003d new Storage();"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"        // reading the date from task data file"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"        // if this is the first time, a message will be shown that no data file is found"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        store.readFromFile(filename);"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"        Ui.sayWelcome();"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"        while (!programExit.getIsExit()) {"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"            parser.getCommand(Ui.readUserCommand(), ui, programExit, taskList);"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"            store.saveToFile(filename);"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":""}],"authorContributionMap":{"dgc5213":42,"-":4}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import duke.commands.FindCommand;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import duke.commands.ListCommand;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import duke.programexit.ProgramExit;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"/** ."},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":" * Parser: deals with making sense of the user command"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":" */"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"     * A method to parser a String."},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"     * Assume that the Task Details start from the second words. This method can filter out the first words."},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"     * @param line A String that holds the user input."},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"     * @throws DukeException If Task Detail is Empty/Null:"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"     *          Returning to Main MenuShow the message to user and notify the user."},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"     * */"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"    public static String filterTaskDetails(String line) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"        String taskDetail;"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"        int len \u003d line.split(\" \").length; // to check who many words"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"        String[] lineArr \u003d line.split(\" \", 2);"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"        String commandFirstWord \u003d line.split(\" \")[0].toLowerCase();"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"        if (len \u003e 1) {"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"            taskDetail \u003d lineArr[1].trim();  // filter out the first words"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"            throw new DukeException(\"OOPS!!! The description of a \" + commandFirstWord + \" cannot be empty.\");"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"        return taskDetail;"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"     * A method to parser a String and get the second word from the string."},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"     * @param input A String that holds the user input."},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"    public String getSecondWord(String input) {"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"        String commandSecondWord \u003d input.split(\" \")[1];"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"        return commandSecondWord;"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"     * A method to parser a String and process necessary steps and tasks based on the user inputs."},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"     * Assume that the Task Details start from the second words. This method can filter out the first words."},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"     *  @param input       A String that holds the user input."},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":"     * @param ui          A Ui that show message to user."},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"     * @param programExit A ProgramExit  to check if it is needed to exit the program."},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":"     * @param taskList    A Task TodoList contains the ArrayList of Task objects,"},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"     *                    contains the task list e.g., it has operations to add/delete tasks in the list"},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":"    public void getCommand(String input, Ui ui, ProgramExit programExit, TaskList taskList) {"},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":"        String commandFirstWord \u003d input.split(\" \")[0].toLowerCase();"},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"        //extract the first word of the user input, and lowercase it."},{"lineNumber":61,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":"            switch (commandFirstWord) {"},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"            case \"bye\":"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":"                ui.sayBye();"},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":"                programExit.toExit();"},{"lineNumber":67,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"dgc5213"},"content":"            case \"list\":"},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":"                new ListCommand().executeCommand();"},{"lineNumber":71,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":72,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":73,"author":{"gitId":"dgc5213"},"content":"            case \"done\":"},{"lineNumber":74,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":75,"author":{"gitId":"dgc5213"},"content":"                taskList.markSelectedTaskDone(getSecondWord(input));"},{"lineNumber":76,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"dgc5213"},"content":"            case \"delete\":"},{"lineNumber":79,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":80,"author":{"gitId":"dgc5213"},"content":"                taskList.markSelectedTaskDelete(getSecondWord(input));"},{"lineNumber":81,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":82,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"dgc5213"},"content":"            case \"todo\":"},{"lineNumber":84,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":85,"author":{"gitId":"dgc5213"},"content":"                taskList.addToDoType(filterTaskDetails(input));"},{"lineNumber":86,"author":{"gitId":"dgc5213"},"content":"                taskList.readTaskFromUser(filterTaskDetails(input));"},{"lineNumber":87,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":88,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":89,"author":{"gitId":"dgc5213"},"content":"            case \"deadline\":"},{"lineNumber":90,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":91,"author":{"gitId":"dgc5213"},"content":"                taskList.addDeadlineType(filterTaskDetails(input));"},{"lineNumber":92,"author":{"gitId":"dgc5213"},"content":"                taskList.readTaskFromUser(filterTaskDetails(input));"},{"lineNumber":93,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":94,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":95,"author":{"gitId":"dgc5213"},"content":"            case \"event\":"},{"lineNumber":96,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":97,"author":{"gitId":"dgc5213"},"content":"                taskList.addEventType(filterTaskDetails(input));"},{"lineNumber":98,"author":{"gitId":"dgc5213"},"content":"                taskList.readTaskFromUser(filterTaskDetails(input));"},{"lineNumber":99,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":100,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":101,"author":{"gitId":"dgc5213"},"content":"            case \"find\":"},{"lineNumber":102,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":103,"author":{"gitId":"dgc5213"},"content":"                new FindCommand().executeCommand(filterTaskDetails(input));"},{"lineNumber":104,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":105,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":106,"author":{"gitId":"dgc5213"},"content":"            case \"clear\":"},{"lineNumber":107,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":108,"author":{"gitId":"dgc5213"},"content":"                TaskList.clearAllTasks();"},{"lineNumber":109,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":110,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":111,"author":{"gitId":"dgc5213"},"content":"            case \"view\":"},{"lineNumber":112,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":113,"author":{"gitId":"dgc5213"},"content":"                taskList.viewSelectedTask(getSecondWord(input));"},{"lineNumber":114,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":115,"author":{"gitId":"dgc5213"},"content":"                break;"},{"lineNumber":116,"author":{"gitId":"dgc5213"},"content":"            default:"},{"lineNumber":117,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":118,"author":{"gitId":"dgc5213"},"content":"                Ui.showMessage(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":119,"author":{"gitId":"dgc5213"},"content":"                Ui.printLine();"},{"lineNumber":120,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":122,"author":{"gitId":"dgc5213"},"content":"        } catch (Exception e) {"},{"lineNumber":123,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage(e.getMessage());"},{"lineNumber":124,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":126,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":127,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":129,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":130,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":131,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":132,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":133,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":134,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":135,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":136,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":137,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":138,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":139,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":140,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":141,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":142,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":143,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":144,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":145,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":146,"author":{"gitId":"dgc5213"},"content":""}],"authorContributionMap":{"dgc5213":146}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Deadline;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Event;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Todo;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"import java.io.BufferedReader;"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"import java.io.BufferedWriter;"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"import java.io.FileReader;"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"import java.io.FileWriter;"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"import java.io.IOException;"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"import java.nio.file.Files;"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"import java.nio.file.Paths;"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDate;"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDateTime;"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"import java.util.ArrayList;"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":" * Storage: deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":" * Task data is saved in the hard disk automatically after any command that changes the data."},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":" */"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"public class Storage {"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"    // An array list of task objects"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"    private Task task;"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"     * creating an TodoList object"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"    public Storage() {"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"        taskList \u003d TaskList.getList();"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"    /* readFromFile"},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"     * This method will read the data file from disk which will contain the data of previously saved tasks"},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":"     * It can handle the case that data folder is not exist. this method can auto create data folder and data file"},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"     * @param filename A String that contains the file path"},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"     * */"},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"    public void readFromFile(String filename) {"},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":"            if (!Files.isReadable(Paths.get(filename))) {"},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":"                Ui.showMessage(\"The data file i.e.: \" + filename + \" does not exists!\");"},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"                String folderPath \u003d System.getProperty(\"user.dir\")"},{"lineNumber":61,"author":{"gitId":"dgc5213"},"content":"                        + File.separator + \"src\" + File.separator"},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"                        + \"main\" + File.separator + \"java\" + File.separator + \"data\";"},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"                File folder \u003d new File(folderPath);"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":"                File myObj \u003d new File(filename);"},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":67,"author":{"gitId":"dgc5213"},"content":"                if (!folder.exists() \u0026\u0026 !folder.isDirectory()) {"},{"lineNumber":68,"author":{"gitId":"dgc5213"},"content":"                    folder.mkdirs();"},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(\"Folder created:\" + folder);"},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":"                } else {"},{"lineNumber":71,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(\"Folder exist\");"},{"lineNumber":72,"author":{"gitId":"dgc5213"},"content":"                }"},{"lineNumber":73,"author":{"gitId":"dgc5213"},"content":"                Ui.showMessage(\"Now, New file created: \" + myObj.getName());"},{"lineNumber":74,"author":{"gitId":"dgc5213"},"content":"                return;"},{"lineNumber":75,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":78,"author":{"gitId":"dgc5213"},"content":"            BufferedReader reader \u003d null;"},{"lineNumber":79,"author":{"gitId":"dgc5213"},"content":"            String tempString \u003d null;"},{"lineNumber":80,"author":{"gitId":"dgc5213"},"content":"            int line \u003d 1; //// the line number is started from 1st"},{"lineNumber":81,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":82,"author":{"gitId":"dgc5213"},"content":"            try {"},{"lineNumber":83,"author":{"gitId":"dgc5213"},"content":"                Ui.showMessage(\"Read tasks from txt file, line by line:\" + filename);"},{"lineNumber":84,"author":{"gitId":"dgc5213"},"content":"                reader \u003d new BufferedReader(new FileReader(filename));"},{"lineNumber":85,"author":{"gitId":"dgc5213"},"content":"                while ((tempString \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":86,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(\"Line\" + line + \":\" + tempString);"},{"lineNumber":87,"author":{"gitId":"dgc5213"},"content":"                    createTaskFromFile(tempString);"},{"lineNumber":88,"author":{"gitId":"dgc5213"},"content":"                    line++;"},{"lineNumber":89,"author":{"gitId":"dgc5213"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"dgc5213"},"content":"                reader.close();"},{"lineNumber":91,"author":{"gitId":"dgc5213"},"content":"            } catch (FileNotFoundException e) {"},{"lineNumber":92,"author":{"gitId":"dgc5213"},"content":"                // TODO Auto-generated catch block"},{"lineNumber":93,"author":{"gitId":"dgc5213"},"content":"                e.printStackTrace();"},{"lineNumber":94,"author":{"gitId":"dgc5213"},"content":"            } finally {"},{"lineNumber":95,"author":{"gitId":"dgc5213"},"content":"                if (reader !\u003d null) {"},{"lineNumber":96,"author":{"gitId":"dgc5213"},"content":"                    try {"},{"lineNumber":97,"author":{"gitId":"dgc5213"},"content":"                        reader.close();"},{"lineNumber":98,"author":{"gitId":"dgc5213"},"content":"                    } catch (IOException e) {"},{"lineNumber":99,"author":{"gitId":"dgc5213"},"content":"                        // TODO Auto-generated catch block"},{"lineNumber":100,"author":{"gitId":"dgc5213"},"content":"                        e.printStackTrace();"},{"lineNumber":101,"author":{"gitId":"dgc5213"},"content":"                    }"},{"lineNumber":102,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":103,"author":{"gitId":"dgc5213"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":105,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":107,"author":{"gitId":"dgc5213"},"content":"        } catch (IOException e) {"},{"lineNumber":108,"author":{"gitId":"dgc5213"},"content":"            e.printStackTrace();"},{"lineNumber":109,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":112,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":113,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":114,"author":{"gitId":"dgc5213"},"content":"     * This method will auto create relevant task from the data file"},{"lineNumber":115,"author":{"gitId":"dgc5213"},"content":"     * the task could be event task, deadline task, todo task"},{"lineNumber":116,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"dgc5213"},"content":"     * @param line get the task content from txt file, which contains task type, task description, task status"},{"lineNumber":118,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"dgc5213"},"content":"    private void createTaskFromFile(String line)  {"},{"lineNumber":120,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":121,"author":{"gitId":"dgc5213"},"content":"        String taskDescription;"},{"lineNumber":122,"author":{"gitId":"dgc5213"},"content":"        String taskSchedule \u003d null;"},{"lineNumber":123,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":124,"author":{"gitId":"dgc5213"},"content":"        String[] lineArr \u003d line.split(\"\\\\|\");"},{"lineNumber":125,"author":{"gitId":"dgc5213"},"content":"        /* get the value of TaskDetail \u0026 TaskDeadlineDetail */"},{"lineNumber":126,"author":{"gitId":"dgc5213"},"content":"        taskDescription \u003d lineArr[2].trim();"},{"lineNumber":127,"author":{"gitId":"dgc5213"},"content":"        if (lineArr.length \u003e 3) {"},{"lineNumber":128,"author":{"gitId":"dgc5213"},"content":"            taskSchedule \u003d lineArr[3].trim();"},{"lineNumber":129,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":131,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":132,"author":{"gitId":"dgc5213"},"content":"        DateTimeFormatter formatterEventSchedule \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\");"},{"lineNumber":133,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":134,"author":{"gitId":"dgc5213"},"content":"        /* pass the value to Task:  todo / deadline /event, and lable the task status */"},{"lineNumber":135,"author":{"gitId":"dgc5213"},"content":"        if (lineArr[0].equals(\"D \") \u0026 lineArr[1].equals(\" 1 \")) {"},{"lineNumber":136,"author":{"gitId":"dgc5213"},"content":"            task \u003d new Deadline(taskDescription, LocalDate.parse(taskSchedule));"},{"lineNumber":137,"author":{"gitId":"dgc5213"},"content":"            task.setDone();"},{"lineNumber":138,"author":{"gitId":"dgc5213"},"content":"            taskList.add(task);"},{"lineNumber":139,"author":{"gitId":"dgc5213"},"content":"        } else if (lineArr[0].equals(\"D \") \u0026 lineArr[1].equals(\" 0 \")) {"},{"lineNumber":140,"author":{"gitId":"dgc5213"},"content":"            taskList.add((new Deadline(taskDescription, LocalDate.parse(taskSchedule))));"},{"lineNumber":141,"author":{"gitId":"dgc5213"},"content":"        } else if (lineArr[0].equals(\"E \") \u0026 lineArr[1].equals(\" 1 \")) {"},{"lineNumber":142,"author":{"gitId":"dgc5213"},"content":"            task \u003d new Event(taskDescription, LocalDateTime.parse(taskSchedule, formatterEventSchedule));"},{"lineNumber":143,"author":{"gitId":"dgc5213"},"content":"            task.setDone();"},{"lineNumber":144,"author":{"gitId":"dgc5213"},"content":"            taskList.add(task);"},{"lineNumber":145,"author":{"gitId":"dgc5213"},"content":"        } else if (lineArr[0].equals(\"E \") \u0026 lineArr[1].equals(\" 0 \")) {"},{"lineNumber":146,"author":{"gitId":"dgc5213"},"content":"            taskList.add(new Event(taskDescription, LocalDateTime.parse(taskSchedule, formatterEventSchedule)));"},{"lineNumber":147,"author":{"gitId":"dgc5213"},"content":"        } else if (lineArr[0].equals(\"T \") \u0026 lineArr[1].equals(\" 1 \")) {"},{"lineNumber":148,"author":{"gitId":"dgc5213"},"content":"            task \u003d new Todo(taskDescription);"},{"lineNumber":149,"author":{"gitId":"dgc5213"},"content":"            task.setDone();"},{"lineNumber":150,"author":{"gitId":"dgc5213"},"content":"            taskList.add(task);"},{"lineNumber":151,"author":{"gitId":"dgc5213"},"content":"        } else if (lineArr[0].equals(\"T \") \u0026 lineArr[1].equals(\" 0 \")) {"},{"lineNumber":152,"author":{"gitId":"dgc5213"},"content":"            taskList.add(new Todo(taskDescription));"},{"lineNumber":153,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":155,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":156,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":158,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":159,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":160,"author":{"gitId":"dgc5213"},"content":"     * This method will write the data of Tasks from ArrayList to data file on disk"},{"lineNumber":161,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"dgc5213"},"content":"     * @param filename a string specifying the full path and extension of data file"},{"lineNumber":163,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"dgc5213"},"content":"    public void saveToFile(String filename) {"},{"lineNumber":165,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":166,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":167,"author":{"gitId":"dgc5213"},"content":"        File out \u003d new File(filename);"},{"lineNumber":168,"author":{"gitId":"dgc5213"},"content":"        if (out.exists()) {"},{"lineNumber":169,"author":{"gitId":"dgc5213"},"content":"            out.delete();"},{"lineNumber":170,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":172,"author":{"gitId":"dgc5213"},"content":"        try (BufferedWriter bw \u003d new BufferedWriter(new FileWriter(out))) {"},{"lineNumber":173,"author":{"gitId":"dgc5213"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":174,"author":{"gitId":"dgc5213"},"content":"                //  System.out.println(taskList);"},{"lineNumber":175,"author":{"gitId":"dgc5213"},"content":"                if (taskList.get(i) instanceof Deadline) {"},{"lineNumber":176,"author":{"gitId":"dgc5213"},"content":"                    bw.append(\"D \");"},{"lineNumber":177,"author":{"gitId":"dgc5213"},"content":"                    bw.append(\"| \").append(taskList.get(i).isDone() ? \"1\" : \"0\")"},{"lineNumber":178,"author":{"gitId":"dgc5213"},"content":"                            .append(\" | \").append(taskList.get(i).getDescription())"},{"lineNumber":179,"author":{"gitId":"dgc5213"},"content":"                            .append(\" | \").append(((Deadline) taskList.get(i)).getDueDate().toString());"},{"lineNumber":180,"author":{"gitId":"dgc5213"},"content":"                } else if (taskList.get(i) instanceof Event) {"},{"lineNumber":181,"author":{"gitId":"dgc5213"},"content":"                    bw.append(\"E \");"},{"lineNumber":182,"author":{"gitId":"dgc5213"},"content":"                    bw.append(\"| \").append(taskList.get(i).isDone() ? \"1\" : \"0\")"},{"lineNumber":183,"author":{"gitId":"dgc5213"},"content":"                            .append(\" | \").append(taskList.get(i).getDescription())"},{"lineNumber":184,"author":{"gitId":"dgc5213"},"content":"                            .append(\" | \").append(((Event) taskList.get(i)).getDueDateTime().toString());"},{"lineNumber":185,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":186,"author":{"gitId":"dgc5213"},"content":"                } else if (taskList.get(i) instanceof Todo) {"},{"lineNumber":187,"author":{"gitId":"dgc5213"},"content":"                    bw.append(\"T \");"},{"lineNumber":188,"author":{"gitId":"dgc5213"},"content":"                    bw.append(\"| \").append(taskList.get(i).isDone() ? \"1\" : \"0\")"},{"lineNumber":189,"author":{"gitId":"dgc5213"},"content":"                            .append(\" | \").append(taskList.get(i).getDescription());"},{"lineNumber":190,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":191,"author":{"gitId":"dgc5213"},"content":"                }"},{"lineNumber":192,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":193,"author":{"gitId":"dgc5213"},"content":"                bw.append(\"\\n\");"},{"lineNumber":194,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"dgc5213"},"content":"        } catch (IOException ex) {"},{"lineNumber":196,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage(ex.getMessage());"},{"lineNumber":197,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":199}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Todo;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalTime;"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"import java.util.Locale;"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":" * TaskList: contains the task list e.g., it has operations to add/delete tasks in the list"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":" * TodoList"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":" */"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"public class TaskList {"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"    // An array list of task objects"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"    private static ArrayList\u003cTask\u003e taskList;"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"     * creating an TodoList object"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"    public TaskList() {"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"     * creating a taskList"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"    public static ArrayList\u003cTask\u003e getList() {"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"        return taskList;"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"     * To check the datetime if it is valid."},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"     * @param format A String that holds the format of date/time."},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"     * @param value A String that holds the details of task"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"     * @param locale A Locale that holds the locale"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"    public static boolean isValidDateTimeFormat(String format, String value, Locale locale) {"},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"        LocalDateTime ldt \u003d null;"},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"        DateTimeFormatter fomatter \u003d DateTimeFormatter.ofPattern(format, locale);"},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":"            ldt \u003d LocalDateTime.parse(value, fomatter);"},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"            String result \u003d ldt.format(fomatter);"},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"            return result.equals(value);"},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":"            try {"},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":"                LocalDate ld \u003d LocalDate.parse(value, fomatter);"},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":"                String result \u003d ld.format(fomatter);"},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"                return result.equals(value);"},{"lineNumber":61,"author":{"gitId":"dgc5213"},"content":"            } catch (DateTimeParseException exp) {"},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"                try {"},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":"                    LocalTime lt \u003d LocalTime.parse(value, fomatter);"},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"                    String result \u003d lt.format(fomatter);"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":"                    return result.equals(value);"},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":"                } catch (DateTimeParseException e2) {"},{"lineNumber":67,"author":{"gitId":"dgc5213"},"content":"                    // Debugging purposes"},{"lineNumber":68,"author":{"gitId":"dgc5213"},"content":"                    //e2.printStackTrace();"},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":"                }"},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":73,"author":{"gitId":"dgc5213"},"content":"        return false;"},{"lineNumber":74,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":76,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":"     * Adding a Task object in ArrayList"},{"lineNumber":78,"author":{"gitId":"dgc5213"},"content":"     * The Task is in \"Todo\""},{"lineNumber":79,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"dgc5213"},"content":"     * @param toAddTaskDetails A String that holds the details of a task and it cannot be empty or null."},{"lineNumber":81,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"dgc5213"},"content":"    public void addToDoType(String toAddTaskDetails) {"},{"lineNumber":83,"author":{"gitId":"dgc5213"},"content":"        taskList.add(new Todo(toAddTaskDetails));"},{"lineNumber":84,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":86,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":87,"author":{"gitId":"dgc5213"},"content":"     * Adding a Task object in ArrayList"},{"lineNumber":88,"author":{"gitId":"dgc5213"},"content":"     * The Task is in \"Deadline\""},{"lineNumber":89,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"dgc5213"},"content":"     * @param toAddTaskDetails A String that holds the details of a task and it cannot be empty or null."},{"lineNumber":91,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"dgc5213"},"content":"    public void addDeadlineType(String toAddTaskDetails) throws DukeException {"},{"lineNumber":93,"author":{"gitId":"dgc5213"},"content":"        if (!toAddTaskDetails.toLowerCase().contains(\" /by\")) {"},{"lineNumber":94,"author":{"gitId":"dgc5213"},"content":"            throw new DukeException(\"Cannot find \u0027/by\u0027 in command.Please enter valid task details.\");"},{"lineNumber":95,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":97,"author":{"gitId":"dgc5213"},"content":"        if (toAddTaskDetails.split(\"(?i)/by\").length \u003c 2) {"},{"lineNumber":98,"author":{"gitId":"dgc5213"},"content":"            throw new DukeException(\"No deadline time found after keyword /by.Please enter valid task details.\");"},{"lineNumber":99,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":101,"author":{"gitId":"dgc5213"},"content":"        String taskDescription \u003d (toAddTaskDetails.split(\"(?i)/by\")[0]).trim();// splits case insensitive"},{"lineNumber":102,"author":{"gitId":"dgc5213"},"content":"        String taskDeadline \u003d (toAddTaskDetails.split(\"(?i)/by\")[1]).trim();// splits case insensitive"},{"lineNumber":103,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":104,"author":{"gitId":"dgc5213"},"content":"        boolean dateTimeFormatChecker \u003d isValidDateTimeFormat(\"yyyy-MM-dd\", taskDeadline, Locale.ENGLISH);"},{"lineNumber":105,"author":{"gitId":"dgc5213"},"content":"        // to check if the user enter the correct date format"},{"lineNumber":106,"author":{"gitId":"dgc5213"},"content":"        if (!dateTimeFormatChecker) {"},{"lineNumber":107,"author":{"gitId":"dgc5213"},"content":"            throw new DukeException(\"Please enter correct deadline Due Date yyyy-MM-dd, example: 2019-12-31\");"},{"lineNumber":108,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":110,"author":{"gitId":"dgc5213"},"content":"        LocalDate dueDate \u003d LocalDate.parse(taskDeadline);"},{"lineNumber":111,"author":{"gitId":"dgc5213"},"content":"        taskList.add(new Deadline(taskDescription, dueDate));"},{"lineNumber":112,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":113,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":114,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":116,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":117,"author":{"gitId":"dgc5213"},"content":"     * Adding a Task object in ArrayList"},{"lineNumber":118,"author":{"gitId":"dgc5213"},"content":"     * The Task is in \"Event\""},{"lineNumber":119,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"dgc5213"},"content":"     * @param toAddTaskDetails A String that holds the details of a task and it cannot be empty or null."},{"lineNumber":121,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"dgc5213"},"content":"    public void addEventType(String toAddTaskDetails) throws DukeException {"},{"lineNumber":123,"author":{"gitId":"dgc5213"},"content":"        if (!toAddTaskDetails.toLowerCase().contains(\" /at\")) {"},{"lineNumber":124,"author":{"gitId":"dgc5213"},"content":"            throw new DukeException(\"Cannot find \u0027/at\u0027 in command.Please enter valid task details.\");"},{"lineNumber":125,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":127,"author":{"gitId":"dgc5213"},"content":"        if (toAddTaskDetails.split(\"(?i)/at \").length \u003c 2) {"},{"lineNumber":128,"author":{"gitId":"dgc5213"},"content":"            throw new DukeException(\"No event time found after keyword /at.Please enter valid task details.\");"},{"lineNumber":129,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":131,"author":{"gitId":"dgc5213"},"content":"        String taskDescription \u003d (toAddTaskDetails.split(\"(?i)/at\")[0]).trim();"},{"lineNumber":132,"author":{"gitId":"dgc5213"},"content":"        // splits case insensitive"},{"lineNumber":133,"author":{"gitId":"dgc5213"},"content":"        String taskEventDate \u003d (toAddTaskDetails.split(\"(?i)/at\")[1]).trim();"},{"lineNumber":134,"author":{"gitId":"dgc5213"},"content":"        // splits case insensitive"},{"lineNumber":135,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":136,"author":{"gitId":"dgc5213"},"content":"        boolean dateTimeFormatChecker \u003d isValidDateTimeFormat(\"yyyy-MM-dd HH:mm\", taskEventDate, Locale.ENGLISH);"},{"lineNumber":137,"author":{"gitId":"dgc5213"},"content":"        // to check if the user enter the correct date format"},{"lineNumber":138,"author":{"gitId":"dgc5213"},"content":"        if (!dateTimeFormatChecker) {"},{"lineNumber":139,"author":{"gitId":"dgc5213"},"content":"            throw new DukeException(\"Please enter correct event Date yyyy-MM-dd HH:mm, example: 2019-12-31 11:10\");"},{"lineNumber":140,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":142,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":143,"author":{"gitId":"dgc5213"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":144,"author":{"gitId":"dgc5213"},"content":"        LocalDateTime formatDateTime \u003d LocalDateTime.parse(taskEventDate, formatter);"},{"lineNumber":145,"author":{"gitId":"dgc5213"},"content":"        taskList.add(new Event(taskDescription, formatDateTime));"},{"lineNumber":146,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":147,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":148,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":150,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"dgc5213"},"content":"     * A method to read the value from user."},{"lineNumber":152,"author":{"gitId":"dgc5213"},"content":"     * Show the message to user and notify the user that a current task is added in the list"},{"lineNumber":153,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"dgc5213"},"content":"     * @param input A String that holds the user input from the terminal"},{"lineNumber":155,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"dgc5213"},"content":"    public void readTaskFromUser(String input) {"},{"lineNumber":157,"author":{"gitId":"dgc5213"},"content":"        Ui.showMessage(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":158,"author":{"gitId":"dgc5213"},"content":"        int currentNewAddedTaskIndex \u003d (taskList.size() - 1);"},{"lineNumber":159,"author":{"gitId":"dgc5213"},"content":"        Ui.showMessage(\"  \" + taskList.get(currentNewAddedTaskIndex).toString());"},{"lineNumber":160,"author":{"gitId":"dgc5213"},"content":"        Ui.showMessage(\"Now you have \" + taskList.size() + \" tasks in the list.\");"},{"lineNumber":161,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":163,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":164,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"dgc5213"},"content":"     * A method to delete the task as the user requested."},{"lineNumber":166,"author":{"gitId":"dgc5213"},"content":"     * Show the message to user and notify the user that a current task is deleted in the list"},{"lineNumber":167,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"dgc5213"},"content":"     * @param selectedTask A String that holds the user input from the terminal"},{"lineNumber":169,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":171,"author":{"gitId":"dgc5213"},"content":"    public void markSelectedTaskDelete(String selectedTask) {"},{"lineNumber":172,"author":{"gitId":"dgc5213"},"content":"        try {"},{"lineNumber":173,"author":{"gitId":"dgc5213"},"content":"            // checking if the task number is given and empty string or null"},{"lineNumber":174,"author":{"gitId":"dgc5213"},"content":"            if (selectedTask.trim().equals(\"\")) {"},{"lineNumber":175,"author":{"gitId":"dgc5213"},"content":"                throw new NullPointerException(\"TASK NUM is Empty/Null: Returning to Main Menu\");"},{"lineNumber":176,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":177,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":178,"author":{"gitId":"dgc5213"},"content":"            int taskIndex \u003d Integer.parseInt(selectedTask) - 1;"},{"lineNumber":179,"author":{"gitId":"dgc5213"},"content":"            if (taskIndex \u003c 0 || taskIndex \u003e taskList.size()) {"},{"lineNumber":180,"author":{"gitId":"dgc5213"},"content":"                throw new ArrayIndexOutOfBoundsException("},{"lineNumber":181,"author":{"gitId":"dgc5213"},"content":"                        \"TASK NUM cannot be found in the task list: Returning to Main Menu\");"},{"lineNumber":182,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":184,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":185,"author":{"gitId":"dgc5213"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":186,"author":{"gitId":"dgc5213"},"content":"                if (i \u003d\u003d taskIndex) {"},{"lineNumber":187,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":188,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":189,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(\"  \" + taskList.get(i).toString());"},{"lineNumber":190,"author":{"gitId":"dgc5213"},"content":"                    taskList.remove(i);"},{"lineNumber":191,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":192,"author":{"gitId":"dgc5213"},"content":"                }"},{"lineNumber":193,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":194,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage(\"Now you have \" + taskList.size() + \" tasks in the list.\");"},{"lineNumber":196,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":197,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":198,"author":{"gitId":"dgc5213"},"content":"        } catch (Exception e) {"},{"lineNumber":199,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage(e.getMessage());"},{"lineNumber":200,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":203,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":204,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":205,"author":{"gitId":"dgc5213"},"content":"     * A method to mark the selected task as completed."},{"lineNumber":206,"author":{"gitId":"dgc5213"},"content":"     * update value of the task field:isDone \u003d true."},{"lineNumber":207,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":208,"author":{"gitId":"dgc5213"},"content":"     * @param selectedTask A String that holds the ID (number) of a task"},{"lineNumber":209,"author":{"gitId":"dgc5213"},"content":"     * @throws NullPointerException If TASK NUM is Empty/Null: Returning to Main Menu"},{"lineNumber":210,"author":{"gitId":"dgc5213"},"content":"     * @throws ArrayIndexOutOfBoundsException If TASK NUM is invalid,"},{"lineNumber":211,"author":{"gitId":"dgc5213"},"content":"     *          TASK NUM cannot be found in the task list: Returning to Main Menu"},{"lineNumber":212,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"dgc5213"},"content":"    public void markSelectedTaskDone(String selectedTask) {"},{"lineNumber":214,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":215,"author":{"gitId":"dgc5213"},"content":"        try {"},{"lineNumber":216,"author":{"gitId":"dgc5213"},"content":"            // checking if the task number is given and empty string or null"},{"lineNumber":217,"author":{"gitId":"dgc5213"},"content":"            if (selectedTask.trim().equals(\"\")) {"},{"lineNumber":218,"author":{"gitId":"dgc5213"},"content":"                throw new NullPointerException(\"TASK NUM is Empty/Null: Returning to Main Menu\");"},{"lineNumber":219,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":220,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":221,"author":{"gitId":"dgc5213"},"content":"            int taskIndex \u003d Integer.parseInt(selectedTask) - 1;"},{"lineNumber":222,"author":{"gitId":"dgc5213"},"content":"            if (taskIndex \u003c 0 || taskIndex \u003e taskList.size()) {"},{"lineNumber":223,"author":{"gitId":"dgc5213"},"content":"                throw new ArrayIndexOutOfBoundsException("},{"lineNumber":224,"author":{"gitId":"dgc5213"},"content":"                        \"TASK NUM cannot be found in the task list: Returning to Main Menu\");"},{"lineNumber":225,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":226,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":227,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":228,"author":{"gitId":"dgc5213"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":229,"author":{"gitId":"dgc5213"},"content":"                if (i \u003d\u003d taskIndex) {"},{"lineNumber":230,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":231,"author":{"gitId":"dgc5213"},"content":"                    taskList.get(i).setDone();"},{"lineNumber":232,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":233,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(\"[\" + taskList.get(i).getStatusIcon() + \"] \" + taskList.get(i).getDescription());"},{"lineNumber":234,"author":{"gitId":"dgc5213"},"content":"                }"},{"lineNumber":235,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":236,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":237,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":238,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":239,"author":{"gitId":"dgc5213"},"content":"        } catch (Exception e) {"},{"lineNumber":240,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage(e.getMessage());"},{"lineNumber":241,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":242,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":244,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":245,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"dgc5213"},"content":"     * A method to clear all entries."},{"lineNumber":247,"author":{"gitId":"dgc5213"},"content":"     * Show the message to user and notify the user that \"All entries have been cleared.\""},{"lineNumber":248,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":249,"author":{"gitId":"dgc5213"},"content":"    public static void clearAllTasks() {"},{"lineNumber":250,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":251,"author":{"gitId":"dgc5213"},"content":"        // list initially"},{"lineNumber":252,"author":{"gitId":"dgc5213"},"content":"        Ui.showMessage(\"The Task list initially:\\n\" + taskList);"},{"lineNumber":253,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":254,"author":{"gitId":"dgc5213"},"content":"        // clear function used"},{"lineNumber":255,"author":{"gitId":"dgc5213"},"content":"        taskList.clear();"},{"lineNumber":256,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":257,"author":{"gitId":"dgc5213"},"content":"        // list after clearing all elements"},{"lineNumber":258,"author":{"gitId":"dgc5213"},"content":"        Ui.showMessage(\"The Task list after using clear() method:\" + taskList);"},{"lineNumber":259,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":260,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":262,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":263,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":264,"author":{"gitId":"dgc5213"},"content":"     * A method to view the selected task details"},{"lineNumber":265,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":266,"author":{"gitId":"dgc5213"},"content":"     * @param selectedTask A String that holds the ID (number) of a task"},{"lineNumber":267,"author":{"gitId":"dgc5213"},"content":"     * @throws NullPointerException If TASK NUM is Empty/Null: Returning to Main Menu"},{"lineNumber":268,"author":{"gitId":"dgc5213"},"content":"     * @throws ArrayIndexOutOfBoundsException If TASK NUM is invalid,"},{"lineNumber":269,"author":{"gitId":"dgc5213"},"content":"     *          TASK NUM cannot be found in the task list: Returning to Main Menu"},{"lineNumber":270,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":271,"author":{"gitId":"dgc5213"},"content":"    public void viewSelectedTask(String selectedTask) {"},{"lineNumber":272,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":273,"author":{"gitId":"dgc5213"},"content":"        try {"},{"lineNumber":274,"author":{"gitId":"dgc5213"},"content":"            // checking if the task number is given and empty string or null"},{"lineNumber":275,"author":{"gitId":"dgc5213"},"content":"            if (selectedTask.trim().equals(\"\")) {"},{"lineNumber":276,"author":{"gitId":"dgc5213"},"content":"                throw new NullPointerException(\"TASK NUM is Empty/Null: Returning to Main Menu\");"},{"lineNumber":277,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":278,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":279,"author":{"gitId":"dgc5213"},"content":"            int taskIndex \u003d Integer.parseInt(selectedTask) - 1;"},{"lineNumber":280,"author":{"gitId":"dgc5213"},"content":"            if (taskIndex \u003c 0 || taskIndex \u003e taskList.size()) {"},{"lineNumber":281,"author":{"gitId":"dgc5213"},"content":"                throw new ArrayIndexOutOfBoundsException("},{"lineNumber":282,"author":{"gitId":"dgc5213"},"content":"                        \"TASK NUM cannot be found in the task list: Returning to Main Menu\");"},{"lineNumber":283,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":284,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":285,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":286,"author":{"gitId":"dgc5213"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":287,"author":{"gitId":"dgc5213"},"content":"                if (i \u003d\u003d taskIndex) {"},{"lineNumber":288,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(\"Nice! Here is the task ready to view:\");"},{"lineNumber":289,"author":{"gitId":"dgc5213"},"content":"                    Ui.showMessage(taskList.get(i).toString());"},{"lineNumber":290,"author":{"gitId":"dgc5213"},"content":"                }"},{"lineNumber":291,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":292,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":293,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":294,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":295,"author":{"gitId":"dgc5213"},"content":"        } catch (Exception e) {"},{"lineNumber":296,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage(e.getMessage());"},{"lineNumber":297,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":300,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":301,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":302,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":303,"author":{"gitId":"dgc5213"},"content":"}"},{"lineNumber":304,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":305,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":306,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":307,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":308,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":309,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":310,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":311,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":312,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":313,"author":{"gitId":"dgc5213"},"content":""}],"authorContributionMap":{"dgc5213":313}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"/** ."},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":" * Ui: deals with interactions with the user"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":" */"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"     * This method will scan the user input"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"    public static String readUserCommand() {"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"        return in.nextLine().trim();"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"     * This method will display line on standard output (terminal)"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"    public static void printLine() {"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"        System.out.println(\"_________________________________________\");"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"     * This method will display welcome message to user on standard output (terminal)"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"    public static void sayWelcome() {"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"        printLine();"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"        printLine();"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"     * This method will display any message to user on standard output (terminal)"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"     * @param message A String which contains the message we will show to user"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"    public static void showMessage(String message) {"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"        System.out.println(message);"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"     * This method will say goodbye to user on standard output (terminal)"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"    public void sayBye() {"},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"        printLine();"},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":"        printLine();"},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":55}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"/** ."},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":" * An abstract Command Class"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":" */"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"    // An array list of task objects"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"     * creating an Task object"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    public Command() {"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"        taskList \u003d TaskList.getList();"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"    public abstract void executeCommand(); // create abstract"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":25}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"public class FindCommand {"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"    // An array list of task objects"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"     * creating an Task object"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"    public FindCommand() {"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"        taskList \u003d TaskList.getList();"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"     * A method to find a task by searching for a keyword."},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"     * Show the message to user and notify the user that \"Here are the matching tasks in your list\""},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"     * @param line get the task content from txt file, which contains keyword"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"    public void executeCommand(String line) {"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        String taskDescription;"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"        ArrayList\u003cTask\u003e taskListKeywordFound \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"        int matchedCount \u003d 0;"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"        for (Task task : taskList) {"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"            taskDescription \u003d task.toString();"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"            if (taskDescription.toLowerCase().contains(line.toLowerCase())) {"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"                matchedCount \u003d matchedCount + 1;"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"                taskListKeywordFound.add(task);"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"                // once there is a match to a task, add this task to the new task list:taskListKeywordFound"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"        if (matchedCount \u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage(\"Sorry! Cannot find any matched tasks in your list.\");"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage(\"Here are the matching tasks in your list:\");"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"            for (int i \u003d 0; i \u003c taskListKeywordFound.size(); i++) {"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"                Ui.showMessage((i + 1) + \".\" + taskListKeywordFound.get(i).toString());"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"                // display the matched tasks to user from the task list:taskListKeywordFound"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":58}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"public class ListCommand {"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"    // An array list of task objects"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"     * creating an Task object"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"    public ListCommand() {"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"        taskList \u003d TaskList.getList();"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"     * A method to list done all the tasks from the list and show the list to user."},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"     * Show the message to user and notify the user that \"Here are the tasks in your list\""},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"      */"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"    public void executeCommand() {"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"        Ui.showMessage(\"Here are the tasks in your list:\");"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"            Ui.showMessage((i + 1) + \".\" + taskList.get(i).toString());"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":33}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"     * A Exception to show the error message"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"     * @param message A String that holds the user input."},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"    public DukeException(String message) {"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":12}},{"path":"src/main/java/duke/programexit/ProgramExit.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.programexit;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"public class ProgramExit {"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"    // A boolean value, if true: Exit the program, otherwise false."},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"    private boolean isExit;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"     * Creating an object of ProgramExit class"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"     * set the default Exit as false"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"    public ProgramExit() {"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"        isExit \u003d false;"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"     * A method to set the Exit as true"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    public void toExit() {"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"        isExit \u003d true;"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"     * A method to return the Exit status"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"    public boolean getIsExit() {"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"        return isExit;"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":30}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import java.time.DateTimeException;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"    // A String that holds the deadline date"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    protected String by;"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"    // The due date of the task as yyyy-mm-dd format"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    protected LocalDate dueDate;"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"    protected LocalDateTime dueDateTime;"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"     * Creating an object of Event class"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"     * @param description A String that holds the description of a task"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"     * @param dueDate     A LocalDate that holds the deadline date.The due date of the task as yyyy-mm-dd format"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"    public Deadline(String description, LocalDate dueDate) {"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"        super(description);"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"        this.setDueDate(dueDate);"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"     * Creating an object of Task class"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"     * @param description A String that holds the description of a task"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"    public Deadline(String description) {"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"        super(description);"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"     * Gets the deadline description of the task."},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"     * @return by This deadline description (BY)"},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"    public String getBy() {"},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":"        return by;"},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":"     * Changes the deadline description of the task."},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":"     * This may involve a lengthy legal process."},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"     * @param by This deadline description (BY)"},{"lineNumber":61,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"    public void setBy(String by) {"},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":"        this.by \u003d by;"},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":67,"author":{"gitId":"dgc5213"},"content":"     * A method to get the due date of the task"},{"lineNumber":68,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":"     * @return the due date of task as LocalDate object"},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"dgc5213"},"content":"    public LocalDate getDueDate() {"},{"lineNumber":72,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":73,"author":{"gitId":"dgc5213"},"content":"        return dueDate;"},{"lineNumber":74,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":76,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":"     * A method to set the due date of a task"},{"lineNumber":78,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"dgc5213"},"content":"     * @param dueDate The due date of the task as yyyy-mm-dd format"},{"lineNumber":80,"author":{"gitId":"dgc5213"},"content":"     * @throws DateTimeException if given date is a past date"},{"lineNumber":81,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"dgc5213"},"content":"    protected void setDueDate(LocalDate dueDate) throws DateTimeException {"},{"lineNumber":83,"author":{"gitId":"dgc5213"},"content":"        //Ensure dueDate is saved as yyyy-MM-dd"},{"lineNumber":84,"author":{"gitId":"dgc5213"},"content":"        DateTimeFormatter formattedDate \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":85,"author":{"gitId":"dgc5213"},"content":"        this.dueDate \u003d LocalDate.parse(dueDate.format(formattedDate));"},{"lineNumber":86,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":88,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":89,"author":{"gitId":"dgc5213"},"content":"     * A method to get the Task data as formatted string to display task type [D], task status and task description"},{"lineNumber":90,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"dgc5213"},"content":"     * @return a formatted String of task type [D], task status and task description"},{"lineNumber":92,"author":{"gitId":"dgc5213"},"content":"     *     To format the date display to the users."},{"lineNumber":93,"author":{"gitId":"dgc5213"},"content":"     *     LONG format:    April 3, 2019"},{"lineNumber":94,"author":{"gitId":"dgc5213"},"content":"     *     MEDIUM format:  Apr 3, 2019"},{"lineNumber":95,"author":{"gitId":"dgc5213"},"content":"     *     SHORT format:   4/3/19"},{"lineNumber":96,"author":{"gitId":"dgc5213"},"content":"     *     FULL format:    Wednesday, April 3, 2019"},{"lineNumber":97,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"dgc5213"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"dgc5213"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":101,"author":{"gitId":"dgc5213"},"content":"        String formattedDate \u003d dueDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));"},{"lineNumber":102,"author":{"gitId":"dgc5213"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \")\";"},{"lineNumber":103,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":105,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":106,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":106}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"    // A String that holds the event date or time"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"    protected String at;"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    protected LocalDateTime dueDateTime;"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"     * Creating an object of Event class"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"     * @param description A String that holds the description of a task"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"     * @param dueDateTime          A LocalDateTime that holds the event date or time"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"    public Event(String description, LocalDateTime dueDateTime) {"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"        this.dueDateTime \u003d dueDateTime;"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"     * A method to set the due date of a task"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"     * @param dueDateTime The due date of the task as yyyy-MM-dd HH:mm"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"     * @throws DateTimeException if given date is a past date"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"    protected void setDueDateTime(LocalDateTime dueDateTime) throws DateTimeException {"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"        //Ensure dueDate is saved as yyyy-MM-dd"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"        DateTimeFormatter formattedDate \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"        this.dueDateTime \u003d LocalDateTime.parse(dueDateTime.format(formattedDate));"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"     * Gets the Event duration."},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"     * @return getDueDateTime This Event duration/duedate (BY)"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"    public LocalDateTime getDueDateTime() {"},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"        return dueDateTime;"},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"     * A method to get the Task data as formatted string to display task type [E], task status and task description"},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":"     * @return a formatted String of task type [E], task status and task description"},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"dgc5213"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":"        //Create formatter"},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"        DateTimeFormatter fomatter \u003d DateTimeFormatter.ofPattern(\"EEEE, MMM dd, yyyy HH:mm:ss a\");"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":"        //Get formatted String"},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":"        String formattedDate \u003d fomatter.format(dueDateTime);"},{"lineNumber":67,"author":{"gitId":"dgc5213"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + formattedDate + \")\";"},{"lineNumber":68,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":71,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":71}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"// An abstract class"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"public abstract class Task {"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"    // A String that holds the description of a task"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"    // A boolean value, if true: the task is completed, otherwise false."},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"     * Creating an object of Task class"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"     * @param description A String that holds the description of a task"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    public Task(String description) {"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"        isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"     * A method to get the Task Status Icon"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"     * @return a String containing the icon: tick or X symbols"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"    public String getStatusIcon() {"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        return (isDone ? \"Tick\" : \"X\");"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"        //(isDone ? \"\\u2713\" : \"\\u2718\", return tick or X symbols ."},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"     * A method to get the Task description"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"     * @return a String containing the description of task"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"    public String getDescription() {"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"        return description;"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"     * A method to set the Task as done/completed"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"    public void setDone() {"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"        isDone \u003d true;"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"     * @return declare is done status."},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"    public boolean isDone() {"},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"        return isDone;"},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":"     * A method to get the Task data as formatted string to display both task status and task description"},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"dgc5213"},"content":"     * @return a formatted String of task status and task description"},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":"        return \"[\" + getStatusIcon() + \"]\" + \" \" + getDescription();"},{"lineNumber":67,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":70}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"     * Creating an object of Todo class"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"     * @param description A String that holds the description of a task"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"    public Todo(String description) {"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"     * A method to get the Task data as formatted string to display task type [T], task status and task description"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"     * @return a formatted String of task type [T], task status and task description"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":25}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Deadline;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Event;"},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import duke.tasks.Todo;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"class TaskListTest {"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"    private Todo taskT \u003d new Todo(\"To try out Todo\");"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"    DateTimeFormatter formatterDT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"    LocalDateTime formatDateTime \u003d LocalDateTime.parse(\"2020-10-14 22:00\", formatterDT);"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"    private Event taskE \u003d new Event(\"To try out Event\", formatDateTime);"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"    DateTimeFormatter formatterD \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"    LocalDate formatDate \u003d LocalDate.parse(\"2020-10-14\", formatterD);"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"    private duke.tasks.Deadline taskD \u003d new Deadline(\"To try out Event\",formatDate);"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"    // An array list of task objects"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"    private static ArrayList\u003cTask\u003e taskList;"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"    /** ."},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"     * creating an TodoList object"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"    public TaskListTest() {"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"        taskList.add(taskT);"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"        taskList.add(taskE);"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"        taskList.add(taskD);"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"        System.out.println(taskList);"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"    void getList() {"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"        assertEquals(\"[[T][X] To try out Todo, [E][X] To try out Event \""},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"                + \"(at: Wednesday, Oct 14, 2020 22:00:00 PM), \""},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"                +  \"[D][X] To try out Event (by: Wednesday, October 14, 2020)]\", taskList.toString());"},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":53}},{"path":"src/test/java/duke/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"class DeadlineTest {"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    LocalDate formatDate \u003d LocalDate.parse(\"2020-10-14\", formatter);"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"    private duke.tasks.Deadline task \u003d new Deadline(\"To try out Event\",formatDate);"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"    void getDueDate() {"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"        LocalDate expectedValue \u003d LocalDate.parse(\"2020-10-14\",formatter);"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"        assertEquals(expectedValue, task.getDueDate());"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"    void testToString() {"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"        assertEquals(\"[D][X] To try out Event (by: Wednesday, October 14, 2020)\", task.toString());"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":30}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"public class EventTest {"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":"    LocalDateTime formatDateTime \u003d LocalDateTime.parse(\"2020-10-14 22:00\", formatter);"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"    private duke.tasks.Event task2 \u003d new Event(\"To try out Event\", formatDateTime);"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"    public void getDescription() {"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"        assertEquals(\"To try out Event\", task2.getDescription());"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"    public void isDone() {"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"        assertFalse(task2.isDone());"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"    void setDueDateTime() {"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"    void testGetDueDateTime() {"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"        LocalDateTime expectedValue \u003d  LocalDateTime.parse(\"2020-10-14T22:00\");"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"        assertEquals(expectedValue, task2.getDueDateTime());"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"    void testToString() {"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"        assertEquals(\"[E][X] To try out Event (at: Wednesday, Oct 14, 2020 22:00:00 PM)\", task2.toString());"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":43}},{"path":"src/test/java/duke/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"public class TaskTest {"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"    private Todo task1 \u003d new Todo(\"To try out Todo\");"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"    LocalDateTime formatDateTime \u003d LocalDateTime.parse(\"2020-10-14 22:00\", formatter);"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    private Event task2 \u003d new Event(\"To try out Event\", formatDateTime);"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"    void testGetDescription() {"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"        assertEquals(\"To try out Todo\", task1.getDescription());"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"        assertEquals(\"To try out Event\", task2.getDescription());"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"    // test default done status, before any changes"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"    void testIsDoneBefore() {"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"        assertFalse(task1.isDone());"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"        assertFalse(task2.isDone());"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"    // test updated done status, after the setDone changes"},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"    void testIsDoneAfter() {"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"        task1.setDone();"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"        task2.setDone();"},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"        assertTrue(task1.isDone());"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"        assertTrue(task2.isDone());"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":46}},{"path":"src/test/java/duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"class TodoTest {"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"    private Todo task1 \u003d new Todo(\"To try out Todo\");"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"    void testToString() {"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"        assertEquals(\"[T][X] To try out Todo\", task1.toString());"},{"lineNumber":13,"author":{"gitId":"dgc5213"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"}"}],"authorContributionMap":{"dgc5213":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"todo read book"}],"authorContributionMap":{"dgc5213":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"dgc5213":2,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"dgc5213":1,"-":37}}]
