[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"daiweinus":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"dependencies {"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"test {"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"    useJUnitPlatform()"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"    testLogging {"},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"        showExceptions true"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"        exceptionFormat \"full\""},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"        showCauses true"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"        showStackTraces true"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"        showStandardStreams \u003d false"},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"application {"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"    enableAssertions \u003d true"},{"lineNumber":63,"author":{"gitId":"daiweinus"},"content":"    standardInput \u003d System.in"},{"lineNumber":64,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":64}},{"path":"data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"T  | 1 | 1"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":"D | 1 | 2 | Feb 2 2020"},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"E  | 0 | 3 | 4"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"D | 0 | 3 | Feb 14 2021"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"E  | 0 | 5 | 6"}],"authorContributionMap":{"daiweinus":5}},{"path":"docs/DeveloperGuide.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"# Developer Guide"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"## Implementation of Todo Feature"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"The `todo` feature implemented using `Todo`, which extends `Task`."},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"Upon receiving an input string that has `todo` as the first word, the `Duke` object will instantiate a"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"`Todo` object with the `fullCommand` string, which is the input entered by the user. The `Duke`"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"object will then call the `getResponse` method in the `Todo` object with the `user input` arguments:"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"Finally, the `getResponse` method will execute the following steps:"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"1. Calls `Parser#getCommand(fullCommand)` to get an `Todo` object `todo`;"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"2. Calls `tasks#addTask(todo)` to add `todo` to `tasks`;"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"3. Calls `storage#saveTasks(tasks)` to save all tasks to data file;"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"The following sequence diagram shows the object interactions when the `Duke` object calls the `getResponse` method"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"of the `Todo` object:"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"![TodoSequenceDiagram](./TodoSequenceDiagram.png)"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"The following activity diagram shows what happens when a user enters a `todo` command:"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"![TodoActivityDiagram](./TodoActivityDiagram.png)"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"## User Stories"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"|Version| As a ... | I want to ... | So that I can ...|"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"|--------|----------|---------------|------------------|"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"|v0.1|new user|add a todo task with no deadline|be reminded to do this task|"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"|v0.1|new user|add a deadline task with deadline|be reminded to do this task before the deadline|"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"|v0.1|new user|add a event task with address|be reminded to do this task at correct address|"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"|v0.1|new user|list all tasks|view my assigned tasks|"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"|v0.2|user|find tasks|view specific tasks of interest|"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"|v0.2|user|mark a task as done|know which of the tasks are completed|"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"|v0.2|user|delete a task|remove a task that is no longer needed|"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"|v0.2|user|save all tasks|save all tasks to my local folder|"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"|v0.3|user|check the use help manual|learn how to use the app quickly and easily|"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"## Non-Functional Requirements"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"1. The application should work on any mainstream OS with Java `11` or above installed."},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"2. The response time for each command should not exceed `3` seconds."},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"3. The average typing speed user should be able to enter any one command within `10` seconds."},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"4. The application GUI should be easily and clearly."},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"## Glossary"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"* *Mainstream OS* - Windows 7, Windows 10, Linux, Unix, OS-X"}],"authorContributionMap":{"daiweinus":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"# Jojo"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"![Ui](./Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"Jojo is a Java-based desktop chat-bot application that helps the users keep track of their tasks list."},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"It comes with a Command Line Interface (CLI) and Graphical User Interface (GUI) that allows users to enter their commands."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"Useful links:"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"* [Developer Guide](DeveloperGuide.md)"}],"authorContributionMap":{"daiweinus":7,"-":3}},{"path":"docs/UserGuide.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"# Jojo User Guide"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":"Jojo is a Java-based desktop app that helps the users keep track of the tasks they need to do. "},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"It comes with a Command Line Interface (CLI) that allows users to enter their commands while "},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"retaining the benefits of a Graphical User Interface (GUI). This allows users who type fast to "},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"complete their desired actions quicker than using traditional GUI apps."},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"## Quick Start"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"2. Download the latest ip.jar [here](https://github.com/daiweinus/ip/releases)."},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"3. Open the Terminal/Command Prompt."},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"4. Navigate to the project’s out\\artifacts\\ip_jar."},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"5. Launch the Jojo Chat-bot by running the command java -jar ip.jar."},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"6. Type the command in the CLI program and press Enter to execute it.  "},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"   Some example commands you can try:"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"   + ` todo borrow book `"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"   + `deadline return book /by 2020-09-25`"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"   + `event project meeting /at meeting room #1-12`"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"7. Refer to Features below for details of each command."},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"### Command Summary"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"+ Adding a Todo task: todo"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"+ Adding a Deadline task: deadline"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"+ Adding an Event task: event"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"+ Listing all tasks: list"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"+ Finding a task containing any keyword: find KEY_WORD"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"+ Deleting a task : delete INDEX"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"+ Marking as Done of a task: done INDEX"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"+ Exiting the program : bye"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"+ Saving the tasks to local: save"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"+ Show the command use manual: Help"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"## Features"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"Notes about the command format:"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"+ Words in UPPER_CASE are the parameters to be supplied by the user.  "},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"  ` E.g. DESCRIPTION in the command todo DESCRIPTION. `"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"## Feature 1: Adding a Todo task: todo "},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"Adds a Todo task in the list. ToDos: tasks without any date/time attached."},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"todo Read book"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"  [T][✘] borrow book"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"Now you have 1 tasks in the list."},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"## Feature 2: Adding a Deadline task: deadline"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"Adds a Deadline task. Deadlines: tasks that need to be done before a specific date(yyyy-mm-dd)"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"deadline return book /by 2020-09-25"},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":63,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":64,"author":{"gitId":"daiweinus"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":65,"author":{"gitId":"daiweinus"},"content":"  [D][✘] return book (by: Sep 25 2020)"},{"lineNumber":66,"author":{"gitId":"daiweinus"},"content":"Now you have 2 tasks in the list."},{"lineNumber":67,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":68,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":69,"author":{"gitId":"daiweinus"},"content":"## Feature 3: Adding an Event task: event"},{"lineNumber":70,"author":{"gitId":"daiweinus"},"content":"Adds an Event task. Events: tasks that start at a address."},{"lineNumber":71,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":72,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":73,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":74,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":75,"author":{"gitId":"daiweinus"},"content":"event project meeting /at meeting room #1-12"},{"lineNumber":76,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":77,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":78,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":79,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":80,"author":{"gitId":"daiweinus"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":81,"author":{"gitId":"daiweinus"},"content":"  [E][✘] project meeting (at: meeting room #1-12)"},{"lineNumber":82,"author":{"gitId":"daiweinus"},"content":"Now you have 3 tasks in the list."},{"lineNumber":83,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":84,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":85,"author":{"gitId":"daiweinus"},"content":"## Feature 4: Listing task information: list"},{"lineNumber":86,"author":{"gitId":"daiweinus"},"content":"Lists all tasks in Jojo."},{"lineNumber":87,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":88,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":89,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":90,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":91,"author":{"gitId":"daiweinus"},"content":"list"},{"lineNumber":92,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":93,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":94,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":95,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":96,"author":{"gitId":"daiweinus"},"content":"Here are the tasks in your list:"},{"lineNumber":97,"author":{"gitId":"daiweinus"},"content":"  1. [T][✘] Read book"},{"lineNumber":98,"author":{"gitId":"daiweinus"},"content":"  2. [D][✘] return book (by: Sep 25 2020)"},{"lineNumber":99,"author":{"gitId":"daiweinus"},"content":"  3. [E][✘] project meeting (at: meeting room #1-12)"},{"lineNumber":100,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":101,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":102,"author":{"gitId":"daiweinus"},"content":"## Feature 5: Finding tasks: find KEY_WORD"},{"lineNumber":103,"author":{"gitId":"daiweinus"},"content":"Find tasks in Jojo that match any of the specified keywords."},{"lineNumber":104,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":105,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":106,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":107,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":108,"author":{"gitId":"daiweinus"},"content":"find book"},{"lineNumber":109,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":110,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":111,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":112,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":113,"author":{"gitId":"daiweinus"},"content":"Here are the matching tasks in your list:"},{"lineNumber":114,"author":{"gitId":"daiweinus"},"content":"  1. [T][✘] Read book"},{"lineNumber":115,"author":{"gitId":"daiweinus"},"content":"  2. [D][✘] return book (by: Sep 25 2020)"},{"lineNumber":116,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":117,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":118,"author":{"gitId":"daiweinus"},"content":"## Feature 6: Deleting a task : delete INDEX"},{"lineNumber":119,"author":{"gitId":"daiweinus"},"content":"Deletes the specified task in Duke."},{"lineNumber":120,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":121,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":122,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":123,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":124,"author":{"gitId":"daiweinus"},"content":"delete 2"},{"lineNumber":125,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":126,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":127,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":128,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":129,"author":{"gitId":"daiweinus"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":130,"author":{"gitId":"daiweinus"},"content":"  [D][✘] return book (by: Sep 25 2020)"},{"lineNumber":131,"author":{"gitId":"daiweinus"},"content":"Now you have 2 tasks in the list."},{"lineNumber":132,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":133,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":134,"author":{"gitId":"daiweinus"},"content":"## Feature 7: Deleting a task : delete INDEX"},{"lineNumber":135,"author":{"gitId":"daiweinus"},"content":"Mark specified task as done."},{"lineNumber":136,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":137,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":138,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":139,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":140,"author":{"gitId":"daiweinus"},"content":"done 1"},{"lineNumber":141,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":142,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":143,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":144,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":145,"author":{"gitId":"daiweinus"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":146,"author":{"gitId":"daiweinus"},"content":"[✓] Read book"},{"lineNumber":147,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":148,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":149,"author":{"gitId":"daiweinus"},"content":"## Feature 8: Exiting the program : bye"},{"lineNumber":150,"author":{"gitId":"daiweinus"},"content":"Exits the program."},{"lineNumber":151,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":152,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":153,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":154,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":155,"author":{"gitId":"daiweinus"},"content":"bye"},{"lineNumber":156,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":157,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":158,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":159,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":160,"author":{"gitId":"daiweinus"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":161,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":162,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":163,"author":{"gitId":"daiweinus"},"content":"## Feature 9: Saving the tasks to local: save"},{"lineNumber":164,"author":{"gitId":"daiweinus"},"content":"Save the tasks in the hard disk automatically whenever the task list changes. Load the data from the hard disk when Duke starts up. "},{"lineNumber":165,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":166,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":167,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":168,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":169,"author":{"gitId":"daiweinus"},"content":"save"},{"lineNumber":170,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":171,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":172,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":173,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":174,"author":{"gitId":"daiweinus"},"content":"Tasks save to disk Jojo.txt"},{"lineNumber":175,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":176,"author":{"gitId":"daiweinus"},"content":"## Feature 10: Show the commands use manual: Help"},{"lineNumber":177,"author":{"gitId":"daiweinus"},"content":"Show the commands use manual to users."},{"lineNumber":178,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":179,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":180,"author":{"gitId":"daiweinus"},"content":"### Usage"},{"lineNumber":181,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":182,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":183,"author":{"gitId":"daiweinus"},"content":"help"},{"lineNumber":184,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":185,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":186,"author":{"gitId":"daiweinus"},"content":"Expected outcomes:"},{"lineNumber":187,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":188,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":189,"author":{"gitId":"daiweinus"},"content":"List of commands:"},{"lineNumber":190,"author":{"gitId":"daiweinus"},"content":"-\u003e list: lists out all tasks.\\n\""},{"lineNumber":191,"author":{"gitId":"daiweinus"},"content":"-\u003e todo {detail}: add a todo item.\\n\""},{"lineNumber":192,"author":{"gitId":"daiweinus"},"content":"-\u003e event {detail} /at {address}: add an event item.\\n\""},{"lineNumber":193,"author":{"gitId":"daiweinus"},"content":"-\u003e deadline {detail} /at {datetime yyyy-MM-dd HHmm format}: add a deadline item.\\n\""},{"lineNumber":194,"author":{"gitId":"daiweinus"},"content":"-\u003e delete {index}: removes the item(s) at the specified position(s).\\n\""},{"lineNumber":195,"author":{"gitId":"daiweinus"},"content":"-\u003e done {index}: marks the item as done.\\n\""},{"lineNumber":196,"author":{"gitId":"daiweinus"},"content":"-\u003e find {detail}: searches for a task contain that detail.\\n\""},{"lineNumber":197,"author":{"gitId":"daiweinus"},"content":"-\u003e help: show user the app commands use manual.\\n\""},{"lineNumber":198,"author":{"gitId":"daiweinus"},"content":"-\u003e save: save all change to filepath data.txt.\\n\";"},{"lineNumber":199,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":200,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":201,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":202,"author":{"gitId":"daiweinus"},"content":"Hello from"},{"lineNumber":203,"author":{"gitId":"daiweinus"},"content":"```"},{"lineNumber":204,"author":{"gitId":"daiweinus"},"content":"  __          __ "},{"lineNumber":205,"author":{"gitId":"daiweinus"},"content":"  | | ____    | | ____"},{"lineNumber":206,"author":{"gitId":"daiweinus"},"content":"  | |/ __ \\   | |/ __ \\"},{"lineNumber":207,"author":{"gitId":"daiweinus"},"content":"__/ | |__| |__/ | |__| |"},{"lineNumber":208,"author":{"gitId":"daiweinus"},"content":"\\__/ \\____/ \\__/ \\____/"},{"lineNumber":209,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":210,"author":{"gitId":"daiweinus"},"content":"```"}],"authorContributionMap":{"daiweinus":210}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"daiweinus"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":65,"author":{"gitId":"daiweinus"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":67,"author":{"gitId":"daiweinus"},"content":":init"},{"lineNumber":68,"author":{"gitId":"daiweinus"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":70,"author":{"gitId":"daiweinus"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":72,"author":{"gitId":"daiweinus"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"daiweinus"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"daiweinus"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"daiweinus"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":77,"author":{"gitId":"daiweinus"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"daiweinus"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":80,"author":{"gitId":"daiweinus"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":82,"author":{"gitId":"daiweinus"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"daiweinus"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":85,"author":{"gitId":"daiweinus"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":87,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":88,"author":{"gitId":"daiweinus"},"content":"@rem Execute Gradle"},{"lineNumber":89,"author":{"gitId":"daiweinus"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":90,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":91,"author":{"gitId":"daiweinus"},"content":":end"},{"lineNumber":92,"author":{"gitId":"daiweinus"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":93,"author":{"gitId":"daiweinus"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":94,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":95,"author":{"gitId":"daiweinus"},"content":":fail"},{"lineNumber":96,"author":{"gitId":"daiweinus"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":97,"author":{"gitId":"daiweinus"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":98,"author":{"gitId":"daiweinus"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":99,"author":{"gitId":"daiweinus"},"content":"exit /b 1"},{"lineNumber":100,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":101,"author":{"gitId":"daiweinus"},"content":":mainEnd"},{"lineNumber":102,"author":{"gitId":"daiweinus"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":103,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":104,"author":{"gitId":"daiweinus"},"content":":omega"}],"authorContributionMap":{"daiweinus":104}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import duke.command.Parser;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"import duke.command.Storage;"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import duke.command.TaskException;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"import duke.command.TaskList;"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"import duke.command.Ui;"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":" * This class implements simple Duke chat bot named Jojo,that can write, read and save"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":" * tasks in the assigned filePath."},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":" * This Duke class contained 3 methods Duke ,run and main."},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"@SuppressWarnings(\"checkstyle:RightCurly\")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"    public TaskList tasks;"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"    public Ui ui;"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"    public Storage storage;"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"     * This constructs is TaskManager with a filePath,"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"     * This TaskManager try call save.readTaskFromFile to load tasks from filePath"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"     * and throw an exception if the file does not exist yet!"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"    public Duke() {"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"        ui \u003d new Ui();"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"        storage \u003d new Storage(\"data.txt\");"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"            tasks \u003d new TaskList(storage.readTaskFromFile());"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"        } catch (TaskException e) {"},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"            ui.showToUser(\"OOPS!!!folder does not exist yet!\");"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"     * This run method switch different duke command to different method."},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"    @SuppressWarnings(\"checkstyle:Indentation\")"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"    public String getResponse(String input) {"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"            String commandWord \u003d Parser.getCommand(input);//convert command word to lowercase"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"            switch (commandWord) {"},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"            case \"bye\":"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"                System.exit(0); // End program"},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"            case \"todo\":"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"                return tasks.addTodo(input);"},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":"            case \"deadline\":"},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"                return tasks.addDeadline(input);"},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"            case \"done\":"},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"                return tasks.markAsDone(input);"},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"            case \"list\":"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":"                return tasks.showTasks(input);"},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"            case \"event\":"},{"lineNumber":63,"author":{"gitId":"daiweinus"},"content":"                return tasks.addEvent(input);"},{"lineNumber":64,"author":{"gitId":"daiweinus"},"content":"            case \"delete\":"},{"lineNumber":65,"author":{"gitId":"daiweinus"},"content":"                return tasks.deleteTasks(input);"},{"lineNumber":66,"author":{"gitId":"daiweinus"},"content":"            case \"find\":"},{"lineNumber":67,"author":{"gitId":"daiweinus"},"content":"                return tasks.findTasks(input);"},{"lineNumber":68,"author":{"gitId":"daiweinus"},"content":"            case \"save\":"},{"lineNumber":69,"author":{"gitId":"daiweinus"},"content":"                return tasks.saveTasks();"},{"lineNumber":70,"author":{"gitId":"daiweinus"},"content":"            case \"help\":"},{"lineNumber":71,"author":{"gitId":"daiweinus"},"content":"                return ui.showHelp();"},{"lineNumber":72,"author":{"gitId":"daiweinus"},"content":"            default:"},{"lineNumber":73,"author":{"gitId":"daiweinus"},"content":"                ui.printError();"},{"lineNumber":74,"author":{"gitId":"daiweinus"},"content":"                break;"},{"lineNumber":75,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"daiweinus"},"content":"        } catch (TaskException e) {"},{"lineNumber":77,"author":{"gitId":"daiweinus"},"content":"            return String.valueOf(e);"},{"lineNumber":78,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"daiweinus"},"content":"        return \"Oops, I didn\u0027t understand your command: \" + input + \"\\nPlease try use \u0027help\u0027 command.\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daiweinus":79,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"            stage.setTitle(\"Jojo, a Personal Assistant Chat-bot\");"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import duke.command.Ui;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"                DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage)"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"        );"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"    private void handleUserInput() {"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"        );"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"        userInput.clear();"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":56}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import duke.task.Todo;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":" *This Parser class is to parser users\u0027 command and create todo, deadline, event tasks."},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"    //public TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"    private static String commandWord;"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"     * This constructs parser with command string."},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"     * @param commandWord user command string"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"    public Parser(String commandWord) {"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"        Parser.commandWord \u003d commandWord;"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"     * This function is get key command word from full command."},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"     * @param fullCommand tasks\u0027 full command"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"     * @return tasks\u0027 commandWord"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"    public static String getCommand(String fullCommand) {"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"        commandWord \u003d fullCommand.trim().split(\" \")[0];"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"        return commandWord;"},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"     * This function is create todo object in task arraylist."},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"     * @param line tasks\u0027 full command"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"     * @return tasks\u0027 Todo"},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"     * @throws TaskException if empty description for todo can"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"     *                              throw this exception."},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"    public static Todo createTodo(String line) throws TaskException {"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"        String substring \u003d line.trim().substring(\"todo\".length());"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"        String description \u003d substring.trim();"},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"        if (description.isEmpty()) {"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"            throw new TaskException(\"\\nOOPS!!! Empty description for TODO\");"},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"        return new Todo(substring.trim());"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"     * This function is create deadline object in task arraylist."},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"     * @param line tasks\u0027 full command"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":"     * @return tasks\u0027 Deadline and by"},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"     * @throws TaskException if empty description for deadline and /by can"},{"lineNumber":63,"author":{"gitId":"daiweinus"},"content":"     *                              throw this exception."},{"lineNumber":64,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"daiweinus"},"content":"    public static Deadline createDeadline(String line) throws TaskException {"},{"lineNumber":66,"author":{"gitId":"daiweinus"},"content":"        String description \u003d line.substring(\"deadline\".trim().length());"},{"lineNumber":67,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":68,"author":{"gitId":"daiweinus"},"content":"        if (description.isEmpty()) {"},{"lineNumber":69,"author":{"gitId":"daiweinus"},"content":"            throw new TaskException(\"\\nOOPS!!! Empty description for Deadline\");"},{"lineNumber":70,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"daiweinus"},"content":"        if (!description.contains(\"/by\")) {"},{"lineNumber":72,"author":{"gitId":"daiweinus"},"content":"            throw new TaskException(\"\\nOOPS!!!: need \u0027/by\u0027 for DEADLINE\");"},{"lineNumber":73,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"daiweinus"},"content":"        if (description.trim().split(\"/by\",2)[1].isBlank()) {"},{"lineNumber":75,"author":{"gitId":"daiweinus"},"content":"            throw new TaskException(\"\\nOOPS!!!:  Empty description for Event /by\");"},{"lineNumber":76,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"daiweinus"},"content":"        return new Deadline(line.trim().substring(\"deadline\".length()).trim().split(\" /by\")[0],"},{"lineNumber":78,"author":{"gitId":"daiweinus"},"content":"                line.trim().split(\"/by \")[1]);"},{"lineNumber":79,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":81,"author":{"gitId":"daiweinus"},"content":"    @SuppressWarnings(\"checkstyle:WhitespaceAround\")"},{"lineNumber":82,"author":{"gitId":"daiweinus"},"content":"    public static Event createEvent(String line) throws TaskException {"},{"lineNumber":83,"author":{"gitId":"daiweinus"},"content":"        String description \u003d line.substring(\"event\".trim().length());"},{"lineNumber":84,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":85,"author":{"gitId":"daiweinus"},"content":"        if (description.isEmpty()) {"},{"lineNumber":86,"author":{"gitId":"daiweinus"},"content":"            throw new TaskException(\"\\nOOPS!!! Empty description for Event\");"},{"lineNumber":87,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"daiweinus"},"content":"        if (!description.contains(\"/at\")) {"},{"lineNumber":89,"author":{"gitId":"daiweinus"},"content":"            throw new TaskException(\"\\nOOPS!!!: need \u0027/at\u0027 for Event\");"},{"lineNumber":90,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"daiweinus"},"content":"        if (description.trim().split(\"/at\",2)[1].isBlank()) {"},{"lineNumber":92,"author":{"gitId":"daiweinus"},"content":"            throw new TaskException(\"\\nOOPS!!!:  Empty description for Event /at\");"},{"lineNumber":93,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"daiweinus"},"content":"        return new Event(line.trim().substring(\"event\".length()).trim().split(\" /at\")[0],"},{"lineNumber":95,"author":{"gitId":"daiweinus"},"content":"                    line.trim().split(\"/at \")[1]);"},{"lineNumber":96,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":97,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":99,"author":{"gitId":"daiweinus"},"content":"}"},{"lineNumber":100,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":101,"author":{"gitId":"daiweinus"},"content":""}],"authorContributionMap":{"daiweinus":101}},{"path":"src/main/java/duke/command/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"import java.io.BufferedReader;"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"import java.io.BufferedWriter;"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"import java.io.FileReader;"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"import java.io.FileWriter;"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"import java.time.LocalDate;"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"    private static String filePath;"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"     * This constructs duke tasks with string filepath."},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"     * @param filePath task save file path."},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"    public Storage(String filePath) {"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"        Storage.filePath \u003d filePath;"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"     * This function is to save tasks in storage file."},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"    public static String writeTaskToFile(List\u003cTask\u003e tasks) {"},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"        File out \u003d new File(filePath);"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"        try (BufferedWriter bw \u003d new BufferedWriter(new FileWriter(out))) {"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"            for (Task task : tasks) {"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"                if (task instanceof Deadline) {"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"                    bw.append(\"D \");"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"                    bw.append(\"| \").append(task.isDone() ? \"1\" : \"0\").append(\" | \")"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"                            .append(task.getDescription()).append(\" | \").append(((Deadline) task).getBy());"},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"                } else if (task instanceof Event) {"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"                    bw.append(\"E \");"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"                    bw.append(\" | \").append(task.isDone() ? \"1\" : \"0\").append(\" | \")"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"                            .append(task.getDescription()).append(\" | \").append(((Event) task).getAt());"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"                } else if (task instanceof Todo) {"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"                    bw.append(\"T \");"},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"                    bw.append(\" | \").append(task.isDone() ? \"1\" : \"0\").append(\" | \")"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"                            .append(task.getDescription());"},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"                bw.append(System.lineSeparator());"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":"        } catch (IOException ex) {"},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"            ui.showToUser(ex.getMessage());"},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"        return \"Tasks save to disk \" + filePath;"},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"daiweinus"},"content":"     * This function is to read task from storage file line by line."},{"lineNumber":64,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"daiweinus"},"content":"     * @param filePath tasks\u0027 save filepath."},{"lineNumber":66,"author":{"gitId":"daiweinus"},"content":"     * @return tasks line by line."},{"lineNumber":67,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"daiweinus"},"content":"    public List\u003cString\u003e getLines(String filePath) {"},{"lineNumber":69,"author":{"gitId":"daiweinus"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitId":"daiweinus"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(filePath))) {"},{"lineNumber":71,"author":{"gitId":"daiweinus"},"content":"            for (String line; (line \u003d br.readLine()) !\u003d null; ) {"},{"lineNumber":72,"author":{"gitId":"daiweinus"},"content":"                lines.add(line);"},{"lineNumber":73,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"daiweinus"},"content":"        } catch (IOException ex) {"},{"lineNumber":75,"author":{"gitId":"daiweinus"},"content":"            ui.showToUser(ex.getMessage());"},{"lineNumber":76,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"daiweinus"},"content":"        ui.showToUser(lines);"},{"lineNumber":78,"author":{"gitId":"daiweinus"},"content":"        return lines;"},{"lineNumber":79,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":81,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"daiweinus"},"content":"     * his function is to convert the line to a task and add to the list."},{"lineNumber":83,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"daiweinus"},"content":"     * @param line storage tasks line by line"},{"lineNumber":85,"author":{"gitId":"daiweinus"},"content":"     * @return task array list"},{"lineNumber":86,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"daiweinus"},"content":"    @SuppressWarnings(\"checkstyle:Indentation\")"},{"lineNumber":88,"author":{"gitId":"daiweinus"},"content":"    public static Task createTask(String line) throws TaskException {"},{"lineNumber":89,"author":{"gitId":"daiweinus"},"content":"        Task task \u003d null;"},{"lineNumber":90,"author":{"gitId":"daiweinus"},"content":"        String type \u003d line.split(\"\\\\|\")[0].trim();"},{"lineNumber":91,"author":{"gitId":"daiweinus"},"content":"        boolean isDone \u003d line.split(\"\\\\|\")[1].trim().equals(\"1\");"},{"lineNumber":92,"author":{"gitId":"daiweinus"},"content":"        String desc \u003d line.split(\"\\\\|\")[2].trim();"},{"lineNumber":93,"author":{"gitId":"daiweinus"},"content":"        switch (type) {"},{"lineNumber":94,"author":{"gitId":"daiweinus"},"content":"        case \"T\":"},{"lineNumber":95,"author":{"gitId":"daiweinus"},"content":"            task \u003d new Todo(desc);"},{"lineNumber":96,"author":{"gitId":"daiweinus"},"content":"            task.setDone(isDone);"},{"lineNumber":97,"author":{"gitId":"daiweinus"},"content":"            break;"},{"lineNumber":98,"author":{"gitId":"daiweinus"},"content":"        case \"D\":"},{"lineNumber":99,"author":{"gitId":"daiweinus"},"content":"            String by \u003d line.split(\"\\\\|\")[3].trim();"},{"lineNumber":100,"author":{"gitId":"daiweinus"},"content":"            task \u003d new Deadline(desc, getDate(by));"},{"lineNumber":101,"author":{"gitId":"daiweinus"},"content":"            task.setDone(isDone);"},{"lineNumber":102,"author":{"gitId":"daiweinus"},"content":"            break;"},{"lineNumber":103,"author":{"gitId":"daiweinus"},"content":"        case \"E\":"},{"lineNumber":104,"author":{"gitId":"daiweinus"},"content":"            String at \u003d line.split(\"\\\\|\")[3].trim();"},{"lineNumber":105,"author":{"gitId":"daiweinus"},"content":"            task \u003d new Event(desc, at);"},{"lineNumber":106,"author":{"gitId":"daiweinus"},"content":"            task.setDone(isDone);"},{"lineNumber":107,"author":{"gitId":"daiweinus"},"content":"            break;"},{"lineNumber":108,"author":{"gitId":"daiweinus"},"content":"        default:"},{"lineNumber":109,"author":{"gitId":"daiweinus"},"content":"            break;"},{"lineNumber":110,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"daiweinus"},"content":"        return task;"},{"lineNumber":112,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":114,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"daiweinus"},"content":"     * This function is to convert MMM d yyyy string to yyyy-MM-dd."},{"lineNumber":116,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"daiweinus"},"content":"     * @param startDate input date string MMM d yyyy"},{"lineNumber":118,"author":{"gitId":"daiweinus"},"content":"     * @return output date string yyyy-MM-dd"},{"lineNumber":119,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"daiweinus"},"content":"    public static String getDate(String startDate) {"},{"lineNumber":121,"author":{"gitId":"daiweinus"},"content":"        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"},{"lineNumber":122,"author":{"gitId":"daiweinus"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":123,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":124,"author":{"gitId":"daiweinus"},"content":"        return LocalDate.parse(startDate, inputFormat).format(outputFormat);"},{"lineNumber":125,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":127,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"daiweinus"},"content":"     * This function is to load tasks from storage file."},{"lineNumber":129,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"daiweinus"},"content":"     * @return loaded tasks"},{"lineNumber":131,"author":{"gitId":"daiweinus"},"content":"     * @throws TaskException if problem reading file can throw this exception."},{"lineNumber":132,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"daiweinus"},"content":"    public List\u003cTask\u003e readTaskFromFile() throws TaskException {"},{"lineNumber":134,"author":{"gitId":"daiweinus"},"content":"        List\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":135,"author":{"gitId":"daiweinus"},"content":"        List\u003cString\u003e lines \u003d getLines(filePath);"},{"lineNumber":136,"author":{"gitId":"daiweinus"},"content":"        for (String line : lines) {"},{"lineNumber":137,"author":{"gitId":"daiweinus"},"content":"            if (line.trim().isEmpty()) { //ignore empty lines"},{"lineNumber":138,"author":{"gitId":"daiweinus"},"content":"                throw new TaskException(\"OOPS!!!folder does not exist yet!\");"},{"lineNumber":139,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"daiweinus"},"content":"            loadedTasks.add(createTask(line)); //convert the line to a task and add to the list"},{"lineNumber":141,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"daiweinus"},"content":"        return loadedTasks;"},{"lineNumber":143,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":144}},{"path":"src/main/java/duke/command/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":" *This Exceptions class is to throw project run time error."},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"// using A Exceptions to throw error"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"public class TaskException extends Exception {"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"    public TaskException(String message) {"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":15}},{"path":"src/main/java/duke/command/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":" * This TaskList class to add Task,deadline, event in duke task list,"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":" * and edit, delete the duke Task."},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"public class TaskList {"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"    //  Use Java Collections classes ArrayList\u003cTask\u003e"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"    //private final StringBuilder output \u003d new StringBuilder();"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"     * This constructs a TaskList with a ListTask parameter."},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"     * @param tasks tasks"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"    public TaskList() {"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"     * This function is to add todo."},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"     * @param fullCommand tasks\u0027 full command"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"     * @throws TaskException if create todo have error can throw this exception."},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"    public String addTodo(String fullCommand) throws TaskException {"},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"        Todo t \u003d Parser.createTodo(fullCommand);"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"        tasks.add(t);"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"        output.append(\"\\nGot it. I\u0027ve added this task: \\n\");"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"        output.append(\"  \").append(tasks.get(tasks.size() - 1).toString());"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"        output.append(\"\\nNow you have \").append(tasks.size()).append(\" tasks in the list.\\n\");"},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"        return String.valueOf(output);"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"     * This function is to add deadline."},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"     * @param fullCommand tasks\u0027 full command."},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"     * @throws TaskException if create deadline have error can throw this exception."},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"    public String addDeadline(String fullCommand) throws TaskException {"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"        Deadline t \u003d Parser.createDeadline(fullCommand);"},{"lineNumber":63,"author":{"gitId":"daiweinus"},"content":"        tasks.add(t);"},{"lineNumber":64,"author":{"gitId":"daiweinus"},"content":"        output.append(\"\\nGot it. I\u0027ve added this task: \\n\");"},{"lineNumber":65,"author":{"gitId":"daiweinus"},"content":"        output.append(\"  \").append(tasks.get(tasks.size() - 1).toString());"},{"lineNumber":66,"author":{"gitId":"daiweinus"},"content":"        output.append(\"\\nNow you have \").append(tasks.size()).append(\" tasks in the list.\\n\");"},{"lineNumber":67,"author":{"gitId":"daiweinus"},"content":"        return String.valueOf(output);"},{"lineNumber":68,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":70,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"daiweinus"},"content":"     *This function is to add event."},{"lineNumber":72,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"daiweinus"},"content":"     * @param fullCommand tasks\u0027 full command"},{"lineNumber":74,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"daiweinus"},"content":"    public String addEvent(String fullCommand) throws TaskException {"},{"lineNumber":76,"author":{"gitId":"daiweinus"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":77,"author":{"gitId":"daiweinus"},"content":"        Event t \u003d Parser.createEvent(fullCommand);"},{"lineNumber":78,"author":{"gitId":"daiweinus"},"content":"        tasks.add(t);"},{"lineNumber":79,"author":{"gitId":"daiweinus"},"content":"        output.append(\"\\nGot it. I\u0027ve added this task: \\n\");"},{"lineNumber":80,"author":{"gitId":"daiweinus"},"content":"        output.append(\"  \").append(tasks.get(tasks.size() - 1).toString());"},{"lineNumber":81,"author":{"gitId":"daiweinus"},"content":"        output.append(\"\\nNow you have \").append(tasks.size()).append(\" tasks in the list.\\n\");"},{"lineNumber":82,"author":{"gitId":"daiweinus"},"content":"        return String.valueOf(output);"},{"lineNumber":83,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":85,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"daiweinus"},"content":"     *This function is to print tasks."},{"lineNumber":87,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"daiweinus"},"content":"     * @param fullCommand tasks\u0027 full command"},{"lineNumber":89,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"daiweinus"},"content":"    public String showTasks(String fullCommand) {"},{"lineNumber":91,"author":{"gitId":"daiweinus"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":92,"author":{"gitId":"daiweinus"},"content":"        output.append(\"\\nHere are the tasks in your list:\\n\");"},{"lineNumber":93,"author":{"gitId":"daiweinus"},"content":"        String description \u003d fullCommand.trim().substring(\"list\".length()).trim();"},{"lineNumber":94,"author":{"gitId":"daiweinus"},"content":"        if (description.isEmpty()) {"},{"lineNumber":95,"author":{"gitId":"daiweinus"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":96,"author":{"gitId":"daiweinus"},"content":"                output.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":97,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"daiweinus"},"content":"            return String.valueOf(output);"},{"lineNumber":99,"author":{"gitId":"daiweinus"},"content":"        } else {"},{"lineNumber":100,"author":{"gitId":"daiweinus"},"content":"            try {"},{"lineNumber":101,"author":{"gitId":"daiweinus"},"content":"                int index \u003d Integer.parseInt(description);"},{"lineNumber":102,"author":{"gitId":"daiweinus"},"content":"                if (index \u003c\u003d tasks.size() \u0026\u0026 index \u003e 0) {"},{"lineNumber":103,"author":{"gitId":"daiweinus"},"content":"                    return \"[\" + (index) + \"] \" + tasks.get(index - 1);"},{"lineNumber":104,"author":{"gitId":"daiweinus"},"content":"                } else {"},{"lineNumber":105,"author":{"gitId":"daiweinus"},"content":"                    return \"\\nOOPS!!!Printing range should be 1 to \" + tasks.size();"},{"lineNumber":106,"author":{"gitId":"daiweinus"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"daiweinus"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":108,"author":{"gitId":"daiweinus"},"content":"                return \"\\nOOPS!!!Print command should be ‘print\u0027 or \u0027print INTEGER\u0027\\n\";"},{"lineNumber":109,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":113,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"daiweinus"},"content":"     *This function is to mark tasks as done."},{"lineNumber":115,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"daiweinus"},"content":"     * @param fullCommand tasks\u0027 full command"},{"lineNumber":117,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"daiweinus"},"content":"    public String markAsDone(String fullCommand) {"},{"lineNumber":119,"author":{"gitId":"daiweinus"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"daiweinus"},"content":"            int index \u003d Integer.parseInt(fullCommand.substring(\"done\".length()).trim());"},{"lineNumber":121,"author":{"gitId":"daiweinus"},"content":"            //assert index \u003c\u003d tasks.size() : \"\\nOOPS!!!Command number is invalid\\n\";"},{"lineNumber":122,"author":{"gitId":"daiweinus"},"content":"            //assert error when index bigger than tasks size."},{"lineNumber":123,"author":{"gitId":"daiweinus"},"content":"            if (index \u003c\u003d tasks.size() \u0026\u0026 index \u003e 0) {"},{"lineNumber":124,"author":{"gitId":"daiweinus"},"content":"                tasks.get(index - 1).setDone(true);"},{"lineNumber":125,"author":{"gitId":"daiweinus"},"content":"                return \"\\nTasks: \" + index + \" has marked as DONE.\";"},{"lineNumber":126,"author":{"gitId":"daiweinus"},"content":"            } else {"},{"lineNumber":127,"author":{"gitId":"daiweinus"},"content":"                return \"\\nOOPS!!!Marking as done range should be smaller than tasks size: \" + tasks.size();"},{"lineNumber":128,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"daiweinus"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":130,"author":{"gitId":"daiweinus"},"content":"            return \"\\nOOPS!!!markAsDone command not Integer!\\n\";"},{"lineNumber":131,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":134,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"daiweinus"},"content":"     *This function is to deleted tasks from task list."},{"lineNumber":136,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"daiweinus"},"content":"     * @param fullCommand tasks\u0027 full command"},{"lineNumber":138,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"daiweinus"},"content":"    public String deleteTasks(String fullCommand) {"},{"lineNumber":140,"author":{"gitId":"daiweinus"},"content":"        try {"},{"lineNumber":141,"author":{"gitId":"daiweinus"},"content":"            int index \u003d Integer.parseInt(fullCommand.substring(\"delete\".length()).trim());"},{"lineNumber":142,"author":{"gitId":"daiweinus"},"content":"            StringBuilder output \u003d new StringBuilder();"},{"lineNumber":143,"author":{"gitId":"daiweinus"},"content":"            if (index \u003c\u003d tasks.size() \u0026\u0026 index \u003e 0) {"},{"lineNumber":144,"author":{"gitId":"daiweinus"},"content":"                output.append(\"\\nNoted. I\u0027ve removed this task: \\n\" + \"  \").append(tasks.get(index - 1));"},{"lineNumber":145,"author":{"gitId":"daiweinus"},"content":"                tasks.remove(index - 1);"},{"lineNumber":146,"author":{"gitId":"daiweinus"},"content":"                output.append(\"\\nNow you have \").append(tasks.size()).append(\" tasks in the list.\\n\");"},{"lineNumber":147,"author":{"gitId":"daiweinus"},"content":"                return String.valueOf(output);"},{"lineNumber":148,"author":{"gitId":"daiweinus"},"content":"            } else {"},{"lineNumber":149,"author":{"gitId":"daiweinus"},"content":"                return \"\\nOOPS!!! Deleting range should be smaller than tasks size: \" + tasks.size();"},{"lineNumber":150,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"daiweinus"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":152,"author":{"gitId":"daiweinus"},"content":"            return \"\\nOOPS!!! Deleted command not Integer!\\n\";"},{"lineNumber":153,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":156,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"daiweinus"},"content":"     *This function is to call saveTasks method to save tasks in user driver."},{"lineNumber":158,"author":{"gitId":"daiweinus"},"content":"     * @return null"},{"lineNumber":159,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"daiweinus"},"content":"    public String saveTasks() {"},{"lineNumber":161,"author":{"gitId":"daiweinus"},"content":"        return Storage.writeTaskToFile(tasks);"},{"lineNumber":162,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":164,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"daiweinus"},"content":"     * This function is to find tasks from task list."},{"lineNumber":166,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"daiweinus"},"content":"     * @param fullCommand tasks\u0027 full command"},{"lineNumber":168,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"daiweinus"},"content":"    public String findTasks(String fullCommand) {"},{"lineNumber":170,"author":{"gitId":"daiweinus"},"content":"        List\u003cString\u003e ss \u003d new ArrayList\u003c\u003e();"},{"lineNumber":171,"author":{"gitId":"daiweinus"},"content":"        StringBuilder findList \u003d new StringBuilder();"},{"lineNumber":172,"author":{"gitId":"daiweinus"},"content":"        String description \u003d fullCommand.trim().substring(\"find\".length()).trim();"},{"lineNumber":173,"author":{"gitId":"daiweinus"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":174,"author":{"gitId":"daiweinus"},"content":"            String s \u003d tasks.get(i).toString();"},{"lineNumber":175,"author":{"gitId":"daiweinus"},"content":"            if (s.contains(description)) {"},{"lineNumber":176,"author":{"gitId":"daiweinus"},"content":"                ss.add(i + 1 + \".\" + s + \u0027\\n\u0027);"},{"lineNumber":177,"author":{"gitId":"daiweinus"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"daiweinus"},"content":"        if (ss.size() !\u003d 0) {"},{"lineNumber":180,"author":{"gitId":"daiweinus"},"content":"            findList.append(\"\\nHere are the matching tasks in your list: \\n\");"},{"lineNumber":181,"author":{"gitId":"daiweinus"},"content":"            ss.forEach(findList::append);"},{"lineNumber":182,"author":{"gitId":"daiweinus"},"content":"            return String.valueOf(findList);"},{"lineNumber":183,"author":{"gitId":"daiweinus"},"content":"        } else {"},{"lineNumber":184,"author":{"gitId":"daiweinus"},"content":"            return \"\\nOOPS!!! Our list not contain \" + \"\u0027\" + description + \"\u0027.\\n\";"},{"lineNumber":185,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":188,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":188}},{"path":"src/main/java/duke/command/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.command; // Organize the classes into suitable duke.command packages."},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":" *This Ui class is to read user command and print duke logo \u0026 error."},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"     * print the duke chat bot logo."},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"    public static String showWelcome() {"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"        String logo \u003d \"   __            __ \\n\""},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"                + \"   | |  ____    | |  ____\\n\""},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"                + \"   | | / __ \\\\   | | / __ \\\\\\n\""},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"                + \"__/ |  |__| |__/ |  |__| |\\n\""},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"                + \"\\\\__/ \\\\__/ \\\\__/  \\\\___/\\n\";"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"        String greet \u003d \"Hi! I\u0027m Jojo\\n\" + \"What can I do for you?\";"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"        return \"Hello from\\n\" + logo + greet;"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"     * print out error message."},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"    public void printError() {"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"     * help chat bot print message to user."},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"     * @param s string"},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"    public void showToUser(String s) {"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"        System.out.println(s);"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"    public void showToUser(List\u003cString\u003e s) {"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"        System.out.println(s);"},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"     * print help message with command help."},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"    public String showHelp() {"},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"        return \"List of commands:\\n\""},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e list: lists out all tasks.\\n\""},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e todo {detail}: add a todo item.\\n\""},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e event {detail} /at {address}: add an event item.\\n\""},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e deadline {detail} /at {datetime yyyy-MM-dd HHmm format}: add a deadline item.\\n\""},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e delete {index}: removes the item(s) at the specified position(s).\\n\""},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e done {index}: marks the item as done.\\n\""},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e find {detail}: searches for a task contain that detail.\\n\""},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e help: show user the app commands use manual.\\n\""},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"                + \"-\u003e save: save all change to filepath data.txt.\\n\";"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":62}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.task;// Organize the classes into suitable duke.Tasks packages."},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import duke.command.TaskException;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":" * This Deadline class extends from task object."},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"public class Deadline extends Task {"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"    protected LocalDate by;"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"     * entity deadline."},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"     * @param description tasks\u0027 description"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"     * @param by          tasks\u0027 deadline time"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"    public Deadline(String description, String by) throws TaskException {"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"        super(description);"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"            throw new TaskException(\"\\nThe by field should be in yyyy-MM-dd HHmm format.\");"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"     * get user command description of by."},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"     * @return by"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"    public String getBy() {"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"        return by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"     * override the to string method."},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"     * @return user command Deadline to \"[D]\""},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"        return \"[D]\" + super.printDescription() + \" (by: \" + getBy() + \")\";"},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":55}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":" * This Event class extends from task object."},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"    protected String at;"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"     * entity Event."},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"     * @param description tasks\u0027 description"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"     * @param at          tasks\u0027 event time"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"    public Event(String description, String at) {"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"        this.at \u003d at;"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"     * get user command description of at."},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"     * @return at"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"    public String getAt() {"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"        return at;"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"     * override the to string method."},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"     * @return user event Deadline to \"[E]\""},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"        return \"[E]\" + super.printDescription() + \" (at: \" + at + \")\";"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":" * This class to create task object."},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"public abstract class Task {"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"    protected String description;"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"     * entity task."},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"     * @param description user tasks description"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"    public Task(String description) {"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"     * This function is get done or noe statues icon symbols."},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"     * @return tick or X symbols"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"    public String getStatusIcon() {"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"     * This constructs s setDone with is done."},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":"     * @param isDone set status done"},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":"     * This constructs return description."},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"daiweinus"},"content":"     * @return user command description"},{"lineNumber":46,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"daiweinus"},"content":"    public String getDescription() {"},{"lineNumber":48,"author":{"gitId":"daiweinus"},"content":"        return this.description;"},{"lineNumber":49,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":51,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"daiweinus"},"content":"     * Abstarct the toString method."},{"lineNumber":53,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"daiweinus"},"content":"     * @return void"},{"lineNumber":55,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"daiweinus"},"content":"    public abstract String toString();"},{"lineNumber":57,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":58,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"daiweinus"},"content":"     * print the user command with status icon."},{"lineNumber":60,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"daiweinus"},"content":"     * @return user command with status icon"},{"lineNumber":62,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"daiweinus"},"content":"    public String printDescription() {"},{"lineNumber":64,"author":{"gitId":"daiweinus"},"content":"        return \"[\" + getStatusIcon() + \"]\" + \" \" + getDescription();"},{"lineNumber":65,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":67,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"daiweinus"},"content":"     * set user command to isDone."},{"lineNumber":69,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"daiweinus"},"content":"     * @return user command status"},{"lineNumber":71,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"daiweinus"},"content":"    public boolean isDone() {"},{"lineNumber":73,"author":{"gitId":"daiweinus"},"content":"        return isDone;"},{"lineNumber":74,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":76,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":76}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":" * This class extends from task object."},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":" *"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":" * @author Dai Wei"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":" * @version Finial version 2020.9.9"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":" * @since Duke javadoc"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"public class Todo extends Task {"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"     * entity todo."},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"     * @param description users\u0027 tasks\u0027 description."},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"    public Todo(String description) {"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"     * override the to string method."},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"     * @return user command todo to \"[T]\""},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"        return \"[T]\" + super.printDescription();"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":30}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" minHeight\u003d\"-Infinity\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"daiweinus":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"daiweinus":19}},{"path":"test/java/duke/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"    public void getCommandWord() {"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"        assertEquals(\"todo\", Parser.getCommand(\"todo read book\"));"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"        assertEquals(\"deadline\", Parser.getCommand(\"deadline return book /by next Friday\"));"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"        assertEquals(\"exit\", Parser.getCommand(\"exit\"));"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":14}},{"path":"test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"    public void testStringConversion() {"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"        assertEquals(\"[D][✘] 111 (by: Sep 18 2020)\" , new Deadline(\"111\", \"2020-09-18\").toString());"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":12}},{"path":"test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"    public void testStringConversion() {"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":"        assertEquals(\"[E][✘] project meeting (at: meeting room #1-2)\" , new Event(\"project meeting\", \"meeting room #1-2\").toString());"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":"list"},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"deadline return book /by today"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":"event project meeting /at Mon 2-4pm"}],"authorContributionMap":{"daiweinus":4}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"daiweinus":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"daiweinus":1,"-":37}}]
