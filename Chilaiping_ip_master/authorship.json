[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"# Duke - Tasks Handler"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"The project template for a greenfield Java project provided by Lecturer. It\u0027s named after the Java mascot _Duke_. "},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"Given below are instructions on how to use it."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"## Project Overview and Operations"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"This project is to manage Tasks with CLI. It is able to handle some simple tasks, such as add, delete, find and set task as completed. "},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"Below are some basic command to manage Tasks"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"1. Add Todo Your Task"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"1. Add Deadlines Your Task /by 19-9-2020 18:00"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"1. Add Events Your Task /at 19-9-2020 18:00-20:00"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":"1. List (View current existing tasks listing)"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"1. Done 1 (Set item no 1 as completed Task)"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"1. Delete 4 (Deleting item no 4 from the list)"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"1. Find keywords "},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":""}],"authorContributionMap":{"Chilaiping":17,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":" * This file was generated by the Gradle \u0027init\u0027 task."},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":" *"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":" * This is a general purpose Gradle build."},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":" * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.8.1/samples"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"plugins {"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"    id \u0027java\u0027"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"    id \u0027application\u0027"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"}"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"checkstyle {"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"}"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"run {"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"    standardInput \u003d System.in"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"    enableAssertions \u003d true"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"}"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"//runShadow {"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"    //main \u003d \u0027duke.Launcher\u0027"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"//    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"//}"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"repositories {"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"    mavenCentral()"},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"}"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"application {"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"    //mainClassName \u003d \"duke.Launcher\""},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"    mainClass.set(\"duke.Launcher\")"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":"}"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"shadowJar {"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"    //mainClass.set(\"duke.Launcher\")"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"    archiveBaseName \u003d \"ip\""},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"    archiveClassifier \u003d null"},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"}"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"jar {"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"    manifest {"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"        attributes("},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"                \u0027Main-Class\u0027: \u0027duke.Launcher\u0027"},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":"        )"},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"    from {"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }"},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"}"},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":"dependencies {"},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":"    implementation \u0027org.testng:testng:6.9.6\u0027"},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":64,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":65,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":66,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":67,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":68,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":69,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":70,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":71,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":72,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":73,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":74,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":75,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":76,"author":{"gitId":"Chilaiping"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":77,"author":{"gitId":"Chilaiping"},"content":"    /*testImplementation("},{"lineNumber":78,"author":{"gitId":"Chilaiping"},"content":"            \u0027junit:junit:4.12\u0027,"},{"lineNumber":79,"author":{"gitId":"Chilaiping"},"content":"            \u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027"},{"lineNumber":80,"author":{"gitId":"Chilaiping"},"content":"    )*/"},{"lineNumber":81,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":82,"author":{"gitId":"Chilaiping"},"content":"    //testRuntime("},{"lineNumber":83,"author":{"gitId":"Chilaiping"},"content":"    //        \u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027,"},{"lineNumber":84,"author":{"gitId":"Chilaiping"},"content":"    //        \u0027org.junit.vintage:junit-vintage-engine:5.4.2\u0027"},{"lineNumber":85,"author":{"gitId":"Chilaiping"},"content":"    //)"},{"lineNumber":86,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":87,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":88,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":88}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"### Add Tasks"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"This feature allow user to input new Tasks, such as Todo, Deadlines and Event."},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"### Delete Tasks"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"This feature allow user to remvoe any unnecessary Tasks from the existing list."},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"### Display Tasks"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"This feature is to have one glance view of all existing Tasks, be it completed Tasks or not. "},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"### Feature Find "},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"This feature is to allow user to search a keyword from the existing Tasks."},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"### Feature Save"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"This feature is to automatically save all entry to the file before the user quit the system."},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"### `Todo` - Create a new Todo Tasks "},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"Create a Todo tasks which without any timeline"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"`todo Submit tp`"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"`Got it. I\u0027ve added this task:`"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":" `\t[T][✘] Submit tp`"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":" `Now you have 5 tasks in the list.`"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"### `Deadline` - Create a new Tasks with Deadline "},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"Create a new tasks with deadlines to the list"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"Example of usage: "},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"`deadline Submit ip /by 2020-09-20 09:30`"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"Expected outcome:"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"`Got it. I\u0027ve added this task:`"},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":" `\t[D][✘] Submit ip  (by: Sep 20 2020 09:30)`"},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":" `Now you have 5 tasks in the list.`"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":" ### `Event` - Create a new Tasks with date and time frame"},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":" Create a new tasks with timing to the list"},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":" Example of usage: "},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":" `event submit ip /at 28 Sept 2020 09:00-10:00`"},{"lineNumber":64,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":65,"author":{"gitId":"Chilaiping"},"content":" Expected outcome:"},{"lineNumber":66,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":67,"author":{"gitId":"Chilaiping"},"content":" `Got it. I\u0027ve added this task:`"},{"lineNumber":68,"author":{"gitId":"Chilaiping"},"content":" "},{"lineNumber":69,"author":{"gitId":"Chilaiping"},"content":"  `\t[D][✘] submit ip  (at: 28 Sept 2020 09:00-10:00)`"},{"lineNumber":70,"author":{"gitId":"Chilaiping"},"content":"  "},{"lineNumber":71,"author":{"gitId":"Chilaiping"},"content":"  `Now you have 5 tasks in the list.`"},{"lineNumber":72,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":73,"author":{"gitId":"Chilaiping"},"content":"### `List` - Display all existing Tasks"},{"lineNumber":74,"author":{"gitId":"Chilaiping"},"content":"All Tasks will be display after user entered the List"},{"lineNumber":75,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":76,"author":{"gitId":"Chilaiping"},"content":"Example of usage: "},{"lineNumber":77,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":78,"author":{"gitId":"Chilaiping"},"content":"`List`"},{"lineNumber":79,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":80,"author":{"gitId":"Chilaiping"},"content":"Expected outcome:"},{"lineNumber":81,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":82,"author":{"gitId":"Chilaiping"},"content":"`1. [D][✘] Submit ip  (by: Aug 9 2020 09:04)   `"},{"lineNumber":83,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":84,"author":{"gitId":"Chilaiping"},"content":"`2. [T][✓] Submit tp  `"},{"lineNumber":85,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":86,"author":{"gitId":"Chilaiping"},"content":"`3. [E][✘] Submit ip  (at: Aug 9 2020 09:00-10:00)`"},{"lineNumber":87,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":88,"author":{"gitId":"Chilaiping"},"content":"### `Delete` - Remove Tasks from the List"},{"lineNumber":89,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":90,"author":{"gitId":"Chilaiping"},"content":"This is to allow user to remove unnecessary Tasks from the existing list and remove from the .txt file."},{"lineNumber":91,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":92,"author":{"gitId":"Chilaiping"},"content":"Example of usage: "},{"lineNumber":93,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":94,"author":{"gitId":"Chilaiping"},"content":"`delete 3`"},{"lineNumber":95,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":96,"author":{"gitId":"Chilaiping"},"content":"Expected outcome:"},{"lineNumber":97,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":98,"author":{"gitId":"Chilaiping"},"content":"`Tasks Number 3 is deleted from the list`"},{"lineNumber":99,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":100,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":101,"author":{"gitId":"Chilaiping"},"content":"### `Find` - Find Tasks with Keywords"},{"lineNumber":102,"author":{"gitId":"Chilaiping"},"content":"It will search from the list of Tasks and return to Users whichever Tasks that contain the keywords."},{"lineNumber":103,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":104,"author":{"gitId":"Chilaiping"},"content":"Example of usage: "},{"lineNumber":105,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":106,"author":{"gitId":"Chilaiping"},"content":"`Find books`"},{"lineNumber":107,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":108,"author":{"gitId":"Chilaiping"},"content":"Expected outcome:"},{"lineNumber":109,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":110,"author":{"gitId":"Chilaiping"},"content":"`1. Todo Read Book  `"},{"lineNumber":111,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":112,"author":{"gitId":"Chilaiping"},"content":"`2 Todo Borrow book From Library`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"Chilaiping"},"content":"### `Done` - Mark the Tasks as a completed Tasks"},{"lineNumber":115,"author":{"gitId":"Chilaiping"},"content":"It will set the tasks as completed and represented by a [✓]"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"Chilaiping"},"content":"`Done 1`"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"Chilaiping"},"content":"`Nice! I\u0027ve marked this task as done:  `"},{"lineNumber":124,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":125,"author":{"gitId":"Chilaiping"},"content":" `[D][✓]  Submit ip  (by: Aug 9 2020 09:04)`"}],"authorContributionMap":{"Chilaiping":104,"-":21}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":65,"author":{"gitId":"Chilaiping"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":67,"author":{"gitId":"Chilaiping"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"Chilaiping"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":70,"author":{"gitId":"Chilaiping"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":72,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":73,"author":{"gitId":"Chilaiping"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"Chilaiping"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":76,"author":{"gitId":"Chilaiping"},"content":":end"},{"lineNumber":77,"author":{"gitId":"Chilaiping"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"Chilaiping"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":80,"author":{"gitId":"Chilaiping"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"Chilaiping"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"Chilaiping"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"Chilaiping"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"Chilaiping"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":86,"author":{"gitId":"Chilaiping"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"Chilaiping"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":89,"author":{"gitId":"Chilaiping"},"content":":omega"}],"authorContributionMap":{"Chilaiping":89}},{"path":"record.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"[D][✘] submit ip (by: Sep 20 2020 09:00)"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":"[E][✘] submit ip (at: 28 Sept 2020 09:00-10:00)"},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"[E][✘] meeting (at: 1600-1700 )"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"[E][✓] texts (at: Yishun)"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"[E][✘] textss (at: Tan\u0027s House /memo bring hampers)"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"[E][✘] text Tan (at: office ) (Memos : about CNY)"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"[E][✓] text Masuda (at: company phone)"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"[E][✘] update calender (at: home)"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"[E][✘] update calender (at: home ) (Memos : flight scheudle)"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"[E][✘] update calender (at: home) (Memos : flight scheudle)"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"[E][✘] send msg (at: Sunday) (Memos : before noon)"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"[D][✘] send msg (by: Mar 23 2021)"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"[D][✘] Tasks (by: Mar 23 2020 18:00) (Memos : msg)"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"[D][✘] Tasks2 (by: Jul 17 2020) (Memos : msg)"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"[D][✘] Task 3  (by: Dec 31 2020 09:00)"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"[D][✘] dummy 1 (by: Jan 9 2021)"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"[D][✘] dummy 1 (by: Jan 9 2021 19:00)"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"[D][✘] dummy 1 (by: Jan 9 2021 18:00) (Memos : for recording)"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"[D][✘] dummy 1 (by: Jan 9 2021) (Memos : for recording)"}],"authorContributionMap":{"Chilaiping":19}},{"path":"src/main/java/duke/Action.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"public enum Action {"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"    Done,"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"    Delete,"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"    List,"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"    Find,"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"    AddTodo,"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"    AddDeadlines,"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"    AddEvents,"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"    AddRecurringTasks,"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"    Bye,"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":13}},{"path":"src/main/java/duke/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"public class Deadlines extends Task {"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"    protected String by;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"    protected String time;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"    protected LocalDate deadline;"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"    protected LocalTime timeline;"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"    protected String memo;"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"    public Deadlines(String description, LocalDate by) {"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"        this.deadline \u003d by;"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"    public Deadlines(String description, LocalDate by, String memo) {"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"        this.deadline \u003d by;"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"        this.memo \u003d memo;"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"    public Deadlines(String description, LocalDate by, LocalTime time) {"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"        this.deadline \u003d by;"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"        this.timeline \u003d time;"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"    public Deadlines(String description, LocalDate by, LocalTime time, String memo) {"},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"        this.deadline \u003d by;"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"        this.timeline \u003d time;"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"        this.memo \u003d memo;"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"    //@Override"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"        //return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"        String outputMsg \u003d \"[D][\" + this.getStatusIcon() + \"] \" + this.description + \" (by: \""},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"            + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"        if (timeline !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"            outputMsg \u003d outputMsg + \" \" + timeline.format(DateTimeFormatter.ofPattern(\"kk:mm\"));"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"        if (memo !\u003d null) {"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"            outputMsg \u003d outputMsg + \") (Memos : \" + memo;"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":"        /*"},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":"        if (timeline !\u003d null) {"},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"            outputMsg \u003d outputMsg + \" \" + timeline.format(DateTimeFormatter.ofPattern(\"kk:mm\"));"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"            //return \"[D]\" + \"[\" + this.getStatusIcon() + \"] \" +  this.description + \" (by: \""},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"            //        + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \""},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"            //        + timeline.format(DateTimeFormatter.ofPattern(\"kk:mm\")) + \")\";"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":"            return \"[D]\" + \"[\" + this.getStatusIcon() + \"] \" +  this.description + \" (by: \""},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":"                    + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":"        }*/"},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":"        outputMsg +\u003d \")\";"},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":"        return outputMsg;"},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":65,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":65}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import ui.Storage;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import ui.Parser;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import ui.TaskList;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import ui.Ui;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"    private TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"    private ArrayList\u003cTask\u003e task;"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"    public Duke() throws IOException, DukeException {"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"        ui \u003d new Ui();"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"        String filePath \u003d \"record.txt\";"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"        } catch (DukeException e) {"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"            //ui.showLoadingError();"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"            storage.createFile();"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"    public void run() throws IOException {"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"        while (in.hasNextLine()) {"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"            String input \u003d in.nextLine();"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"            if (!(input).equalsIgnoreCase(\"bye\")) {"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"                Parser.processInput(input, tasks.getTasksArr());"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"            } else {"},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"                ui.greetNote(\"bye\");"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"                Storage.writeToFile(tasks.getTasksArr());"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"                return;"},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"    public static void main() throws IOException, DukeException {"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"        new Duke().run();"},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"     * Replace this stub with your completed method."},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"    String getResponse(String input) {"},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":"        //String defaultReply \u003d \"Duke heard :\\n\";"},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":"        //return \"Duke heard: \";"},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":"        return  Parser.processInput(input, tasks.getTasksArr());"},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Chilaiping":62,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"    public DukeException(String s) {"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"        super(s);"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"        System.out.println(Global.PATTERNLINE);"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":8}},{"path":"src/main/java/duke/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"public class Events extends Task {"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"    protected String on;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"    protected String memo;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"    public Events(String description, String on) {"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"        this.on \u003d on;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"    public Events(String description, String on, String memo) {"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"        this.on \u003d on;"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"        this.memo \u003d memo;"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"    //@Override"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"        //return \"[E]\" + super.toString() + \" (at: \" + on + \")\";"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"        if (memo !\u003d null) {"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"            return \"[E]\" + \"[\" + this.getStatusIcon() + \"] \" +  this.description + \" (at: \" + on + \")\""},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"                    + \" (Memos : \" + this.memo + \")\";"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"            return \"[E]\" + \"[\" + this.getStatusIcon() + \"] \" +  this.description + \" (at: \" + on + \")\";"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":30}},{"path":"src/main/java/duke/Global.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"public class Global {"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"    public static final String PATTERNLINE \u003d \"__________________\""},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"            + \"_________________________________________________________\";"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":6}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"    private Duke duke;"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"    {"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"            duke \u003d new Duke();"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"        } catch (IOException e) {"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"            e.printStackTrace();"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"        } catch (DukeException e) {"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"            e.printStackTrace();"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"    public void start(Stage stage) {"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"            stage.setScene(scene);"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"            stage.show();"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"            e.printStackTrace();"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":41}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(5.0));"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"    private void handleUserInput() {"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":56}},{"path":"src/main/java/duke/RecurrTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"public class RecurrTask extends Task {"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"    protected String type;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"    protected String memo;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"    public RecurrTask(String description, String type) {"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"        this.type \u003d type;"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"    public RecurrTask(String description, String type, String memo) {"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"        this.type \u003d type;"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"        this.memo \u003d memo;"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"        //return \"[E]\" + \"[\" + this.getStatusIcon() + \"] \" +  this.description + \" (at: \" + on + \")\";"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"        return type + \" - \" + this.description;"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":26}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"    public String getStatusIcon() {"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"    public void markAsDone() {"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"        this.isDone \u003d true;"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"    //public String toString() {"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"    public abstract String toString(); /*{"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"        //return this.toString() ;"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"        return (\"[\" + this.getStatusIcon() + \"] \" +  this.description );"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"    }*/"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"    public String printTask() {"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(\"[\" + this.getStatusIcon() + \"] \" +  this.description ) ;"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"        //Workable - System.out.println(this.toString());"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"        return this.toString();"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"    public String getTask() {"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"        return this.description;"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":35}},{"path":"src/main/java/duke/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"public class ToDos extends Task {"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"    //protected String by;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"    protected String memo;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"    public ToDos(String description) {"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"    public ToDos(String description, String memo) {"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"        this.memo \u003d memo;"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"        //return \"[T]\" + super.toString() ;"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"        if (memo !\u003d null) {"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"            return \"[T]\" + \"[\" + this.getStatusIcon() + \"] \" +  this.description"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"                    + \"(Memos : \" + this.memo + \")\";"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"            return \"[T]\" + \"[\" + this.getStatusIcon() + \"] \" +  this.description;"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":31}},{"path":"src/main/java/ui/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import duke.Task;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import duke.Global;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import duke.Action;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":" * This class is to understand User input and ensure all request are handled by different classes."},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":" *"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"    private static String input;"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"    public Parser(String input) {"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"        this.input \u003d input;"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"     * This method is to take action from validateCommand and then proecss the action accordingly."},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"    public static String processInput(String input, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"        String command \u003d input.toLowerCase();"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"        Action action;"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"        int count \u003d tasks.size();"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"            action \u003d validateCommand(command);"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"        } catch (Exception g) {"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"            return Ui.errInvalidInput(g);"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"            //return \"Error\";"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"            switch (action) {"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"            case List:"},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"                return Ui.printList(tasks);"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"                //break;"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"            case Done:"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"                markDone(command, tasks);"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"                Storage.updateStatusToFile(tasks);"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"                return \"Marked as Done\";"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"                //break;"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":"            case AddTodo:"},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":"                if (TaskList.isDuplicates(tasks, input) \u003d\u003d false) {"},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"                    return TaskList.addTodo(tasks, input, count);"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"                } else {"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"                    return Ui.duplicatedMsg();"},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"                //Storage.addToFile(tasks);"},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":"            case AddDeadlines:"},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":"                if (TaskList.isDuplicates(tasks, input) \u003d\u003d false) {"},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":"                    return TaskList.addDeadlines(tasks, input, count);"},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":"                } else {"},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":"                    return Ui.duplicatedMsg();"},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":"                }"},{"lineNumber":64,"author":{"gitId":"Chilaiping"},"content":"                //Storage.addToFile(tasks);"},{"lineNumber":65,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":66,"author":{"gitId":"Chilaiping"},"content":"            case AddEvents:"},{"lineNumber":67,"author":{"gitId":"Chilaiping"},"content":"                if (TaskList.isDuplicates(tasks, input) \u003d\u003d false) {"},{"lineNumber":68,"author":{"gitId":"Chilaiping"},"content":"                    return TaskList.addEvents(tasks, input, count);"},{"lineNumber":69,"author":{"gitId":"Chilaiping"},"content":"                } else {"},{"lineNumber":70,"author":{"gitId":"Chilaiping"},"content":"                    return Ui.duplicatedMsg();"},{"lineNumber":71,"author":{"gitId":"Chilaiping"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":73,"author":{"gitId":"Chilaiping"},"content":"                //Storage.addToFile(tasks);"},{"lineNumber":74,"author":{"gitId":"Chilaiping"},"content":"            case AddRecurringTasks:"},{"lineNumber":75,"author":{"gitId":"Chilaiping"},"content":"                if (TaskList.isDuplicates(tasks, input) \u003d\u003d false) {"},{"lineNumber":76,"author":{"gitId":"Chilaiping"},"content":"                    return TaskList.addRecurringTasks(tasks, input, count);"},{"lineNumber":77,"author":{"gitId":"Chilaiping"},"content":"                } else {"},{"lineNumber":78,"author":{"gitId":"Chilaiping"},"content":"                    return Ui.duplicatedMsg();"},{"lineNumber":79,"author":{"gitId":"Chilaiping"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":81,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":82,"author":{"gitId":"Chilaiping"},"content":"            case Delete:"},{"lineNumber":83,"author":{"gitId":"Chilaiping"},"content":"                TaskList.deleteTask(tasks, command);"},{"lineNumber":84,"author":{"gitId":"Chilaiping"},"content":"                return \"Task Deleted\";"},{"lineNumber":85,"author":{"gitId":"Chilaiping"},"content":"                //break;"},{"lineNumber":86,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":87,"author":{"gitId":"Chilaiping"},"content":"            case Find:"},{"lineNumber":88,"author":{"gitId":"Chilaiping"},"content":"                return Ui.findTask(command, tasks);"},{"lineNumber":89,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":90,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":91,"author":{"gitId":"Chilaiping"},"content":"            case Bye:"},{"lineNumber":92,"author":{"gitId":"Chilaiping"},"content":"                Storage.writeToFile(tasks);"},{"lineNumber":93,"author":{"gitId":"Chilaiping"},"content":"                return Ui.greetNote(\"bye\");"},{"lineNumber":94,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":95,"author":{"gitId":"Chilaiping"},"content":"            default:"},{"lineNumber":96,"author":{"gitId":"Chilaiping"},"content":"                return Global.PATTERNLINE + \"\\nYou have entered invalid input. Please re-input or \\n\""},{"lineNumber":97,"author":{"gitId":"Chilaiping"},"content":"                        + \"Enter bye to terminate the program.\\n\" + Global.PATTERNLINE;"},{"lineNumber":98,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":99,"author":{"gitId":"Chilaiping"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"Chilaiping"},"content":"        } catch (Exception m) {"},{"lineNumber":101,"author":{"gitId":"Chilaiping"},"content":"            //System.out.println(m + Global.PATTERNLINE);"},{"lineNumber":102,"author":{"gitId":"Chilaiping"},"content":"            return m + Global.PATTERNLINE;"},{"lineNumber":103,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":106,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"Chilaiping"},"content":"     * This method analysed and clasified the user input to Process input accordingly."},{"lineNumber":108,"author":{"gitId":"Chilaiping"},"content":"     * Any unknown command will be throw."},{"lineNumber":109,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"Chilaiping"},"content":"    private static Action validateCommand(String command) throws DukeException {"},{"lineNumber":111,"author":{"gitId":"Chilaiping"},"content":"        if (command.startsWith(\"list\")) {"},{"lineNumber":112,"author":{"gitId":"Chilaiping"},"content":"            return  Action.List;"},{"lineNumber":113,"author":{"gitId":"Chilaiping"},"content":"        } else if (command.startsWith(\"weekly\") || command.startsWith(\"monthly\")) {"},{"lineNumber":114,"author":{"gitId":"Chilaiping"},"content":"            return Action.AddRecurringTasks;"},{"lineNumber":115,"author":{"gitId":"Chilaiping"},"content":"        } else if (command.startsWith(\"find\")) {"},{"lineNumber":116,"author":{"gitId":"Chilaiping"},"content":"            return Action.Find;"},{"lineNumber":117,"author":{"gitId":"Chilaiping"},"content":"        } else if (command.startsWith(\"delete\")) {"},{"lineNumber":118,"author":{"gitId":"Chilaiping"},"content":"            return Action.Delete;"},{"lineNumber":119,"author":{"gitId":"Chilaiping"},"content":"        } else if (command.startsWith(\"bye\")) {"},{"lineNumber":120,"author":{"gitId":"Chilaiping"},"content":"            return Action.Bye;"},{"lineNumber":121,"author":{"gitId":"Chilaiping"},"content":"        } else if (command.length() \u003e 4 \u0026\u0026 command.startsWith(\"done\")) {"},{"lineNumber":122,"author":{"gitId":"Chilaiping"},"content":"            return Action.Done;"},{"lineNumber":123,"author":{"gitId":"Chilaiping"},"content":"        } else if (command.length() \u003e 3 \u0026\u0026 command.startsWith(\"todo\")) {"},{"lineNumber":124,"author":{"gitId":"Chilaiping"},"content":"            return Action.AddTodo;"},{"lineNumber":125,"author":{"gitId":"Chilaiping"},"content":"        } else if (command.length() \u003e 7 \u0026\u0026 command.startsWith(\"deadline\")) {"},{"lineNumber":126,"author":{"gitId":"Chilaiping"},"content":"            return Action.AddDeadlines;"},{"lineNumber":127,"author":{"gitId":"Chilaiping"},"content":"        } else if (command.length() \u003e 4 \u0026\u0026 command.startsWith(\"event\")) {"},{"lineNumber":128,"author":{"gitId":"Chilaiping"},"content":"            return Action.AddEvents;"},{"lineNumber":129,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":130,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":131,"author":{"gitId":"Chilaiping"},"content":"                    + \"Please re-input or enter bye to terminate the program\");"},{"lineNumber":132,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":135,"author":{"gitId":"Chilaiping"},"content":"    private static void markDone(String command, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":136,"author":{"gitId":"Chilaiping"},"content":"        int index \u003d 0;"},{"lineNumber":137,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":138,"author":{"gitId":"Chilaiping"},"content":"        // If user input done1 instead of done 1"},{"lineNumber":139,"author":{"gitId":"Chilaiping"},"content":"        if (command.contains(\" \")) {"},{"lineNumber":140,"author":{"gitId":"Chilaiping"},"content":"            index \u003d Integer.parseInt(command.substring(5));"},{"lineNumber":141,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":142,"author":{"gitId":"Chilaiping"},"content":"            index \u003d Integer.parseInt(command.substring(4));"},{"lineNumber":143,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":145,"author":{"gitId":"Chilaiping"},"content":"        try {"},{"lineNumber":146,"author":{"gitId":"Chilaiping"},"content":"            tasks.get(index - 1).markAsDone();"},{"lineNumber":147,"author":{"gitId":"Chilaiping"},"content":"            Ui.replyMarkedDone(tasks, index);"},{"lineNumber":148,"author":{"gitId":"Chilaiping"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":149,"author":{"gitId":"Chilaiping"},"content":"            Ui.errIndexOutOfBoundsException();"},{"lineNumber":150,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":152,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":154,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":154}},{"path":"src/main/java/ui/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import duke.Deadlines;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import duke.Events;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import duke.RecurrTask;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"import duke.Task;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"import duke.ToDos;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"import java.time.LocalTime;"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"import java.io.File;"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"import java.io.FileWriter;"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"import java.util.Scanner;"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":" * This class in charge of memory side, where Task  will read from or write to the txt File."},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":" * File Path is a fixed Path, file address is passed from main class."},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":" */"},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"public class Storage {"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"    private static String FILEPATH;"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"    public Storage(String filePath) {"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"        this.FILEPATH \u003d filePath;"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"    public static void createFile() throws IOException, DukeException {"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"        File f \u003d new File(\"ip/record.txt\");"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"        boolean result \u003d f.createNewFile();"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"        if (!result) {"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(\"File Not Found\");"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"     * This method append Task List to File, to be called whenever new tasks was entered."},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"    public static void addToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"        FileWriter fw \u003d new FileWriter(FILEPATH, true);"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"        int index \u003d tasks.size();"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"        fw.write(String.valueOf(tasks.get(index - 1)) + \"\\n\");"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"        fw.close();"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"     * This method update the current Task List to File before the program terminate."},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"        FileWriter fw \u003d new FileWriter(FILEPATH, false);"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":"            fw.write(String.valueOf(tasks.get(i) + \"\\n\"));"},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":"        fw.close();"},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":"     * This method is updating task status to the file."},{"lineNumber":64,"author":{"gitId":"Chilaiping"},"content":"     * This method is called whenever user change the status of the task"},{"lineNumber":65,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Chilaiping"},"content":"    public static void updateStatusToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":67,"author":{"gitId":"Chilaiping"},"content":"        FileWriter fw \u003d new FileWriter(FILEPATH);"},{"lineNumber":68,"author":{"gitId":"Chilaiping"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":69,"author":{"gitId":"Chilaiping"},"content":"            fw.write(String.valueOf(tasks.get(i)) + \"\\n\");"},{"lineNumber":70,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Chilaiping"},"content":"        fw.close();"},{"lineNumber":72,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":74,"author":{"gitId":"Chilaiping"},"content":"    //public static void load (ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":75,"author":{"gitId":"Chilaiping"},"content":"    public static ArrayList\u003cTask\u003e load() throws IOException, DukeException  {"},{"lineNumber":76,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":77,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":78,"author":{"gitId":"Chilaiping"},"content":"        File fw \u003d new File(FILEPATH);"},{"lineNumber":79,"author":{"gitId":"Chilaiping"},"content":"        if (! fw.exists()) {"},{"lineNumber":80,"author":{"gitId":"Chilaiping"},"content":"            createFile();"},{"lineNumber":81,"author":{"gitId":"Chilaiping"},"content":"            //throw new DukeException(\"File Not Found\");"},{"lineNumber":82,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":84,"author":{"gitId":"Chilaiping"},"content":"        Scanner s \u003d new Scanner(fw);"},{"lineNumber":85,"author":{"gitId":"Chilaiping"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitId":"Chilaiping"},"content":"        int count \u003d 0;"},{"lineNumber":87,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":88,"author":{"gitId":"Chilaiping"},"content":"        while (s.hasNextLine()) {"},{"lineNumber":89,"author":{"gitId":"Chilaiping"},"content":"            String item \u003d s.nextLine();"},{"lineNumber":90,"author":{"gitId":"Chilaiping"},"content":"            if (item.startsWith(\"[T\")) {"},{"lineNumber":91,"author":{"gitId":"Chilaiping"},"content":"                addTodosToArray(tasks, item, count);"},{"lineNumber":92,"author":{"gitId":"Chilaiping"},"content":"            } else if (item.startsWith(\"[D\")) {"},{"lineNumber":93,"author":{"gitId":"Chilaiping"},"content":"                addDeadlinesToArray(tasks, item, count);"},{"lineNumber":94,"author":{"gitId":"Chilaiping"},"content":"            } else if (item.startsWith(\"[E\")) {"},{"lineNumber":95,"author":{"gitId":"Chilaiping"},"content":"                addEventsToArray(tasks, item, count);"},{"lineNumber":96,"author":{"gitId":"Chilaiping"},"content":"            } else {"},{"lineNumber":97,"author":{"gitId":"Chilaiping"},"content":"                addRecurrTaskToArray(tasks, item, count);"},{"lineNumber":98,"author":{"gitId":"Chilaiping"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"Chilaiping"},"content":"            count++;"},{"lineNumber":100,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":102,"author":{"gitId":"Chilaiping"},"content":"        return tasks;"},{"lineNumber":103,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":105,"author":{"gitId":"Chilaiping"},"content":"    @SuppressWarnings(\"checkstyle:ParameterName\")"},{"lineNumber":106,"author":{"gitId":"Chilaiping"},"content":"    private static void addTodosToArray(ArrayList\u003cTask\u003e tasks, String line, int arrIndex) {"},{"lineNumber":107,"author":{"gitId":"Chilaiping"},"content":"        String status \u003d line.substring(4,5);"},{"lineNumber":108,"author":{"gitId":"Chilaiping"},"content":"        String taskName \u003d line.substring(7);"},{"lineNumber":109,"author":{"gitId":"Chilaiping"},"content":"        tasks.add(new ToDos(taskName));"},{"lineNumber":110,"author":{"gitId":"Chilaiping"},"content":"        if (status.equals(\"✓\")) {"},{"lineNumber":111,"author":{"gitId":"Chilaiping"},"content":"            tasks.get(arrIndex).markAsDone();"},{"lineNumber":112,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":115,"author":{"gitId":"Chilaiping"},"content":"    @SuppressWarnings(\"checkstyle:ParameterName\")"},{"lineNumber":116,"author":{"gitId":"Chilaiping"},"content":"    private static void addDeadlinesToArray(ArrayList\u003cTask\u003e tasks, String line, int arrIndex) {"},{"lineNumber":117,"author":{"gitId":"Chilaiping"},"content":"        int index \u003d line.indexOf(\"(by\");"},{"lineNumber":118,"author":{"gitId":"Chilaiping"},"content":"        int indexCB \u003d line.indexOf(\")\", index);"},{"lineNumber":119,"author":{"gitId":"Chilaiping"},"content":"        int timeStamp \u003d indexCB - index;"},{"lineNumber":120,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":121,"author":{"gitId":"Chilaiping"},"content":"        //String schedule \u003d line.substring(index + 5, line.length() - 7);"},{"lineNumber":122,"author":{"gitId":"Chilaiping"},"content":"        //String tschedule \u003d line.substring(line.length() - 6, line.length() - 1);"},{"lineNumber":123,"author":{"gitId":"Chilaiping"},"content":"        //String tschedule \u003d line.substring(indexCB );"},{"lineNumber":124,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":125,"author":{"gitId":"Chilaiping"},"content":"        String status \u003d line.substring(4,5);"},{"lineNumber":126,"author":{"gitId":"Chilaiping"},"content":"        String taskName \u003d line.substring(7, index - 1);"},{"lineNumber":127,"author":{"gitId":"Chilaiping"},"content":"        //String schedule \u003d line.substring(index + 5, index + 16);"},{"lineNumber":128,"author":{"gitId":"Chilaiping"},"content":"        //String schedule \u003d line.substring(index + 5, line.indexOf(\" \", index + 15));"},{"lineNumber":129,"author":{"gitId":"Chilaiping"},"content":"        //LocalDate dateline \u003d LocalDate.parse(schedule, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":130,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":131,"author":{"gitId":"Chilaiping"},"content":"        if (line.contains(\"(Memos :\") \u0026\u0026 (timeStamp \u003e 16)) { //with time and memos"},{"lineNumber":132,"author":{"gitId":"Chilaiping"},"content":"            int indexM \u003d line.indexOf(\"(Memos\");"},{"lineNumber":133,"author":{"gitId":"Chilaiping"},"content":"            int indexS \u003d line.indexOf(\" \", index + 15);"},{"lineNumber":134,"author":{"gitId":"Chilaiping"},"content":"            String memo \u003d line.substring(indexM + 9, line.length() - 1);"},{"lineNumber":135,"author":{"gitId":"Chilaiping"},"content":"            String tschedule \u003d line.substring(indexS + 1, indexM - 2);"},{"lineNumber":136,"author":{"gitId":"Chilaiping"},"content":"            LocalTime timeline \u003d LocalTime.parse(tschedule);"},{"lineNumber":137,"author":{"gitId":"Chilaiping"},"content":"            String schedule \u003d line.substring(index + 5, indexS);"},{"lineNumber":138,"author":{"gitId":"Chilaiping"},"content":"            LocalDate dateline \u003d LocalDate.parse(schedule, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":139,"author":{"gitId":"Chilaiping"},"content":"            tasks.add(new Deadlines(taskName, dateline,timeline, memo));"},{"lineNumber":140,"author":{"gitId":"Chilaiping"},"content":"        }  else if (timeStamp \u003e 16) {   //with time"},{"lineNumber":141,"author":{"gitId":"Chilaiping"},"content":"            int indexS \u003d line.indexOf(\" \", index + 15);"},{"lineNumber":142,"author":{"gitId":"Chilaiping"},"content":"            String schedule \u003d line.substring(index + 5, line.indexOf(\" \", index + 15));"},{"lineNumber":143,"author":{"gitId":"Chilaiping"},"content":"            LocalDate dateline \u003d LocalDate.parse(schedule, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":144,"author":{"gitId":"Chilaiping"},"content":"            String tschedule \u003d line.substring(indexS + 1, line.length() - 1);"},{"lineNumber":145,"author":{"gitId":"Chilaiping"},"content":"            LocalTime timeline \u003d LocalTime.parse(tschedule);"},{"lineNumber":146,"author":{"gitId":"Chilaiping"},"content":"            tasks.add(new Deadlines(taskName, dateline,timeline));"},{"lineNumber":147,"author":{"gitId":"Chilaiping"},"content":"        } else if (line.contains(\"(Memos :\")) { //with only memos"},{"lineNumber":148,"author":{"gitId":"Chilaiping"},"content":"            int indexM \u003d line.indexOf(\"(Memos\");"},{"lineNumber":149,"author":{"gitId":"Chilaiping"},"content":"            String memo \u003d line.substring(indexM + 9, line.length() - 1);"},{"lineNumber":150,"author":{"gitId":"Chilaiping"},"content":"            String schedule \u003d line.substring(index + 5, line.indexOf(\")\", index + 15));"},{"lineNumber":151,"author":{"gitId":"Chilaiping"},"content":"            LocalDate dateline \u003d LocalDate.parse(schedule, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":152,"author":{"gitId":"Chilaiping"},"content":"            tasks.add(new Deadlines(taskName, dateline, memo));"},{"lineNumber":153,"author":{"gitId":"Chilaiping"},"content":"        } else { //with nothing"},{"lineNumber":154,"author":{"gitId":"Chilaiping"},"content":"            String schedule \u003d line.substring(index + 5, line.indexOf(\")\", index + 15));"},{"lineNumber":155,"author":{"gitId":"Chilaiping"},"content":"            LocalDate dateline \u003d LocalDate.parse(schedule, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":156,"author":{"gitId":"Chilaiping"},"content":"            tasks.add(new Deadlines(taskName, dateline));"},{"lineNumber":157,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":159,"author":{"gitId":"Chilaiping"},"content":"        if (status.equals(\"✓\")) {"},{"lineNumber":160,"author":{"gitId":"Chilaiping"},"content":"            tasks.get(arrIndex).markAsDone();"},{"lineNumber":161,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":164,"author":{"gitId":"Chilaiping"},"content":"    private static void addEventsToArray(ArrayList\u003cTask\u003e tasks, String line, int arrIndex) {"},{"lineNumber":165,"author":{"gitId":"Chilaiping"},"content":"        int index \u003d line.indexOf(\"(at\");"},{"lineNumber":166,"author":{"gitId":"Chilaiping"},"content":"        String status \u003d line.substring(4,5);"},{"lineNumber":167,"author":{"gitId":"Chilaiping"},"content":"        String schedule \u003d line.substring(index + 5, line.length() - 1);"},{"lineNumber":168,"author":{"gitId":"Chilaiping"},"content":"        String taskName \u003d line.substring(line.indexOf(\" \") + 1, index - 1);"},{"lineNumber":169,"author":{"gitId":"Chilaiping"},"content":"        tasks.add(new Events(taskName, schedule));"},{"lineNumber":170,"author":{"gitId":"Chilaiping"},"content":"        if (status.equals(\"✓\")) {"},{"lineNumber":171,"author":{"gitId":"Chilaiping"},"content":"            tasks.get(arrIndex).markAsDone();"},{"lineNumber":172,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":174,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":176,"author":{"gitId":"Chilaiping"},"content":"    private static void addRecurrTaskToArray(ArrayList\u003cTask\u003e tasks, String line, int arrIndex) {"},{"lineNumber":177,"author":{"gitId":"Chilaiping"},"content":"        int index \u003d line.indexOf(\" \");"},{"lineNumber":178,"author":{"gitId":"Chilaiping"},"content":"        String taskType \u003d line.substring(0, index);"},{"lineNumber":179,"author":{"gitId":"Chilaiping"},"content":"        String taskName \u003d line.substring(index + 3);"},{"lineNumber":180,"author":{"gitId":"Chilaiping"},"content":"        tasks.add(new RecurrTask(taskName, taskType));"},{"lineNumber":181,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":182}},{"path":"src/main/java/ui/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import duke.Task;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import duke.ToDos;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import duke.Deadlines;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import duke.Events;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"import duke.RecurrTask;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"import java.time.LocalTime;"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"import java.text.ParseException;"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"import java.time.LocalDateTime;"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":" * This class in charge of performing action related to TaskList (only RAM, not related to Memory)"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":" * Adding new Task, delete task."},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"public class TaskList {"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"    ArrayList\u003cTask\u003e tasks;"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"    public TaskList() {"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"    public ArrayList\u003cTask\u003e getTasksArr() {"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"        return tasks;"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"    public static void deleteTask(ArrayList\u003cTask\u003e tasks, String command) {"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":"        int index \u003d 0;"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"        if (command.contains(\" \")) {"},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"            index \u003d Integer.parseInt(command.substring(7));"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"            index \u003d Integer.parseInt(command.substring(6));"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"            Ui.replyDeleteTask(tasks, index);"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"            tasks.remove(index - 1);"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"            Ui.errIndexOutOfBoundsException();"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"    public static String addTodo(ArrayList\u003cTask\u003e tasks, String input, int count) throws DukeException {"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"        if (input.length() \u003c 6) {"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a Todo cannot be empty.\\n\""},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"                    + \"Please re-input or enter bye to terminate the program\\n\");"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":"            int index;"},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":"            String taskName;"},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":"            String remarks;"},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":"            if (input.contains(\"/memo\")) {"},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":"                index \u003d input.indexOf(\"/memo\");"},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":"                taskName \u003d input.substring(5, index - 1);"},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":"                remarks \u003d input.substring(index + 6);"},{"lineNumber":64,"author":{"gitId":"Chilaiping"},"content":"                tasks.add(new ToDos(taskName, remarks));"},{"lineNumber":65,"author":{"gitId":"Chilaiping"},"content":"                return Ui.replyLine(tasks, input, count);"},{"lineNumber":66,"author":{"gitId":"Chilaiping"},"content":"            } else {"},{"lineNumber":67,"author":{"gitId":"Chilaiping"},"content":"                tasks.add(new ToDos(input.substring(5)));"},{"lineNumber":68,"author":{"gitId":"Chilaiping"},"content":"                return Ui.replyLine(tasks, input, count);"},{"lineNumber":69,"author":{"gitId":"Chilaiping"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":73,"author":{"gitId":"Chilaiping"},"content":"    public static String addDeadlines(ArrayList\u003cTask\u003e tasks, String input, int count) throws DukeException {"},{"lineNumber":74,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":75,"author":{"gitId":"Chilaiping"},"content":"        if (!input.contains(\" \")) {"},{"lineNumber":76,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(Ui.deadlineErrEmpty());"},{"lineNumber":77,"author":{"gitId":"Chilaiping"},"content":"        } else if (input.length() - 1 \u003d\u003d input.indexOf(\" \")) {"},{"lineNumber":78,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(Ui.deadlineErrEmpty());"},{"lineNumber":79,"author":{"gitId":"Chilaiping"},"content":"        } else if (!input.contains(\"/by\")) {"},{"lineNumber":80,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(Ui.deadlineNoBy());"},{"lineNumber":81,"author":{"gitId":"Chilaiping"},"content":"        } else if (input.contains(\"/memo\")) {"},{"lineNumber":82,"author":{"gitId":"Chilaiping"},"content":"            int indexS \u003d input.indexOf(\" \");"},{"lineNumber":83,"author":{"gitId":"Chilaiping"},"content":"            int indexD \u003d input.indexOf(\"/by\");"},{"lineNumber":84,"author":{"gitId":"Chilaiping"},"content":"            int indexM \u003d input.indexOf(\"/memo\");"},{"lineNumber":85,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":86,"author":{"gitId":"Chilaiping"},"content":"            String taskName \u003d input.substring(indexS + 1, indexD - 1);"},{"lineNumber":87,"author":{"gitId":"Chilaiping"},"content":"            String memo \u003d input.substring(indexM + 7);"},{"lineNumber":88,"author":{"gitId":"Chilaiping"},"content":"            String schedule;"},{"lineNumber":89,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":90,"author":{"gitId":"Chilaiping"},"content":"            //if (input.indexOf(\" \", indexD + 7) !\u003d -1) {"},{"lineNumber":91,"author":{"gitId":"Chilaiping"},"content":"            if ((indexM - indexD) \u003e 16) {"},{"lineNumber":92,"author":{"gitId":"Chilaiping"},"content":"                int timeIndex \u003d input.indexOf(\" \",indexD + 7);"},{"lineNumber":93,"author":{"gitId":"Chilaiping"},"content":"                //String temp \u003d input.substring(timeIndex + 1, indexM - timeIndex);"},{"lineNumber":94,"author":{"gitId":"Chilaiping"},"content":"                LocalTime timeline \u003d LocalTime.parse(input.substring(timeIndex + 1, indexM - 1));"},{"lineNumber":95,"author":{"gitId":"Chilaiping"},"content":"                schedule \u003d input.substring(indexD + 4, timeIndex);"},{"lineNumber":96,"author":{"gitId":"Chilaiping"},"content":"                LocalDate dateline \u003d LocalDate.parse(schedule);"},{"lineNumber":97,"author":{"gitId":"Chilaiping"},"content":"                tasks.add(new Deadlines(taskName, dateline, timeline, memo));"},{"lineNumber":98,"author":{"gitId":"Chilaiping"},"content":"            } else {"},{"lineNumber":99,"author":{"gitId":"Chilaiping"},"content":"                schedule \u003d input.substring(indexD + 4, indexM - 1);"},{"lineNumber":100,"author":{"gitId":"Chilaiping"},"content":"                LocalDate dateline \u003d LocalDate.parse(schedule);"},{"lineNumber":101,"author":{"gitId":"Chilaiping"},"content":"                tasks.add(new Deadlines(taskName, dateline, memo));"},{"lineNumber":102,"author":{"gitId":"Chilaiping"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"Chilaiping"},"content":"            //return \"temp\";"},{"lineNumber":104,"author":{"gitId":"Chilaiping"},"content":"            return Ui.replyLine(tasks, input, count);"},{"lineNumber":105,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":106,"author":{"gitId":"Chilaiping"},"content":"            int index \u003d input.indexOf(\"/by\");"},{"lineNumber":107,"author":{"gitId":"Chilaiping"},"content":"            String taskName \u003d input.substring(input.indexOf(\" \") + 1, index - 1);"},{"lineNumber":108,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":109,"author":{"gitId":"Chilaiping"},"content":"            if (input.indexOf(\" \",index + 7) !\u003d -1) {"},{"lineNumber":110,"author":{"gitId":"Chilaiping"},"content":"                int timeIndex \u003d input.indexOf(\" \",index + 7);"},{"lineNumber":111,"author":{"gitId":"Chilaiping"},"content":"                LocalTime timeline \u003d LocalTime.parse(input.substring(timeIndex + 1));"},{"lineNumber":112,"author":{"gitId":"Chilaiping"},"content":"                String schedule \u003d input.substring(index + 4, timeIndex);"},{"lineNumber":113,"author":{"gitId":"Chilaiping"},"content":"                LocalDate dateline \u003d LocalDate.parse(schedule);"},{"lineNumber":114,"author":{"gitId":"Chilaiping"},"content":"                tasks.add(new Deadlines(taskName, dateline, timeline));"},{"lineNumber":115,"author":{"gitId":"Chilaiping"},"content":"            } else {"},{"lineNumber":116,"author":{"gitId":"Chilaiping"},"content":"                String schedule \u003d input.substring(index + 4);"},{"lineNumber":117,"author":{"gitId":"Chilaiping"},"content":"                LocalDate dateline \u003d LocalDate.parse(schedule);"},{"lineNumber":118,"author":{"gitId":"Chilaiping"},"content":"                tasks.add(new Deadlines(taskName, dateline));"},{"lineNumber":119,"author":{"gitId":"Chilaiping"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"Chilaiping"},"content":"            return Ui.replyLine(tasks, input, count);"},{"lineNumber":121,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":124,"author":{"gitId":"Chilaiping"},"content":"    public static String addEvents(ArrayList\u003cTask\u003e tasks, String input, int count) throws DukeException {"},{"lineNumber":125,"author":{"gitId":"Chilaiping"},"content":"        String schedule;"},{"lineNumber":126,"author":{"gitId":"Chilaiping"},"content":"        String taskName;"},{"lineNumber":127,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":128,"author":{"gitId":"Chilaiping"},"content":"        if (!input.contains(\" \")) {"},{"lineNumber":129,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(Ui.eventErrEmpty());"},{"lineNumber":130,"author":{"gitId":"Chilaiping"},"content":"        } else if (input.length() - 1 \u003d\u003d input.indexOf(\" \")) {"},{"lineNumber":131,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(Ui.eventErrEmpty());"},{"lineNumber":132,"author":{"gitId":"Chilaiping"},"content":"        } else if (!input.contains(\"/at\")) {"},{"lineNumber":133,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(Ui.eventNoAt());"},{"lineNumber":134,"author":{"gitId":"Chilaiping"},"content":"        } else if (input.contains(\"/memo\")) {"},{"lineNumber":135,"author":{"gitId":"Chilaiping"},"content":"            int indexA \u003d input.indexOf(\"/at\");"},{"lineNumber":136,"author":{"gitId":"Chilaiping"},"content":"            int indexM \u003d input.indexOf(\"/memo\");"},{"lineNumber":137,"author":{"gitId":"Chilaiping"},"content":"            schedule \u003d input.substring(indexA + 4, indexM - 1);"},{"lineNumber":138,"author":{"gitId":"Chilaiping"},"content":"            taskName \u003d input.substring(input.indexOf(\" \") + 1, indexA - 1);"},{"lineNumber":139,"author":{"gitId":"Chilaiping"},"content":"            String memo \u003d input.substring(indexM + 6);"},{"lineNumber":140,"author":{"gitId":"Chilaiping"},"content":"            tasks.add(new Events(taskName, schedule, memo));"},{"lineNumber":141,"author":{"gitId":"Chilaiping"},"content":"            return Ui.replyLine(tasks, input, count);"},{"lineNumber":142,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":143,"author":{"gitId":"Chilaiping"},"content":"            int index \u003d input.indexOf(\"/at\");"},{"lineNumber":144,"author":{"gitId":"Chilaiping"},"content":"            schedule \u003d input.substring(index + 4);"},{"lineNumber":145,"author":{"gitId":"Chilaiping"},"content":"            taskName \u003d input.substring(input.indexOf(\" \") + 1, index);"},{"lineNumber":146,"author":{"gitId":"Chilaiping"},"content":"            tasks.add(new Events(taskName, schedule));"},{"lineNumber":147,"author":{"gitId":"Chilaiping"},"content":"            return Ui.replyLine(tasks, input, count);"},{"lineNumber":148,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":151,"author":{"gitId":"Chilaiping"},"content":"    public static String addRecurringTasks(ArrayList\u003cTask\u003e tasks, String input, int count) throws DukeException {"},{"lineNumber":152,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":153,"author":{"gitId":"Chilaiping"},"content":"        if (input.length() \u003c 7) {"},{"lineNumber":154,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a Todo cannot be empty.\\n\""},{"lineNumber":155,"author":{"gitId":"Chilaiping"},"content":"                    + \"Please re-input or enter bye to terminate the program\\n\");"},{"lineNumber":156,"author":{"gitId":"Chilaiping"},"content":"        } else if (input.contains(\"/memo\")) {"},{"lineNumber":157,"author":{"gitId":"Chilaiping"},"content":"            int indexS \u003d input.indexOf(\" \");"},{"lineNumber":158,"author":{"gitId":"Chilaiping"},"content":"            int indexM \u003d input.indexOf(\"/memo\");"},{"lineNumber":159,"author":{"gitId":"Chilaiping"},"content":"            String taskType \u003d input.substring(0, indexS);"},{"lineNumber":160,"author":{"gitId":"Chilaiping"},"content":"            String taskName \u003d input.substring(indexS + 1);"},{"lineNumber":161,"author":{"gitId":"Chilaiping"},"content":"            String memo \u003d input.substring(indexM + 5);"},{"lineNumber":162,"author":{"gitId":"Chilaiping"},"content":"            tasks.add(new RecurrTask(taskName, taskType, memo));"},{"lineNumber":163,"author":{"gitId":"Chilaiping"},"content":"            return Ui.replyLine(tasks, input, count);"},{"lineNumber":164,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":165,"author":{"gitId":"Chilaiping"},"content":"            int index \u003d input.indexOf(\" \");"},{"lineNumber":166,"author":{"gitId":"Chilaiping"},"content":"            tasks.add(new RecurrTask(input.substring(index + 1), input.substring(0, index)));"},{"lineNumber":167,"author":{"gitId":"Chilaiping"},"content":"            return Ui.replyLine(tasks, input, count);"},{"lineNumber":168,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":171,"author":{"gitId":"Chilaiping"},"content":"    public static boolean isDuplicates(ArrayList\u003cTask\u003e tasks, String input) {"},{"lineNumber":172,"author":{"gitId":"Chilaiping"},"content":"        int index \u003d input.indexOf(\" \");"},{"lineNumber":173,"author":{"gitId":"Chilaiping"},"content":"        String taskName;"},{"lineNumber":174,"author":{"gitId":"Chilaiping"},"content":"        String newInputTaskName;"},{"lineNumber":175,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":176,"author":{"gitId":"Chilaiping"},"content":"        if (input.contains(\"/by\")) {"},{"lineNumber":177,"author":{"gitId":"Chilaiping"},"content":"            newInputTaskName \u003d input.substring(index + 2, input.indexOf(\"/by\"));"},{"lineNumber":178,"author":{"gitId":"Chilaiping"},"content":"        } else if (input.contains(\"/at\")) {"},{"lineNumber":179,"author":{"gitId":"Chilaiping"},"content":"            newInputTaskName \u003d input.substring(index + 2, input.indexOf(\"/at\"));"},{"lineNumber":180,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":181,"author":{"gitId":"Chilaiping"},"content":"            newInputTaskName \u003d input.substring(index + 2);"},{"lineNumber":182,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":184,"author":{"gitId":"Chilaiping"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":185,"author":{"gitId":"Chilaiping"},"content":"            taskName \u003d tasks.get(i).getTask();"},{"lineNumber":186,"author":{"gitId":"Chilaiping"},"content":"            if (taskName.contains(newInputTaskName)) {"},{"lineNumber":187,"author":{"gitId":"Chilaiping"},"content":"                return true;"},{"lineNumber":188,"author":{"gitId":"Chilaiping"},"content":"            }"},{"lineNumber":189,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"Chilaiping"},"content":"        return false;"},{"lineNumber":191,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":192}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import duke.Global;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import duke.Task;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":" * This class is to output the appropriate display to user based on user input."},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":" * Greeting, reply, error Messages."},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"public class Ui {"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"    public Ui() {"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"        welcomeLogo();"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":"    public static void welcomeLogo() {"},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"        greetNote(\"welcome\");"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"    public static String greetNote(String hiBye) {"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":"        String welcome \u003d Global.PATTERNLINE"},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"                + \"\\n     Hello! I\u0027m Duke\\n\""},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"                + \"     What can I do for you?\\n\""},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":"                + Global.PATTERNLINE + \"\\n\";"},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":"        String farewell \u003d Global.PATTERNLINE"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":"                + \"\\n   Bye. Hope to see you again soon!\\n\""},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"                + Global.PATTERNLINE;"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"        if (hiBye.equals(\"welcome\")) {"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"            //System.out.println(welcome);"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"            return welcome;"},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"            //System.out.println(farewell);"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"            return farewell;"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":"     * This method is a print out a list of existing task whenever user requested from Array List."},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"    static String printList(ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":54,"author":{"gitId":"Chilaiping"},"content":"        String output \u003d \"\";"},{"lineNumber":55,"author":{"gitId":"Chilaiping"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":56,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(\"Your List is Empty\\n\");"},{"lineNumber":57,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(Global.PATTERNLINE);"},{"lineNumber":59,"author":{"gitId":"Chilaiping"},"content":"        output +\u003d Global.PATTERNLINE + \"\\n\";"},{"lineNumber":60,"author":{"gitId":"Chilaiping"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":61,"author":{"gitId":"Chilaiping"},"content":"            //System.out.print(i + \". \");"},{"lineNumber":62,"author":{"gitId":"Chilaiping"},"content":"            //tasks.get(i - 1).printTask();"},{"lineNumber":63,"author":{"gitId":"Chilaiping"},"content":"            output \u003d output + i + \". \";"},{"lineNumber":64,"author":{"gitId":"Chilaiping"},"content":"            output +\u003d tasks.get(i - 1).printTask() + \"\\n\";"},{"lineNumber":65,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(Global.PATTERNLINE);"},{"lineNumber":67,"author":{"gitId":"Chilaiping"},"content":"        output +\u003d Global.PATTERNLINE + \"\\n\";"},{"lineNumber":68,"author":{"gitId":"Chilaiping"},"content":"        return output;"},{"lineNumber":69,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":71,"author":{"gitId":"Chilaiping"},"content":"    static String findTask(String input, ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":72,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":73,"author":{"gitId":"Chilaiping"},"content":"        String keyword \u003d input.substring(5);"},{"lineNumber":74,"author":{"gitId":"Chilaiping"},"content":"        String output \u003d \"\";"},{"lineNumber":75,"author":{"gitId":"Chilaiping"},"content":"        int count \u003d 1;"},{"lineNumber":76,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":77,"author":{"gitId":"Chilaiping"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":78,"author":{"gitId":"Chilaiping"},"content":"            String temp \u003d tasks.get(i).toString();"},{"lineNumber":79,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":80,"author":{"gitId":"Chilaiping"},"content":"            if (temp.contains(keyword)) {"},{"lineNumber":81,"author":{"gitId":"Chilaiping"},"content":"                if (count \u003d\u003d 1) {"},{"lineNumber":82,"author":{"gitId":"Chilaiping"},"content":"                    //System.out.println(Global.PATTERNLINE + \"\\nHere are the matching tasks in your list:\");"},{"lineNumber":83,"author":{"gitId":"Chilaiping"},"content":"                    output +\u003d Global.PATTERNLINE + \"\\nHere are the matching tasks in your list:\\n\";"},{"lineNumber":84,"author":{"gitId":"Chilaiping"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"Chilaiping"},"content":"                //System.out.println(count + \". \" + temp);"},{"lineNumber":86,"author":{"gitId":"Chilaiping"},"content":"                output +\u003d count + \". \" + temp + \"\\n\";"},{"lineNumber":87,"author":{"gitId":"Chilaiping"},"content":"                count++;"},{"lineNumber":88,"author":{"gitId":"Chilaiping"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":91,"author":{"gitId":"Chilaiping"},"content":"        if (count \u003d\u003d 1) {"},{"lineNumber":92,"author":{"gitId":"Chilaiping"},"content":"            throw new DukeException(noKeywords());"},{"lineNumber":93,"author":{"gitId":"Chilaiping"},"content":"        } else {"},{"lineNumber":94,"author":{"gitId":"Chilaiping"},"content":"            //System.out.println(Global.PATTERNLINE);"},{"lineNumber":95,"author":{"gitId":"Chilaiping"},"content":"            output +\u003d Global.PATTERNLINE;"},{"lineNumber":96,"author":{"gitId":"Chilaiping"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":98,"author":{"gitId":"Chilaiping"},"content":"        return output;"},{"lineNumber":99,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":101,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Chilaiping"},"content":"     * The following method is to print out and send reply to acknowledge whenever user."},{"lineNumber":103,"author":{"gitId":"Chilaiping"},"content":"     * perform these function -\u003e added new Task, set Done, delete Task"},{"lineNumber":104,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":106,"author":{"gitId":"Chilaiping"},"content":"    static String replyLine(ArrayList\u003cTask\u003e tasks, String input, int count) {"},{"lineNumber":107,"author":{"gitId":"Chilaiping"},"content":"        String output \u003d \"\";"},{"lineNumber":108,"author":{"gitId":"Chilaiping"},"content":"        //System.out.print(Global.PATTERNLINE + \"\\nGot it. I\u0027ve added this task: \\n\\t\");"},{"lineNumber":109,"author":{"gitId":"Chilaiping"},"content":"        //tasks.get(count).printTask();"},{"lineNumber":110,"author":{"gitId":"Chilaiping"},"content":"        output +\u003d Global.PATTERNLINE + \"\\nGot it. I\u0027ve added this task: \\n\\t\";"},{"lineNumber":111,"author":{"gitId":"Chilaiping"},"content":"        output +\u003d tasks.get(count).printTask();"},{"lineNumber":112,"author":{"gitId":"Chilaiping"},"content":"        count +\u003d 1;"},{"lineNumber":113,"author":{"gitId":"Chilaiping"},"content":"        output +\u003d \"\\nNow you have \" + count + \" tasks in the list.\\n\" + Global.PATTERNLINE;"},{"lineNumber":114,"author":{"gitId":"Chilaiping"},"content":"        return output;"},{"lineNumber":115,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(\"Now you have \" + count + \" tasks in the list.\\n\" + Global.PATTERNLINE);"},{"lineNumber":116,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":118,"author":{"gitId":"Chilaiping"},"content":"    public static void replyMarkedDone(ArrayList\u003cTask\u003e tasks, int index) {"},{"lineNumber":119,"author":{"gitId":"Chilaiping"},"content":"        System.out.println(Global.PATTERNLINE + \"\\nNice! I\u0027ve marked this task as done:\");"},{"lineNumber":120,"author":{"gitId":"Chilaiping"},"content":"        tasks.get(index - 1).printTask();"},{"lineNumber":121,"author":{"gitId":"Chilaiping"},"content":"        System.out.println(Global.PATTERNLINE);"},{"lineNumber":122,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":124,"author":{"gitId":"Chilaiping"},"content":"    public static String replyDeleteTask(ArrayList\u003cTask\u003e tasks, int index) {"},{"lineNumber":125,"author":{"gitId":"Chilaiping"},"content":"        String output \u003d \"\";"},{"lineNumber":126,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(Global.PATTERNLINE + \"\\nNoted. I\u0027ve removed this task: \");"},{"lineNumber":127,"author":{"gitId":"Chilaiping"},"content":"        //tasks.get(index - 1).printTask();"},{"lineNumber":128,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(\"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\\n\" + Global.PATTERNLINE);"},{"lineNumber":129,"author":{"gitId":"Chilaiping"},"content":"        output +\u003d Global.PATTERNLINE + \"\\nNoted. I\u0027ve removed this task: \\n\";"},{"lineNumber":130,"author":{"gitId":"Chilaiping"},"content":"        output +\u003d tasks.get(index - 1).printTask();"},{"lineNumber":131,"author":{"gitId":"Chilaiping"},"content":"        output +\u003d \"\\nNow you have \" + (tasks.size() - 1) + \" tasks in the list.\\n\" + Global.PATTERNLINE;"},{"lineNumber":132,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":133,"author":{"gitId":"Chilaiping"},"content":"        return output;"},{"lineNumber":134,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":136,"author":{"gitId":"Chilaiping"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"Chilaiping"},"content":"     * The following methods is to show Error Exception Throw at different scenarios."},{"lineNumber":138,"author":{"gitId":"Chilaiping"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":140,"author":{"gitId":"Chilaiping"},"content":"    public static String errIndexOutOfBoundsException() {"},{"lineNumber":141,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(Global.PATTERNLINE + \"\\nFriend, You do not have so much task in the list\\n\""},{"lineNumber":142,"author":{"gitId":"Chilaiping"},"content":"        //       + Global.PATTERNLINE);"},{"lineNumber":143,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":144,"author":{"gitId":"Chilaiping"},"content":"        return Global.PATTERNLINE + \"\\nFriend, You do not have so much task in the list\\n\""},{"lineNumber":145,"author":{"gitId":"Chilaiping"},"content":"                + Global.PATTERNLINE;"},{"lineNumber":146,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":148,"author":{"gitId":"Chilaiping"},"content":"    public static String errInvalidInput(Exception e) {"},{"lineNumber":149,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(e + \"\\n\" + Global.PATTERNLINE);"},{"lineNumber":150,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(Global.PATTERNLINE + \"\\nYou have entered invalid input. Please re-input or \\n\" +"},{"lineNumber":151,"author":{"gitId":"Chilaiping"},"content":"        //        \"Enter bye to terminate the program.\\n\" + Global.PATTERNLINE);"},{"lineNumber":152,"author":{"gitId":"Chilaiping"},"content":"        return e + \"\\n\";"},{"lineNumber":153,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":155,"author":{"gitId":"Chilaiping"},"content":"    public void showLoadingError() throws DukeException {"},{"lineNumber":156,"author":{"gitId":"Chilaiping"},"content":"        System.out.println(Global.PATTERNLINE + \"File Not Found\");"},{"lineNumber":157,"author":{"gitId":"Chilaiping"},"content":"        throw new DukeException(\"No File\");"},{"lineNumber":158,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":160,"author":{"gitId":"Chilaiping"},"content":"    public static String deadlineErrEmpty() {"},{"lineNumber":161,"author":{"gitId":"Chilaiping"},"content":"        String errorEmpty \u003d \"☹ OOPS!!! The description of a Deadlines cannot be empty.\\n \""},{"lineNumber":162,"author":{"gitId":"Chilaiping"},"content":"                + \"Please re-input or enter bye to terminate the program\\n\";"},{"lineNumber":163,"author":{"gitId":"Chilaiping"},"content":"        return errorEmpty;"},{"lineNumber":164,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":166,"author":{"gitId":"Chilaiping"},"content":"    public static String deadlineNoBy() {"},{"lineNumber":167,"author":{"gitId":"Chilaiping"},"content":"        String errorMissing \u003d \"You have input your Schedule or Wrong format\\nPlease include -\u003e /by when\\n\";"},{"lineNumber":168,"author":{"gitId":"Chilaiping"},"content":"        return errorMissing;"},{"lineNumber":169,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":171,"author":{"gitId":"Chilaiping"},"content":"    public static String eventErrEmpty() {"},{"lineNumber":172,"author":{"gitId":"Chilaiping"},"content":"        String errorEmpty \u003d \"\\n☹ OOPS!!! The description of a Events cannot be empty.\\n \""},{"lineNumber":173,"author":{"gitId":"Chilaiping"},"content":"                + \"Please re-input or enter bye to terminate the program\\n\";"},{"lineNumber":174,"author":{"gitId":"Chilaiping"},"content":"        return Global.PATTERNLINE + errorEmpty;"},{"lineNumber":175,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":177,"author":{"gitId":"Chilaiping"},"content":"    public static String eventNoAt() {"},{"lineNumber":178,"author":{"gitId":"Chilaiping"},"content":"        String errorMissing \u003d \"\\nYou have not input your Schedule or Wrong format. \\nPlease include -\u003e /at when\\n\";"},{"lineNumber":179,"author":{"gitId":"Chilaiping"},"content":"        return Global.PATTERNLINE + errorMissing;"},{"lineNumber":180,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":182,"author":{"gitId":"Chilaiping"},"content":"    private static String noKeywords() {"},{"lineNumber":183,"author":{"gitId":"Chilaiping"},"content":"        String err \u003d \"No Tasks with Similar Keyword was found from the List\\n\";"},{"lineNumber":184,"author":{"gitId":"Chilaiping"},"content":"        //System.out.println(err);"},{"lineNumber":185,"author":{"gitId":"Chilaiping"},"content":"        return err;"},{"lineNumber":186,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":188,"author":{"gitId":"Chilaiping"},"content":"    public static String duplicatedMsg() {"},{"lineNumber":189,"author":{"gitId":"Chilaiping"},"content":"        String err \u003d Global.PATTERNLINE + \"\\nSame or Similar tasks were detected in data\\n\""},{"lineNumber":190,"author":{"gitId":"Chilaiping"},"content":"                + Global.PATTERNLINE;"},{"lineNumber":191,"author":{"gitId":"Chilaiping"},"content":"        return err;"},{"lineNumber":192,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":194,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":194}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Chilaiping":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"\u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"524.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":"    \u003cButton fx:id\u003d\"handleUserInput\" layoutX\u003d\"524.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":"        \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"588.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"        \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":"\u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Chilaiping":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"import jdk.jfr.Event;"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"import ui.Parser;"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"import ui.TaskList;"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"import ui.Ui;"},{"lineNumber":8,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":9,"author":{"gitId":"Chilaiping"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"Chilaiping"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"Chilaiping"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":13,"author":{"gitId":"Chilaiping"},"content":"import static junit.framework.Assert.assertEquals;"},{"lineNumber":14,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":15,"author":{"gitId":"Chilaiping"},"content":"public class DukeTest {"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":"    public void duke() throws IOException, DukeException {"},{"lineNumber":18,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":19,"author":{"gitId":"Chilaiping"},"content":"        String command \u003d \"Todo Adding New\";"},{"lineNumber":20,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":21,"author":{"gitId":"Chilaiping"},"content":"        ArrayList\u003cTask\u003e expectedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"Chilaiping"},"content":"        expectedTasks.add(new ToDos(\"Adding New\"));"},{"lineNumber":23,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":24,"author":{"gitId":"Chilaiping"},"content":"        ArrayList\u003cTask\u003e actualTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"Chilaiping"},"content":"        Parser parser \u003d new Parser(command);"},{"lineNumber":26,"author":{"gitId":"Chilaiping"},"content":"        TaskList tasklist \u003d new TaskList(actualTasks);"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"        parser.processInput(command,actualTasks);"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"        actualTasks \u003d tasklist.getTasksArr();"},{"lineNumber":29,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":30,"author":{"gitId":"Chilaiping"},"content":"        assertEquals(expectedTasks,actualTasks);"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":33,"author":{"gitId":"Chilaiping"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"Chilaiping"},"content":"    public void checkDeleteFunction() throws IOException, DukeException {"},{"lineNumber":35,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":36,"author":{"gitId":"Chilaiping"},"content":"        ArrayList\u003cTask\u003e expectedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"Chilaiping"},"content":"        expectedTasks.add(new ToDos(\"Adding New One\"));"},{"lineNumber":38,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":39,"author":{"gitId":"Chilaiping"},"content":"        ArrayList\u003cTask\u003e actualTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"Chilaiping"},"content":"        String commandAdd \u003d \"Todo Adding New One\";"},{"lineNumber":41,"author":{"gitId":"Chilaiping"},"content":"        String commandAdd2 \u003d \"Deadlines Adding New 2 /by 2020-09-20 09:00\";"},{"lineNumber":42,"author":{"gitId":"Chilaiping"},"content":"        final String deleteCommand \u003d \"delete 2\";"},{"lineNumber":43,"author":{"gitId":"Chilaiping"},"content":"        Parser parser \u003d new Parser(commandAdd);"},{"lineNumber":44,"author":{"gitId":"Chilaiping"},"content":"        TaskList tasklist \u003d new TaskList(actualTasks);"},{"lineNumber":45,"author":{"gitId":"Chilaiping"},"content":"        parser.processInput(commandAdd,actualTasks);"},{"lineNumber":46,"author":{"gitId":"Chilaiping"},"content":"        parser.processInput(commandAdd2, actualTasks);"},{"lineNumber":47,"author":{"gitId":"Chilaiping"},"content":"        actualTasks \u003d tasklist.getTasksArr();"},{"lineNumber":48,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":49,"author":{"gitId":"Chilaiping"},"content":"        parser.processInput(deleteCommand, actualTasks);"},{"lineNumber":50,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":51,"author":{"gitId":"Chilaiping"},"content":"        assertEquals(expectedTasks,actualTasks);"},{"lineNumber":52,"author":{"gitId":"Chilaiping"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Chilaiping"},"content":"}"}],"authorContributionMap":{"Chilaiping":53}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Chilaiping"},"content":"todo thinking"},{"lineNumber":2,"author":{"gitId":"Chilaiping"},"content":"deadline adding new stuff /by 30 Apr"},{"lineNumber":3,"author":{"gitId":"Chilaiping"},"content":"events attend meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"Chilaiping"},"content":"list"},{"lineNumber":5,"author":{"gitId":"Chilaiping"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"Chilaiping"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Chilaiping"},"content":"bye"}],"authorContributionMap":{"Chilaiping":7}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Chilaiping"},"content":"if ! javac -cp /Users/laiping/Documents/TIC4001/ip/src/main/java -Xlint:none -d /Users/laiping/Documents/TIC4001/ip/bin /Users/laiping/Documents/TIC4001/ip/src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"Chilaiping"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"then"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":21,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":27,"author":{"gitId":"Chilaiping"},"content":"cp ./EXPECTED.TXT ./EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"Chilaiping"},"content":"dos2unix ./ACTUAL.TXT ./EXPECTED-UNIX.TXT"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":31,"author":{"gitId":"Chilaiping"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Chilaiping":5,"-":34}}]
