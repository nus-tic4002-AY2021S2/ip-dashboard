[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"linqing42"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"linqing42"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"linqing42"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"linqing42"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"linqing42"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":7,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":8,"author":{"gitId":"linqing42"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"linqing42"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"linqing42"},"content":"    jcenter()"},{"lineNumber":11,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":12,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":13,"author":{"gitId":"linqing42"},"content":"dependencies {"},{"lineNumber":14,"author":{"gitId":"linqing42"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"linqing42"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"linqing42"},"content":"    // https://mvnrepository.com/artifact/com.sun.mail/javax.mail"},{"lineNumber":17,"author":{"gitId":"linqing42"},"content":"    testCompile \u0027junit:junit:4.12\u0027"},{"lineNumber":18,"author":{"gitId":"linqing42"},"content":"    compile \u0027junit:junit:4.12\u0027"},{"lineNumber":19,"author":{"gitId":"linqing42"},"content":"    compile group: \u0027com.sun.mail\u0027, name: \u0027javax.mail\u0027, version: \u00271.6.2\u0027"},{"lineNumber":20,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":21,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":22,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":23,"author":{"gitId":"linqing42"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"linqing42"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"linqing42"},"content":"    testLogging {"},{"lineNumber":26,"author":{"gitId":"linqing42"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":27,"author":{"gitId":"linqing42"},"content":"        showExceptions true"},{"lineNumber":28,"author":{"gitId":"linqing42"},"content":"        exceptionFormat \"full\""},{"lineNumber":29,"author":{"gitId":"linqing42"},"content":"        showCauses true"},{"lineNumber":30,"author":{"gitId":"linqing42"},"content":"        showStackTraces true"},{"lineNumber":31,"author":{"gitId":"linqing42"},"content":"        showStandardStreams \u003d false"},{"lineNumber":32,"author":{"gitId":"linqing42"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":34,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":35,"author":{"gitId":"linqing42"},"content":"jar{"},{"lineNumber":36,"author":{"gitId":"linqing42"},"content":"    manifest {"},{"lineNumber":37,"author":{"gitId":"linqing42"},"content":"        attributes("},{"lineNumber":38,"author":{"gitId":"linqing42"},"content":"                \u0027Main-Class\u0027: \u0027Dukes.Duke\u0027"},{"lineNumber":39,"author":{"gitId":"linqing42"},"content":"        )"},{"lineNumber":40,"author":{"gitId":"linqing42"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":42,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":43,"author":{"gitId":"linqing42"},"content":"run {"},{"lineNumber":44,"author":{"gitId":"linqing42"},"content":"    enableAssertions \u003d true"},{"lineNumber":45,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":46,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":47,"author":{"gitId":"linqing42"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"linqing42"},"content":"    mainClassName \u003d \"Dukes.Duke\""},{"lineNumber":49,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":50,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":51,"author":{"gitId":"linqing42"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"linqing42"},"content":"    archiveBaseName \u003d \"Duke\""},{"lineNumber":53,"author":{"gitId":"linqing42"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":55,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":56,"author":{"gitId":"linqing42"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"linqing42"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":58,"author":{"gitId":"linqing42"},"content":"}"},{"lineNumber":59,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":60,"author":{"gitId":"linqing42"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"linqing42"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"linqing42"},"content":"}"}],"authorContributionMap":{"linqing42":62}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":"Project Dukes.Duke is a educational software project that helps user to keep track of various things."},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003cbr/\u003e The link is [website for product user guid ](https://linqing42.github.io/ip/)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Quick start "},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"1. Ensure you have Java 11 or above installed in your Computer"},{"lineNumber":8,"author":{"gitId":"-"},"content":"1. Download the IntelliJ"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version as follows:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":13,"author":{"gitId":"-"},"content":"1. Download the latest project from [here](https://github.com/linqing42/ip)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij."},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Go to the sr folder and find src\\main\\java\\Dukes\\Dukes.Duke"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Right click the Dukes.Duke and select Run Dukes.Duke"},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. The program now should run on the Console (usually located at the bottom side)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Type the command and press Enter to execute it.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1.Refer to teh [Feature](#features) below for details of each command."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"### Feature 1 "},{"lineNumber":24,"author":{"gitId":"-"},"content":"Adding a task: todo"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Adding a task in the task list and show the total number of task in the list. Therefore, the user know the task that he need to do."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"### `todo` - Adding a task into a task list."},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe keyword \u0027todo\u0027 with description can be **upper and lowercase letters** and its outcome will not include the keyword."},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eIf you key in the keyword without description. There will be an error message:\"â˜¹ OOPS!!! The description of a todo cannot be empty. \""},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"**Format**: todo Description"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"**Example of usage**: "},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cbr/\u003eTOdo Read BOOK"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cbr/\u003eGot it. I\u0027ve added this task: "},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cbr/\u003e[T][X] Read BOOK"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003cbr/\u003eNow you have [index number] task in the list."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"### Feature 2 "},{"lineNumber":44,"author":{"gitId":"-"},"content":"Adding a deadline task: deadline"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Adding a deadline task helps to know the deadline for the specific task in the task list and show the total number of task in the list."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"### `deadline` - Adding a deadline task"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe keyword \u0027deadline\u0027 with description can be **upper and lowercase letters**."},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe outcome will not include the keyword with date and time format: dd MMM yyyy, hh:mm a"},{"lineNumber":53,"author":{"gitId":"linqing42"},"content":"\u003cbr/\u003e\u003eIf you key in the keyword without description. There will be an error message:\"OOPS!!! The description of a deadline cannot be empty.\" "},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eIf you missing the date and time or /by, there will be an reminder message:\"Please specify the deadline date and time.\""},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"**Format**: deadline  Description /by dd/mm/yyyy HHmm"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"**Example of usage**:"},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003cbr/\u003edeadline return book /by 12/12/2019 1800"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003cbr/\u003eGot it. I\u0027ve added this task: "},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003cbr/\u003e[D][X] return book (by:12 Dec 2019, 06:00 PM)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cbr/\u003eNow you have [index number] task in the list."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"### Feature 3 "},{"lineNumber":67,"author":{"gitId":"-"},"content":"Adding an event task: event"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Adding an event task helps to remember to join or complete the event with specific date and time in the task list and show the total number of task in the list."},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"### `event` - Adding an event task"},{"lineNumber":73,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe keyword \u0027event\u0027 with description can be **upper and lowercase letters**."},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe outcome will not include the keyword with date adn time format: dd MMM yyyy, hh:mm a"},{"lineNumber":75,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eIf you key in the keyword without description. There will be an error message:\"â˜¹ OOPS!!! The description of a event cannot be empty.\""},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eIf you missing the date and time or /by, there will be an reminder message:\"Please specify the event date and time.\""},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"**Format**: event  Description /by dd/mm/yyyy HHmm"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**Example of usage**:"},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003cbr/\u003eEVENT join club /at 12/11/2019 0900"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003cbr/\u003eGot it. I\u0027ve added this task: "},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cbr/\u003e[E][X] join club (at:12 Nov 2019, 09:00 AM)"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Feature 4 "},{"lineNumber":88,"author":{"gitId":"-"},"content":"Marking a specific task: done"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Marking a specific task to remind the user that he has finished the task."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"### `done` - Marking a specific task from the task list."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe keyword \u0027done\u0027 can be **upper and lowercase letters** "},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe outcome will be change the X to âœ“ in the specific task."},{"lineNumber":96,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe index refers to the index number shown in the displayed task list and the index **must be positive integer** 1,2,3..."},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eIf you key in the keyword without INDEX. There will be an error message:\"please key in correct format.\" "},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"**Format**: done INDEX"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"**Example of usage**: "},{"lineNumber":102,"author":{"gitId":"-"},"content":"\u003cbr/\u003estep 1: TODO READ BOOK"},{"lineNumber":103,"author":{"gitId":"-"},"content":"\u003cbr/\u003estep 2: Done 1 or DONE 1 or done 1"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003cbr/\u003eNice! I\u0027ve marked this task as done:"},{"lineNumber":107,"author":{"gitId":"linqing42"},"content":"\u003cbr/\u003e[T][Done] READ BOOK"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"### Feature 5"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Deleting a task: delete"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":113,"author":{"gitId":"-"},"content":"Delete a specific task from task list to helps remove the completed task and tidy the task list. It will show the total number of tasks left in the task list. "},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"### `delete` - Deleting a specific task from the task list."},{"lineNumber":116,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe keyword \u0027delete\u0027 can be **upper and lowercase letters** and its outcome will be remove the specific task and reduce the total number of task in the list."},{"lineNumber":117,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe index refers to the index number shown in the displayed task list and the index **must be a positive integer** 1,2,3..."},{"lineNumber":118,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eIf you key in the keyword without INDEX. There will be an error message:\"â˜¹ OOPS!!! There is no specific task to delete.\""},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**Format**: delete INDEX"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"**Example of usage**:"},{"lineNumber":123,"author":{"gitId":"-"},"content":"\u003cbr/\u003estep 1.TODO READ BOOK"},{"lineNumber":124,"author":{"gitId":"-"},"content":"\u003cbr/\u003estep 2: done 1"},{"lineNumber":125,"author":{"gitId":"-"},"content":"\u003cbr/\u003esteps 3:Delete 1 or DELETE 1 or delete 1"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"\u003cbr/\u003eNoted. I\u0027ve removed this task: "},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cbr/\u003e[T][âœ“] READ BOOK"},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003cbr/\u003eNow you have [INDEX-1] task in the list."},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"### Feature 6"},{"lineNumber":133,"author":{"gitId":"-"},"content":"Listing all tasks: list"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":136,"author":{"gitId":"-"},"content":"It shows a list of all task in the task list with a number. it helps to summarize the task list."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### `list` - Listing all tasks with number."},{"lineNumber":139,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe keyword \u0027list\u0027 can be **upper and lowercase letters** and its outcome will be show a list of task in the task list"},{"lineNumber":140,"author":{"gitId":"linqing42"},"content":"\u003cbr/\u003e\u003eIf you key in the keyword with empty task.There will be an error message:\"OOPS!!! There are no tasks in your list.\""},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"**Format**: list"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"**Example of usage**: "},{"lineNumber":145,"author":{"gitId":"-"},"content":"\u003cbr/\u003estep 1.TODO READ BOOK"},{"lineNumber":146,"author":{"gitId":"-"},"content":"\u003cbr/\u003estep 2. list or List or LIST"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   \u003cbr/\u003eHere are the tasks in your list:"},{"lineNumber":150,"author":{"gitId":"-"},"content":"   \u003cbr/\u003e1.[T][X] READ BOOK"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    "},{"lineNumber":153,"author":{"gitId":"-"},"content":"### Feature 7"},{"lineNumber":154,"author":{"gitId":"-"},"content":"Locating tasks by description_keyword: find"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":157,"author":{"gitId":"-"},"content":"It helps to search a task that contain any of the given description_keyword, and the search is case-insensitive. e.g book will match BOOK. Therefore, the user can easily find out the specific task base on find function."},{"lineNumber":158,"author":{"gitId":"-"},"content":"### `find` - Locating tasks with given description_keyword"},{"lineNumber":159,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe keyword \u0027find\u0027 can be **upper and lowercase letters** and its outcome will be show a list of task in the task list when the task is match the specific description keywords."},{"lineNumber":160,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eThe order of the description_keyword does not matter."},{"lineNumber":161,"author":{"gitId":"-"},"content":"\u003cbr/\u003e\u003eIf you key in the specific description keyword that does not match the task in your list.There will be an error message:\"â˜¹ OOPS!!! There is no matching tasks in your list.\""},{"lineNumber":162,"author":{"gitId":"linqing42"},"content":"\u003cbr/\u003e\u003eIf you only key in the **keyword**, there will be an error message:\"OOPS!!! The description of a find cannot be empty.\""},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"**Format**: find description_keyword[more_keyword]"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"**Example of usage**: "},{"lineNumber":167,"author":{"gitId":"-"},"content":"   \u003cbr/\u003estep 1.TODO READ BOOK"},{"lineNumber":168,"author":{"gitId":"-"},"content":"   \u003cbr/\u003estep 2. todo join club"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cbr/\u003estep 3. find book or Find BOok or FIND BOOK"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":172,"author":{"gitId":"-"},"content":"   \u003cbr/\u003eHere are the matching tasks in your list:"},{"lineNumber":173,"author":{"gitId":"-"},"content":"   \u003cbr/\u003e1.[T][X] READ BOOK"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"### Feature 8"},{"lineNumber":176,"author":{"gitId":"-"},"content":"Exiting the program: exit/bye"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":179,"author":{"gitId":"-"},"content":"It helps to end the program and display the list of a task will be save in the hard disk."},{"lineNumber":180,"author":{"gitId":"-"},"content":"### `exit/bye` - Exiting the program "},{"lineNumber":181,"author":{"gitId":"-"},"content":"   \u003cbr/\u003eThe keyword \u0027exit/bye\u0027 can be **upper and lowercase letters** and its outcome will be show a list of task in the task list that will be save in hard disk and a bye message."},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"**Format**: exit "},{"lineNumber":184,"author":{"gitId":"-"},"content":"\u003cbr/\u003e**Format**: bye"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"**Example of usage**: "},{"lineNumber":187,"author":{"gitId":"-"},"content":"   \u003cbr/\u003estep 1.TODO READ BOOK"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   \u003cbr/\u003estep 2. todo join club"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   \u003cbr/\u003estep 3. bye/exit/BYE/EXIT/Bye/Exit"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":192,"author":{"gitId":"-"},"content":"   \u003cbr/\u003eYour following tasks will be save: "},{"lineNumber":193,"author":{"gitId":"-"},"content":"   \u003cbr/\u003e[T][X] READ BOOK"},{"lineNumber":194,"author":{"gitId":"-"},"content":"   \u003cbr/\u003e[T][X] join club"},{"lineNumber":195,"author":{"gitId":"-"},"content":"   \u003cbr/\u003eBye. Hope to see you again soon!"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"### Feature 9"},{"lineNumber":198,"author":{"gitId":"-"},"content":"Saving the task in the hard-disk"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":201,"author":{"gitId":"-"},"content":"It helps to save the tasks in the hard disk automatically after exiting the program, and the format of display will be change when task save in hard disk. It saves the user\u0027s time as there is no need to save manually."},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"**Example of usage**: "},{"lineNumber":204,"author":{"gitId":"-"},"content":"  \u003cbr/\u003estep 1. todo read book"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  \u003cbr/\u003estep 2. deadline return book /by 12/11/2019 1800"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  \u003cbr/\u003estep 3. event join club /at 11/2/2020 1300"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  \u003cbr/\u003estep 4. done 1"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  \u003cbr/\u003e step 5. bye"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   "},{"lineNumber":210,"author":{"gitId":"-"},"content":"**Expected outcome**: save into /data/duke.txt"},{"lineNumber":211,"author":{"gitId":"-"},"content":"\u003cbr/\u003e T | 1 | read book"},{"lineNumber":212,"author":{"gitId":"-"},"content":"\u003cbr/\u003e D | 0 | return book  | 12 Nov 2019, 06:00 PM"},{"lineNumber":213,"author":{"gitId":"-"},"content":"\u003cbr/\u003e E | 0 | join club  | 11 Feb 2020, 01:00 PM"},{"lineNumber":214,"author":{"gitId":"-"},"content":" "},{"lineNumber":215,"author":{"gitId":"-"},"content":"### Feature 10"},{"lineNumber":216,"author":{"gitId":"-"},"content":"Exceptions message"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":219,"author":{"gitId":"-"},"content":"It helps to handle error message that will guid the user."},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"**Example of usage**: "},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003cbr/\u003eread book"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Expected outcome**:"},{"lineNumber":225,"author":{"gitId":"linqing42"},"content":"\u003cbr/\u003eOOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"## Command Summary"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"![image of Command Summary](Command Summary.PNG)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"linqing42":5,"-":225}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"linqing42"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"linqing42"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"linqing42"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"linqing42"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"linqing42"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"linqing42"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"linqing42"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"linqing42"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"linqing42"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"linqing42"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"linqing42"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"linqing42"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"linqing42"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"linqing42"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"linqing42"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":17,"author":{"gitId":"linqing42"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"linqing42"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"linqing42"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"linqing42"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"linqing42"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"linqing42"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":24,"author":{"gitId":"linqing42"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"linqing42"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":27,"author":{"gitId":"linqing42"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"linqing42"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"linqing42"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"linqing42"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":32,"author":{"gitId":"linqing42"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"linqing42"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":35,"author":{"gitId":"linqing42"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"linqing42"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":38,"author":{"gitId":"linqing42"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"linqing42"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":41,"author":{"gitId":"linqing42"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"linqing42"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"linqing42"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":45,"author":{"gitId":"linqing42"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"linqing42"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 seedu.tracker.command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"linqing42"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"linqing42"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"linqing42"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":51,"author":{"gitId":"linqing42"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":53,"author":{"gitId":"linqing42"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"linqing42"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"linqing42"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":57,"author":{"gitId":"linqing42"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":59,"author":{"gitId":"linqing42"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"linqing42"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"linqing42"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"linqing42"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"linqing42"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":65,"author":{"gitId":"linqing42"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":67,"author":{"gitId":"linqing42"},"content":":init"},{"lineNumber":68,"author":{"gitId":"linqing42"},"content":"@rem Get seedu.tracker.command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":70,"author":{"gitId":"linqing42"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":72,"author":{"gitId":"linqing42"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"linqing42"},"content":"@rem Slurp the seedu.tracker.command line arguments."},{"lineNumber":74,"author":{"gitId":"linqing42"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"linqing42"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":77,"author":{"gitId":"linqing42"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"linqing42"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":80,"author":{"gitId":"linqing42"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":82,"author":{"gitId":"linqing42"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"linqing42"},"content":"@rem Setup the seedu.tracker.command line"},{"lineNumber":84,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":85,"author":{"gitId":"linqing42"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":87,"author":{"gitId":"linqing42"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"linqing42"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":90,"author":{"gitId":"linqing42"},"content":":end"},{"lineNumber":91,"author":{"gitId":"linqing42"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"linqing42"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":94,"author":{"gitId":"linqing42"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"linqing42"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"linqing42"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"linqing42"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"linqing42"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":100,"author":{"gitId":"linqing42"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"linqing42"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"linqing42"},"content":""},{"lineNumber":103,"author":{"gitId":"linqing42"},"content":":omega"}],"authorContributionMap":{"linqing42":103}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"linqing42"},"content":"rootProject.name \u003d \u0027Duke\u0027"},{"lineNumber":2,"author":{"gitId":"linqing42"},"content":""}],"authorContributionMap":{"linqing42":2}},{"path":"src/main/java/Dukes/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package Dukes;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import Dukes.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import Dukes.Tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import Dukes.command.Command;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import Dukes.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import Dukes.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The Dukes.Duke program implements an application that can store a list of task,save to a txt file."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * and print the task on the screen."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * it link to other classes which is an member for Dukes.Duke such as Storage, Task and Ui Class"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * @author LIN QING"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * @version 1.0"},{"lineNumber":17,"author":{"gitId":"linqing42"},"content":" * @since 18/1/2021"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private TaskList tasks;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Ui ui;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param path program will store the task in this path"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Duke(String path)  {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ui \u003d new Ui();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        storage \u003d new Storage(path);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        } catch ( DukeException e ) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            ui.printLoadingError(\"Problem reading file. Starting with an empty task list.\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * run program implements an application that simply shows the tasks and print on the screen"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * DukeException if the command word not in the case."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void run() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ui.printWelcome();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        boolean isExit \u003d false;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        while (!isExit) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                ui.showLine();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            } catch (DukeException e) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            } finally {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                ui.showLine();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * This is main method which made use of Dukes.Duke and run methods"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        public static void main(String[] args){"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            assert (args.length) \u003e 0;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                new Duke(\"data/duke.txt\").run();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"linqing42":1,"-":68}},{"path":"src/main/java/Dukes/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package Dukes.Tasks;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a Task."},{"lineNumber":5,"author":{"gitId":"-"},"content":" * Parent class of all other types of tasks."},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A \u003ccode\u003eTask\u003c/code\u003e object corresponds to a task to be added to a \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructor for \u003ccode\u003eTask\u003c/code\u003e."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @param description Description of the task."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Returns a tick icon if the task is completed and return a X icon if otherwise."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return Icon to indicate status of the task."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public String getStatusIcon() {"},{"lineNumber":24,"author":{"gitId":"linqing42"},"content":"        return (isDone ? \"Done\" : \"X\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public String getFileStatusIcon() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return (isDone ? \"1\" : \"0\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Sets the task as done."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Task markAsDone() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.isDone \u003d true;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Get the description of the task"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return the description of the task"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String getDescription() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return this.description;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toWriteFile() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \"T | \" + getFileStatusIcon() + \" | \" + description;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"linqing42":1,"-":56}},{"path":"src/main/java/Dukes/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package Dukes.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import Dukes.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import Dukes.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import Dukes.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import Dukes.Tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import Dukes.Ui;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Creates a FindCommand. It search for tasks when given keyword."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public FindCommand(String keyWord) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keyWord \u003d keyWord;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Finds the tasks with the given keyword."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param tasks   TaskList to be appended."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param ui      UI to interact with user."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param storage Storage to read and write files."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        TaskList filteredTasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        int count \u003d 0;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            for (Task task : tasks.list) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                String description \u003d task.getDescription().toLowerCase();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                if (description.contains(keyWord)) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    filteredTasks.list.add(task);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    count +\u003d 1;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                if (count \u003d\u003d 0) {"},{"lineNumber":39,"author":{"gitId":"linqing42"},"content":"                    throw new DukeException(\"OOPS!!! There is no matching task in the list\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                    for (int i \u003d 0; i \u003c filteredTasks.list.size(); i++) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                        System.out.println((i + 1) + \".\" + filteredTasks.list.get(i));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            }catch (IndexOutOfBoundsException e) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            System.out.print(\"Current task is empty in your list.\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"linqing42":1,"-":51}},{"path":"src/main/java/Dukes/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package Dukes.command;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import Dukes.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import Dukes.Tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import Dukes.Ui;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Create a ListCommand. It lists all tasks for users."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * Constructor for \u003ccode\u003eListCommand\u003c/code\u003e."},{"lineNumber":12,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public ListCommand() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * List all the tasks in the task list that was saved on the disk, and display to user"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param tasks TaskList to be appended."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param ui UI to interact with user."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param storage Storage to read and write files and temporary store in hard disk."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is empty list."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            int count \u003dtasks.list.size();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            if(count \u003d\u003d0) {"},{"lineNumber":28,"author":{"gitId":"linqing42"},"content":"                System.out.println(\"OOPS!!! There are no tasks in your list.\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            }else{"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                System.out.println(\"     Here are the tasks in your list:\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                for (int i \u003d 0; i \u003c tasks.list.size(); i++) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    System.out.println(\"    \" + (i + 1) + \".\" + tasks.list.get(i));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            System.out.print(\"current task is empty in your list.\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"linqing42":1,"-":38}},{"path":"src/main/java/Dukes/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package Dukes.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import Dukes.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import Dukes.Tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import Dukes.Tasks.Event;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import Dukes.Tasks.Task;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import Dukes.Tasks.ToDo;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import Dukes.Ui;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import Dukes.command.*;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Parser program containing methods that deals with parsing the user command to extract meaningful details from it."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Parser {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Processes the user input and creates the corresponding commands."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param input Command input by user."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return Corresponding command that is input by user."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws \u003ccode\u003eDukeException\u003c/code\u003eIf a new command cannot be created due to invalid input parameters."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Command parse(String input) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        Task taskWord;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String keyword;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Command c \u003d null;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String action \u003d input.split(\" \")[0].toLowerCase();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMM yyyy, hh:mm a\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        switch (action) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            case \"list\":"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                c \u003d new ListCommand();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            case \"todo\":"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                if (input.length() \u003c 6) {"},{"lineNumber":40,"author":{"gitId":"linqing42"},"content":"                    throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                taskWord \u003d new ToDo(input.substring(5));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                c \u003d new AddCommand(taskWord);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            case \"delete\":"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                if (input.isEmpty() || input.length() \u003c 7) {"},{"lineNumber":48,"author":{"gitId":"linqing42"},"content":"                    throw new DukeException(\"OOPS!!! There is no specific task to delete.\\n\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                int toDelete \u003d Ui.indexDetails(input);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                c \u003d new DeleteCommand(toDelete);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"            case \"done\":"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                if (input.length() \u003c 6) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                    throw new DukeException(\"please key in correct format.\\n\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                int toEdit \u003d Ui.indexDetails(input);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                c \u003d new DoneCommand(toEdit);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"            case \"deadline\":"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                if (input.length() \u003c 10) {"},{"lineNumber":64,"author":{"gitId":"linqing42"},"content":"                    throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\\n\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                String[] splitDetail \u003d input.split(\"/by\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                if (splitDetail.length \u003c 2) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                    throw new DukeException(\"Please specify the deadline date and time.\\n\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                String task \u003d splitDetail[0].substring(9);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                String by \u003d splitDetail[1];"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                    Date byDeadline \u003d format.parse(by);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                    taskWord \u003d new Deadline(task, formatter.format(byDeadline));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                }catch (Exception e){"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                    throw new DukeException(\"Please input a date in this format : dd/MM/yyyy HHmm\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                c \u003d new AddCommand(taskWord);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"            case \"event\":"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                if (input.length() \u003c 7) {"},{"lineNumber":83,"author":{"gitId":"linqing42"},"content":"                    throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\\n\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                String[] splitEvent \u003d input.split(\"/at\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                if (splitEvent.length \u003c 2) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                    throw new DukeException(\"Please specify the event date and time\\n\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                String event \u003d splitEvent[0].substring(6);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                String time \u003d splitEvent[1];"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                    Date timeEvent \u003d format.parse(time);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                    taskWord \u003d new Event(event, formatter.format(timeEvent));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                }catch(Exception e){"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                    throw new DukeException(\"Please input a date in this format : dd/MM/yyyy HHmm\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                c \u003d new AddCommand(taskWord);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            case \"find\":"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                if (input.length() \u003c 6) {"},{"lineNumber":101,"author":{"gitId":"linqing42"},"content":"                    throw new DukeException(\"OOPS!!! The description of a find cannot be empty.\\n\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                    keyword \u003d input.substring(5).toLowerCase();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                    c \u003d new FindCommand(keyword);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                } catch (NumberFormatException e) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                    throw new DukeException(\"please key in correct format.\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"            case \"bye\":"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            case \"exit\":"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                c \u003d new ExitCommand();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"            default:"},{"lineNumber":117,"author":{"gitId":"linqing42"},"content":"                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return c;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"},{"lineNumber":123,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"linqing42":6,"-":117}}]
